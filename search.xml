<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JVM运行时数据区域</title>
      <link href="2021/10/16/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/"/>
      <url>2021/10/16/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210928180523.png" alt="image-20210928180523303" style="zoom:50%;" /><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h2><p>也叫PC寄存器。</p><p>程序计数器只占有一块很小的内存区域，其作用是<strong>记录java字节码文件执行到的位置。</strong>字节码解释器通过分析记录的值，决定执行哪一条指令（比如循环、判断等情况时）。</p><p><strong>每个线程中都有一个程序计数器。</strong>因为处理器是通过分配时间片的方式执行线程的，所以一条线程程序可能在执行到某个位置之后，处理器会切换执行的线程，为了保证线程下次分配到时间片后，能从正确的位置执行，所以需要将这个位置保存在线程内部，所以每条线程都有一个程序计数器。</p><p>执行本地方法时（native方法），程序计数器中为null。</p><h2 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2.Java虚拟机栈"></a>2.Java虚拟机栈</h2><p>Java虚拟机栈也是线程私有的。是描述Java方法执行的线程内存模型。</p><p>方法执行时，虚拟机会为方法创建一个栈帧，用于存储局部变量表、操作数栈、动态连接、方法出口等信<br>息。方法从开始执行，到执行完毕，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>虚拟机栈上可能出现异常两种StackOverfloweError、OutOfMemoryError</p><p><strong>StackOverfloweError</strong>：当创建线程时，请求的栈深度大于虚拟机所允许的最大深度时，会出现StackOverfloweError。</p><p>虚拟机栈容量太小，或新的帧栈内存无法分配时（定义了大量的本地变量，增大此方法帧中本地变量表的长度）。</p><p><strong>OutOfMemoryError</strong>：如果虚拟机的栈空间允许扩展，当栈空间扩展时，如果无法申请到足够的空间，会出现OutOfMemoryError。</p><p>Hostpot虚拟机无法扩展栈空间，所以出现OutOfMemoryError时，多是创建新线程时，无法申请到足够的内存。</p><p>如果需要创建的线程数量过多，可以通过减小线程栈占用的空间大小即可。</p><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>局部变量表是Java虚拟机栈的一部分，用于存放编译器各种一直的基本数据类型、对象引用和returnAddress类型。</p><p>这些数据类型在局部变量表中的存储空间以局部变量槽表示。除64位长度的long和double数据类型占两个局部变量槽外，其他的数据类型都是占一个局部变量槽。</p><p>局部变量表所需的内存空间在编译时期已经完成分配。当运行到一个方法时，这个方法需要在帧栈中分配多大的局部变量空间是确定的，且在运行期间不会改变大小（槽的数量）。</p><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h2><p>本地方法栈的作用与虚拟机栈的作用类似，只是一个是Java方法运行时用到的，一个是本地方法运行时用到的。</p><p>所以本地方法同样会出现StackOverflowError、OutOfMemoryError，且出现原因与Java虚拟栈出现的原因相同。</p><h2 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4.Java堆"></a>4.Java堆</h2><p>Java堆是虚拟机所管理的内存区域中最大的一部分，被线程共享，其存放的是对象实例。</p><p>不需要连续的内存、可以选择固定大小或者可扩展。</p><p>垃圾回收的范围就是Java堆。</p><p>如果从分配内存的角度看，所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区，以提升对象分配时的效率。</p><p>Java堆上出现OutOfMemoryError会有两种情况，内存泄露（Memory Leak）、内存溢出(Memory Overflow)。</p><p><strong>内存溢出</strong>：java堆用于存储对象实例，如果对象实例创建过多，且垃圾回收机制无法及时回收，当创建对象的占用内存总量，超过堆的最大限制。</p><p><strong>内存泄漏</strong>：指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h2><p>方法区也是线程共享区域。</p><p>用于加载虚拟机已经加载的类型数据、常量、静态变量、即时编译器编译后的代码缓存等数据。</p><p>Hospot虚拟机在JDK6之前使用永久代来实现方法区（但本质上，两者并不相同）。逐渐使用本地内存实现，在JDK8，使用本地内存实现元空间，来完全替代永久代。</p><p>不需要连续的内存、可以选择固定大小或者可扩展。甚至垃圾回收的需求较少，主要是对常量池的回收与类型的卸载。</p><p>当方法区无法满足新的内存分配时，会出现OutOfMemoryError。</p><blockquote><p>可以通过一直动态生成类实现，因为方法区保存的是类的相关信息。因为类被垃圾回收机制回收条件比较严苛，所以方法区出现内存溢出比较常见（JDK7及之前的版本，因为JDK8开始，方法区移到了原空间中）。</p></blockquote><p>JDK7及之前的版本，如果方法区内存溢出，会出现OutOfMemoryError，并提示PermGen（永久代） Space。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>存放编译期生成的各种字面常量与符号引用。在类加载时期将其放入常量池中。</p><p>JDK7之前，运行时常量池在方法区中，所以如果一直添加常量（如String类型数据），会出现OutOfMemoryError，并提示PermGen（永久代） Space。</p><p>JDK7及之后的版本由于运行时常量池存放到了Java堆中，则需要通过限制堆的发小来实现查看运行时常量池一场。</p><blockquote><p>异常信息为</p><p>Java heap space  </p><p>RuntimeConstantPoolOOM</p></blockquote><p>X</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程通信</title>
      <link href="2021/10/07/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
      <url>2021/10/07/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><h2 id="1-volatile实现线程通信"><a href="#1-volatile实现线程通信" class="headerlink" title="1.volatile实现线程通信"></a>1.volatile实现线程通信</h2><p>由于volatile变量的可见性，所以可以在需要通信的地方修改volatile变量，在需要接收通信的地方监听（循环检测）volatile变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CommunicationByVolatile</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-wait、notify实现线程通信"><a href="#2-wait、notify实现线程通信" class="headerlink" title="2.wait、notify实现线程通信"></a>2.wait、notify实现线程通信</h2><p>使用wait()方法，让当前线程进入等待（阻塞）状态</p><p>使用notify()、notifyAll()方法唤醒线程。</p><p>notify()：随机唤醒一个线程</p><p>notifyAll()：唤醒所有线程</p><p>唤醒线程不代表线程获取了锁，而是给允许线程去尝试获取锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CommunicationByNotify</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        o<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            o<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Condition实现线程通信"><a href="#3-Condition实现线程通信" class="headerlink" title="3.Condition实现线程通信"></a>3.Condition实现线程通信</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CommunicationByLock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-LockSupport实现线程通信"><a href="#4-LockSupport实现线程通信" class="headerlink" title="4.LockSupport实现线程通信"></a>4.LockSupport实现线程通信</h2><p>LockSupport是通过<code>public final class Unsafe</code>类，直接操作内存进行的</p><p>当调用park时，先尝试直接能否直接拿到“许可”，即<code>_counter&gt;0</code>时，如果成功，则把_counter设置为0,并返回。</p><p>如果不成功，则构造一个ThreadBlockInVM，然后检查<code>_counter</code>是不是&gt;0，如果是，则把<code>_counter</code>设置为0，unlock mutex并返回:</p><p>否则，再判断等待的时间，然后再调用pthread_cond_wait函数等待，如果等待返回，则把_counter设置为0，unlock mutex并返回：</p><p>当unpark时，则简单多了，直接设置<code>_counter</code>为1，再unlock mutext返回。如果_counter之前的值是0，则还要调用pthread_cond_signal唤醒在park中等待的线程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CommunicationByLockSupport</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-CountDownLatch实现线程通信"><a href="#5-CountDownLatch实现线程通信" class="headerlink" title="5.CountDownLatch实现线程通信"></a>5.CountDownLatch实现线程通信</h2><p>使用AbstractQueuedSynchronizer实现，是一个共享式锁。</p><p>CountDownLatch只有一个构造器<code>public CountDownLatch(int count)</code>，该构造器目的是设置AQS中的state。</p><p>CountDownLatch实际就是每次执行countDown()方法就将AQS中的state减一，当state为0后，线程就从等待队列中出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CommunicationByCountDownLatch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> countDownLatch1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> count <span class="token operator">=</span> countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            countDownLatch1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池Executor框架</title>
      <link href="2021/10/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0Executor%E6%A1%86%E6%9E%B6/"/>
      <url>2021/10/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0Executor%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Executor框架核心组件"><a href="#1-Executor框架核心组件" class="headerlink" title="1.Executor框架核心组件"></a>1.Executor框架核心组件</h1><h2 id="1-Exector接口"><a href="#1-Exector接口" class="headerlink" title="1.Exector接口"></a>1.Exector接口</h2><p>Exector接口是线程池的核心接口，将任务的提交与执行分离，有两个主要实现类：ThreadPoolExecutor、ScheduledThreadPoolExecutor（可以在给定的延迟后运行命令，或者定期执行命令）。</p><h3 id="1-ThreadPoolExecutor"><a href="#1-ThreadPoolExecutor" class="headerlink" title="1.ThreadPoolExecutor"></a>1.ThreadPoolExecutor</h3><p>ThreadPoolExecutor通常使用工厂类来创建。<strong>Executors</strong>可以创建3种类型的 ThreadPoolExecutor：SingleThreadExecutor、FixedThreadPool和CachedThreadPool。三种线程池并没有响应的实体类，只在Executors中提供了静态方法创建实例。</p><h4 id="1-SingleThreadExecutor"><a href="#1-SingleThreadExecutor" class="headerlink" title="1.SingleThreadExecutor"></a>1.SingleThreadExecutor</h4><p>创建只有一个线程的线程池</p><p>适用于需要保证顺序地执行各个任务；并且在任意时间点，不会有多个线程是活动的应用场景。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                threadFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-FixedThreadPool"><a href="#2-FixedThreadPool" class="headerlink" title="2.FixedThreadPool"></a>2.FixedThreadPool</h4><p>创建固定数量线程的线程池。</p><p>适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场景，它适用于负载比较重的服务器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                  threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-CachedThreadPool"><a href="#3-CachedThreadPool" class="headerlink" title="3.CachedThreadPool"></a>3.CachedThreadPool</h4><p>可以一直创建新线程的线程池，线程池中没有核心线程。</p><p>适用于执行很多的短期异步任务的小程序，或者是负载较轻的服务器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                  threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ScheduledThreadPoolExecutor"><a href="#2-ScheduledThreadPoolExecutor" class="headerlink" title="2.ScheduledThreadPoolExecutor"></a>2.ScheduledThreadPoolExecutor</h3><p>ScheduledThreadPoolExecutor通常使用工厂类Executors来创建。Executors可以创建2种类型的ScheduledThreadPoolExecutor</p><h4 id="1-SingleThreadScheduledExecutor"><a href="#1-SingleThreadScheduledExecutor" class="headerlink" title="1.SingleThreadScheduledExecutor"></a>1.SingleThreadScheduledExecutor</h4><p>适用于需要单个后台线程执行周期任务，同时需要保证顺 序地执行各个任务的应用场景。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DelegatedScheduledExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DelegatedScheduledExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-ScheduledThreadPool"><a href="#2-ScheduledThreadPool" class="headerlink" title="2.ScheduledThreadPool"></a>2.ScheduledThreadPool</h4><p>适用于需要多个后台线程执行周期任务，同时为了满足资源 管理的需求而需要限制后台线程的数量的应用场景。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span>    <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Future接口"><a href="#2-Future接口" class="headerlink" title="2.Future接口"></a>2.Future接口</h2><p>Future接口及其实现类FutureTask表示异步计算的结果。</p><h2 id="3-任务接口"><a href="#3-任务接口" class="headerlink" title="3.任务接口"></a>3.任务接口</h2><p>Runnable接口与Callable接口表示线程任务，可以被ThreadPoolExecutor、ScheduledThreadPoolExecutor执行。</p><h1 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2.执行流程"></a>2.执行流程</h1><p>1.创建线程任务（Runnable接口与Callable接口实现类）。</p><p>2.将任务提交给ThreadPoolExecutor、ScheduledThreadPoolExecutor执行。</p><p>3.ThreadPoolExecutor、ScheduledThreadPoolExecutor执行后，得到结果（Future接口及其实现类FutureTask）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> Executor </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized锁升级</title>
      <link href="2021/10/07/synchronized%E9%94%81%E5%8D%87%E7%BA%A7/"/>
      <url>2021/10/07/synchronized%E9%94%81%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>大多数情况下，锁不存在多线程竞争，而是总是由同一线程多次获得。为了减少获得锁、释放锁带来的性能消耗，在jdk1.6时引入了偏向锁、轻量级锁。锁状态级别从低到高分别是<strong>无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态</strong>。锁状态可以升级，但是无法降级。</p><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID。</p><p>以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的MarkWord里是否存储着指向当前线程的偏向锁。</p><p>如果测试成功，表示线程已经获得了锁。</p><p>如果测试失败，则需要再测试一下MarkWord中偏向锁的标识是否设置成1（表示当前是偏向锁）。</p><p>如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p><blockquote><h3 id="MarkWord"><a href="#MarkWord" class="headerlink" title="MarkWord"></a>MarkWord</h3><p>记录了对象和锁有关的信息</p><p><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210825150358.png" alt="image-20210825150358759"></p></blockquote><p><strong>偏向锁的撤销</strong></p><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。</p><p>偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。</p><p>它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着。</p><p>如果线程不处于活动状态，则将对象头设置成无锁状态；</p><p>如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的MarkWord要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程。</p><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210825154021.png" alt="image-20210825154021635" style="zoom:80%;" /><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>（1）轻量级锁加锁</p><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。</p><p>然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。当自选到一定次数后，就会将锁升级为重量级锁，该线程进入阻塞状态。</p><blockquote><p>CAS操作包含三个操作数——内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在CAS指令之前返回该位置的值。（在CAS的一些特殊情况下将仅返回CAS是否成功，而不提取当前值。）CAS有效地说明了“我认为位置V应该包含值A；如果包含该值，则将B放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”</p><p>通常将CAS用于同步的方式是从地址V读取值A，执行多步计算来获得新值B，如果V处的值尚未同时更改，使用CAS将V的值从A改为B。</p></blockquote><p>（2）轻量级锁解锁</p><p>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁已经膨胀成重量级锁。此时，该线程会释放锁，唤醒其他锁，并将对象头改为无所状态。</p><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210825153913.png" alt="image-20210825153913647" style="zoom:66%;" /><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>重量级锁依赖于底层操作系统的Mutex Lock，所有线程都会被阻塞住，线程之间的切换需要从用户态到内核态，切换成本非常高。</p><h2 id="锁的对比"><a href="#锁的对比" class="headerlink" title="锁的对比"></a>锁的对比</h2><table><thead><tr><th align="left">锁</th><th align="left">优点</th><th align="left">缺点</th><th align="left">适用场景</th></tr></thead><tbody><tr><td align="left">偏向锁(Biased Lock)</td><td align="left">加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距</td><td align="left">如果线程间存在锁竞争，会带来额外的锁撤销</td><td align="left">适用于只有一个线程访问</td></tr><tr><td align="left">轻量级锁(Lightweight Lock)</td><td align="left">竞争的线程不会阻塞，提高了程序的响应速度</td><td align="left">对于得不到锁的线程，自旋会消耗CPU</td><td align="left">追求响应时间，或者要求临界区简短，自旋不会占用CPU过久</td></tr><tr><td align="left">重量级锁(Heavyweight Lock)</td><td align="left">线程竞争不使用自旋，不会消耗CPU资源</td><td align="left">线程阻塞，响应时间缓慢</td><td align="left">追求吞吐量</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> synchroized </tag>
            
            <tag> 锁 </tag>
            
            <tag> 锁升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的组成</title>
      <link href="2021/10/07/%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%84%E6%88%90/"/>
      <url>2021/10/07/%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-对象头"><a href="#1-对象头" class="headerlink" title="1.对象头"></a>1.对象头</h2><p>如果对象是数组类型，则虚拟机用3个字宽 （Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit。</p><h3 id="1-Mark-Word"><a href="#1-Mark-Word" class="headerlink" title="1.Mark Word"></a>1.Mark Word</h3><p>Mark Word在32位JVM中的长度是32bit，在64位JVM中长度是64bit。</p><h4 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h4><table>    <tr>        <td rowspan="2">锁状态</td>        <td colspan = "2">25 bit</td>        <td rowspan="2">4 bit</td>        <td>1 bit</td>        <td>2 bit</td>    </tr>    <tr>        <td>23 bit</td>        <td>2 bit</td>        <td>是否偏向锁</td>        <td>锁标志位</td>    </tr>    <tr>        <td>无锁</td>        <td colspan = "2">对象的hashcode</td>        <td>分代年龄</td>        <td>0</td>        <td>01</td>    </tr>    <tr>        <td>偏向锁</td>        <td>线程ID</td>        <td>Epoch</td>        <td>分代年龄</td>        <td>0</td>        <td>01</td>    </tr>    <tr>        <td>轻量级锁</td>        <td colspan = "3">指向栈中锁记录的指针</td>        <td>00</td>    </tr>    <tr>        <td>重量级锁</td>        <td colspan = "4">指向重量级锁的指针</td>        <td>10</td>    </tr>    <tr>        <td>GC标记</td>        <td colspan = "4">空</td>        <td>11</td>    </tr></table><h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><p><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210902161002.png" alt="image-20210902161002393"></p><p>unused：未使用</p><p>identity_hashcode：对象的hashcode</p><p>age：分代年龄</p><p>biased_lock：是否偏向锁</p><p>lock：锁标志位</p><h3 id="2-指向类的指针"><a href="#2-指向类的指针" class="headerlink" title="2.指向类的指针"></a>2.指向类的指针</h3><p>该指针在32位JVM中的长度是32bit，在64位JVM中长度是64bit。</p><p>Java对象的类数据保存在方法区。</p><h3 id="3-数组长度"><a href="#3-数组长度" class="headerlink" title="3.数组长度"></a>3.数组长度</h3><p>只有数组对象才有，长度都是32bit</p><h2 id="2-实例数据"><a href="#2-实例数据" class="headerlink" title="2.实例数据"></a>2.实例数据</h2><p>原生类型占用内存情况</p><table><thead><tr><th>boolean</th><th>1</th></tr></thead><tbody><tr><td>byte</td><td>1</td></tr><tr><td>short</td><td>2</td></tr><tr><td>char</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>float</td><td>4</td></tr><tr><td>long</td><td>8</td></tr><tr><td>double</td><td>8</td></tr></tbody></table><h2 id="3-对象填充"><a href="#3-对象填充" class="headerlink" title="3.对象填充"></a>3.对象填充</h2><p>因为JVM要求java的对象占的内存大小应该是8bit的倍数，所以后面有几个字节用于把对象的大小补齐至8bit的倍数，没有特别的功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 对象的组成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile</title>
      <link href="2021/10/07/volatile/"/>
      <url>2021/10/07/volatile/</url>
      
        <content type="html"><![CDATA[<h2 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h2><p>由于程序执行时，每条指令都是在处理器中执行的，而指令操作所需要的数据保存在物理内存中。<br>由于处理器处理数据的速度远大于从内存中读取或写入的速度，所以为了提高程序运行的速度，处理器中有高速缓存区。<br>程序执行时，处理器会将运算中需要的数据复制到缓存区。处理器不会直接与内存进行通信，而是从缓存中获取数据进行操作。<br>当在多线程中运行时，就会出现问题。在多核CPU中，不同的线程可能不在同一个CPU中，所以有着不同的缓存区。（单核CPU中是以线程调度的形式来分别执行的，也会有这种问题）</p><h2 id="缓存一致性解决方案"><a href="#缓存一致性解决方案" class="headerlink" title="缓存一致性解决方案"></a>缓存一致性解决方案</h2><h3 id="1）Lock前缀指令"><a href="#1）Lock前缀指令" class="headerlink" title="1）Lock前缀指令"></a>1）Lock前缀指令</h3><p>Lock前缀指令在执行伴随指令期间，声言处理器的 LOCK# 信号（使指令成为原子指令）。在多处理器环境中，LOCK# 信号确保在声言该信号期间，处理器可以独占使用任何共享内存。<br>在早期的处理器中，Lock#会锁定总线，这样就会堵塞其他的CPU对内存等部件的访问，再次期间只有一个CPU能够访问操作内存，就保证了数据的一致性。<br>现在变为锁定缓存</p><h3 id="2）通过缓存一致性协议"><a href="#2）通过缓存一致性协议" class="headerlink" title="2）通过缓存一致性协议"></a>2）通过缓存一致性协议</h3><p>最著名的就是MESI协议。当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><h2 id="Java中的volatile"><a href="#Java中的volatile" class="headerlink" title="Java中的volatile"></a>Java中的volatile</h2><p>在Java虚拟机规范中定义了一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。</p><p>Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存，但不是物理内存，只是虚拟机内存的一部分），每个线程都有自己的工作内存（类似于前面的高速缓存，保存了该线程中需要使用的变量的主内存的副本拷贝）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p><p>如果处理器对使用了volatile修饰的变量进行修改时，JVM就会向处理器发送一条带有LOCK前缀的指令，将这个数据写回到内存中，但是其他线程中的缓存数据未更新。</p><p>根据缓存一致性协议，每个线程都会嗅探总线上传播的数据，检测自己缓存中的数据是否过期，当发现自己缓存的数据对应的内存地址被修改，就会将缓存中的数据设置为无效状态。</p><p>当线程再次使用到这个数据时，发现数据处于无效状态，就会重新从主内存中读取数据，将其缓存。</p><h2 id="volatile特性"><a href="#volatile特性" class="headerlink" title="volatile特性"></a>volatile特性</h2><p>可见性。对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写 入。</p><p>原子性：对任意单个volatile变量的读/写具有原子性，<strong>但类似于volatile++这种复合操作不 具有原子性。</strong></p><h2 id="volatile内存语义"><a href="#volatile内存语义" class="headerlink" title="volatile内存语义"></a>volatile内存语义</h2><p>从内存语义的角度来说，volatile的写-读与锁的释放-获取有相同的内存效果：</p><p>volatile写和锁的释放有相同的内存语义；volatile读与锁的获取有相同的内存语义。</p><p>当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存。</p><p>当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。</p><p>线程A写一个volatile变量，实质上是线程A向接下来将要读这个volatile变量的某个线程发出了（其对共享变量所做修改的）消息。 </p><p>线程B读一个volatile变量，实质上是线程B接收了之前某个线程发出的（在写这个volatile 变量之前对共享变量所做修改的）消息。</p><p>线程A写一个volatile变量，随后线程B读这个volatile变量，这个过程实质上是线程A通过主内存向线程B发送消息</p><p><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210903182700.png" alt="image-20210903182700305"></p><p><strong>volatile读写操作变量前后的内存屏障</strong></p><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210906112234.png" alt="image-20210906112232731" style="zoom: 33%;" /><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210906112415.png" alt="image-20210906112415381" style="zoom:33%;" /><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210906113429.png" alt="image-20210906113429069" style="zoom: 67%;" /><p><strong>volatile变量读写操作的内存刷新</strong></p><p>volatile变量写操作之前会刷新内存，目的是确保volatile变量写操作时，读取到的数据都是最新数据（一个volatile变量写操作时，可能会需要其他volatile变量数据）。</p><p>volatile变量写操作之后会刷新内存，目的是确保volatile变量发生改变之后，其他线程可以读到最新数据。</p><p>volatile变量读操作之前会刷新内存，目的是确保读到的volatile变量是最新的数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型</title>
      <link href="2021/10/07/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/10/07/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java内存模型基础"><a href="#Java内存模型基础" class="headerlink" title="Java内存模型基础"></a>Java内存模型基础</h1><h2 id="通信与同步"><a href="#通信与同步" class="headerlink" title="通信与同步"></a>通信与同步</h2><p><strong>通信与同步是并发编程的两个关键问题</strong></p><p><strong>通信：</strong>线程之间以何种机制进行信息交换。</p><p><strong>同步：</strong>程序中用于控制不同线程间操作发生相对顺序的机制。</p><p>在不同的并发模型中，通信方式与同步方式有所不同</p><h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p><strong>Java选择的方式</strong></p><p>线程之间共享程序的共同状态，通过读写内存中的共同状态进行隐式通信。</p><p>同步是显示进行的。需显示的指定某个方法或某段代码需要在线程之间互斥执行。</p><h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p>线程之间没有共同状态，线程之间必须通过发送消息进行线程通信。</p><p>消息的发送必须在消息接收之前，所以会进行隐式同步。</p><h2 id="内存模型的抽象结构"><a href="#内存模型的抽象结构" class="headerlink" title="内存模型的抽象结构"></a>内存模型的抽象结构</h2><p>Java内存模型（JMM）中，堆内存在线程之间共享，堆内存中保存了实例域、静态域和数组元素。</p><p>保存在其他位置的数据，不会有内存可见性问题，所以不会在线程之间进行共享。包括局部变量、方法参数、异常处理器参数等。</p><p>JMM通过共享变量，控制了Java线程之间的通信。</p><p>JMM定义了线程和主内存之间的关系：线程之间的共享变量保存在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程运行过程中需要操作的共享变量的副本。</p><p><strong>线程之间的通信过程</strong></p><p>线程一更新数据并保存在自己的本地内存中，随后将本地内存中更新后的共享变量更新到主内存中。</p><p>线程二得到共享内存更新的消息后（还是定时更新本地内存？），从主线程中获取更新后的共享变量，并保存在自己的本地内存中。</p><h2 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h2><p>指令重排序可以分为三种</p><p>1.编译器重排序，在不改变单线程程序的语义的情况下，重新安排语句的执行顺序。</p><p>2.指令级并行的重排序，如果不存在数据依赖性，处理器可以改变语句对应的机器指令的执行顺序。</p><p>3.内存系统重排序，由于处理器使用缓存和读写缓冲区，使得加载和存储操作看上去是乱序执行。</p><p>java重排序顺序</p><p>编译器重排序-&gt;指令级并行的重排序-&gt;内存系统重排序</p><p>为了避免指令重排序造成内存可见性问题，JMM会根据编译器重排序规则<strong>禁止某些特定类型的编译器重排序</strong>。会<strong>根据处理器重排序规则要求Java编译器在生成指令序列时，通过插入内存屏障</strong>，来禁止处理器对某些特定类型指令的重排序。</p><h2 id="并发编程的模型分类"><a href="#并发编程的模型分类" class="headerlink" title="并发编程的模型分类"></a>并发编程的模型分类</h2><blockquote><p>现代的处理器使用写缓冲区临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，减少对内存总线的占用。</p></blockquote><p>由于每个处理器都有自己的写缓冲区，且只对当前处理器可见，所以这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读/写操作的执行顺序，不一定与内存实际发生的读/写操作顺序一致。（如果当前处理器对数据做出了修改，但先写入了写缓冲区，并未直接存入内存。如果在此时，另一个处理器读取这个数据，会读取到未修改的数据）</p><blockquote><p>由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操作进行重排序。</p></blockquote><blockquote><p>为了保证内存可见性，Java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM把内存屏障指令分为4类</p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210826164256032.png" alt="image-20210826164256032"></p></blockquote><h2 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h2><p>从JDK5开始，Java使用新的JSR-133内存模型，JSR-133使用happens-before的概念来阐述操作之间的内存可见性。在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间<strong>。</strong></p><p><strong>happens-before规则</strong></p><p>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</p><p>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</p><p>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</p><p>传递性：如果Ahappens-beforeB，且Bhappens-beforeC，那么Ahappens-beforeC。</p><p>start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的 ThreadB.start()操作happens-before于线程B中的任意操作。</p><p>join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作 happens-before于线程A从ThreadB.join()操作成功返回。</p><p>两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！</p><p>happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前。</p><h1 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h1><h2 id="数据依赖性"><a href="#数据依赖性" class="headerlink" title="数据依赖性"></a>数据依赖性</h2><blockquote><p>如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。</p></blockquote><p>因为如果两个操作中有一个操作是写操作，那么如果两个操作顺序改变，就会影响执行结果。所以两个操作存在数据依赖性。</p><blockquote><p>这里所说的数据依赖性仅针对单个处理器中执行的指令序列和单个线程中执行的操作，不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑</p></blockquote><h2 id="as-if-serial"><a href="#as-if-serial" class="headerlink" title="as-if-serial"></a>as-if-serial</h2><p>语义：不管怎么重排序，单线程程序的执行结果不能被改变。</p><p>编译器、runtime和处理器都必须遵守as-if-serial语义。所以编译器和处理器不会对存在数据依赖性的操作进行重排序。</p><p>但在多线程程序中，对存在控制依赖的操作重排序，可能会改变程序的执行结果。</p><h1 id="顺序一致性"><a href="#顺序一致性" class="headerlink" title="顺序一致性"></a>顺序一致性</h1><p>JMM<strong>不保证</strong>未同步程序的执行结果与该程序在顺序一致性模型中的执行结果一致。</p><p>顺序一致性模型保证单线程内的操作会按程序的顺序执行，而JMM不保证单线程内的操作会按程序的顺序执行。</p><p>顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而JMM不保证所有线程能看到一致的操作执行顺序。</p><p>JMM不保证对64位的long型和double型变量的写操作具有原子性，而顺序一致性模型保证对所有的内存读/写操作都具有原子性。这与处理器总线的工作机制密切相关。在计算机中，数据通过总线在处理器和内存之间传递。每次处理器和内存之间的数据传递都是通过一系列步骤来完成的，这一系列步骤称之为总线事务（Bus Transaction）。</p><blockquote><p>总线事务包括读事务（Read Transaction）和写事务（Write Transaction）。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务会 读/写内存中一个或多个物理上连续的字。这里的关键是，总线会同步试图并发使用总线的事 务。在一个处理器执行总线事务期间，总线会禁止其他的处理器和I/O设备执行内存的读/写。</p><p>总线事务包括读事务（Read Transaction）和写事务（Write Transaction）。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务会 读/写内存中一个或多个物理上连续的字。这里的关键是，总线会同步试图并发使用总线的事 务。在一个处理器执行总线事务期间，总线会禁止其他的处理器和I/O设备执行内存的读/写。</p><p>总线的这些工作机制可以把所有处理器对内存的访问以串行化的方式来执行。在任意时 间点，最多只能有一个处理器可以访问内存。这个特性确保了单个总线事务之中的内存读/写 操作具有原子性。</p><p>当JVM在这种处理器上运行时，可能会把一个64位long/double型变量的写 操作拆分为两个32位的写操作来执行。这两个32位的写操作可能会被分配到不同的总线事务 中执行，此时对这个64位变量的写操作将不具有原子性。</p></blockquote><h1 id="锁的内存语义"><a href="#锁的内存语义" class="headerlink" title="锁的内存语义"></a>锁的内存语义</h1><p>当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中。</p><p>当线程获取锁时，JMM会把该线程对应的本地内存置为无效。从而使得被监视器保护的临界区代码必须从主内存中读取共享变量。</p><blockquote><p>线程A释放一个锁，实质上是线程A向接下来将要获取这个锁的某个线程发出了（线程A 对共享变量所做修改的）消息。</p><p>线程B获取一个锁，实质上是线程B接收了之前某个线程发出的（在释放这个锁之前对共 享变量所做修改的）消息。 </p><p>线程A释放锁，随后线程B获取这个锁，这个过程实质上是线程A通过主内存向线程B发送消息。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> JMM </tag>
            
            <tag> 指令排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS</title>
      <link href="2021/10/07/CAS/"/>
      <url>2021/10/07/CAS/</url>
      
        <content type="html"><![CDATA[<h2 id="CAS：Compare-And-Swap"><a href="#CAS：Compare-And-Swap" class="headerlink" title="CAS：Compare And Swap"></a>CAS：Compare And Swap</h2><p>CAS是一种乐观锁机制。并不是一种锁，而是一种无锁算法。通过算法保证原子性。是通过调用 JNI（Java Native Interface）的代码实现的。</p><h3 id="CAS三个关键参数"><a href="#CAS三个关键参数" class="headerlink" title="CAS三个关键参数"></a>CAS三个关键参数</h3><p>V：内存位置</p><p>A：原值</p><p>B：新值</p><h3 id="CAS操作过程"><a href="#CAS操作过程" class="headerlink" title="CAS操作过程"></a>CAS操作过程</h3><p>1.获取内存位置为中的数据，作为原值A。然后执行操作。</p><p>2.操作完成后，将保存的原值A与内存位置V中现有的数据进行对比。</p><p>3.如果A与现有数据相等，则将内存位置V中的数据更改为新值B。</p><p>​    如果A与现有数据不相等，则获取内存位置V中现在的数据，重新执行CAS操作。</p><h3 id="CAS的缺点"><a href="#CAS的缺点" class="headerlink" title="CAS的缺点"></a>CAS的缺点</h3><h4 id="1-ABA问题"><a href="#1-ABA问题" class="headerlink" title="1.ABA问题"></a>1.ABA问题</h4><p><strong>问题描述</strong></p><p>1.线程一获取到内存地址V中的原值A进行操作。</p><p>2.操作过程中，线程二将内存地址V中的数据进行了修改，修改为B。</p><p>3.线程一CAS操作进行比较之前，除线程一外的其他线程再次修改内存地址V中的数据，修改为未修改时的数据A。</p><p>4.线程一CAS执行完成后，进行比较时，获得数据与保存的原值A相等，CAS操作通过，但实际上，内存位置V中的数据在期间进行了修改。</p><p><strong>解决方法</strong></p><p>使用版本机制</p><p>在获取原值A时，将原值与当前版本进行拼接，作为原值A，在进行比较时，将当前值与当前版本进行拼接与原值A进行比较</p><pre class="line-numbers language-none"><code class="language-none">egv : 版本：1 ， 数据：a获取原值A：1a如果在期间其他线程修改数据，版本号会变化a -&gt; bv : 版本：2 ， 数据：bb -&gt; av : 版本：3 ， 数据：a再次进行比较时，比较的数据就是1a与3a，不匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么不直接比较版本号</strong></p><p>如果直接比较版本号</p><p>两个线程同时操作一个共享变量a，线程一二如果同时对a进行修改，线程一抢先成功修改了版本号，单在未成功修改数据时，线程二比较版本号失败后，获取共享变量a现在的数据自旋执行，但此时线程一还没有成功修改共享变量a，那么线程二自旋时获取的数据仍然是旧数据。</p><h4 id="2-一直失败，一直自旋"><a href="#2-一直失败，一直自旋" class="headerlink" title="2.一直失败，一直自旋"></a>2.一直失败，一直自旋</h4><p><strong>问题描述</strong></p><p>如果内存位置V的数据变化频繁，导致比较一致失败，会一直自旋进行CAS操作。耗费CPU性能。</p><p><strong>解决方法</strong></p><p>JVM中使用锁升级的方法解决。如果CAS自旋次数达到一定次数后，锁会由自旋锁升级为轻量级锁。</p><h4 id="3-只能保证一个共享变量的原子操作。"><a href="#3-只能保证一个共享变量的原子操作。" class="headerlink" title="3.只能保证一个共享变量的原子操作。"></a>3.只能保证一个共享变量的原子操作。</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
            <tag> CAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS：AbstractQueuedSynchronizer</title>
      <link href="2021/10/07/AQS%EF%BC%9AAbstractQueuedSynchronizer/"/>
      <url>2021/10/07/AQS%EF%BC%9AAbstractQueuedSynchronizer/</url>
      
        <content type="html"><![CDATA[<h1 id="AQS-队列同步器"><a href="#AQS-队列同步器" class="headerlink" title="AQS:队列同步器"></a>AQS:队列同步器</h1><p>AbstractQueuedSynchronizer</p><p>是一个抽象类</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>使用一个int变量state表示同步状态，使用一个队列存储等待获取资源的线程。</p><p>使用链表（FIFO:先进先出队列）保存线程等待队列，head保存完整的等待队列，tail保存队列尾结点。</p><p>同步队列用来存储获取同步状态失败的线程，当线程尝试获取同步状态失败之后，构建一个节点添加到同步队列的尾端。</p><p>节点中包括当前线程引用、前驱节点、后驱节点、等待状态。</p><p>添加节点时必须保证线程安全，所以提供了一个CAS方法:<code>compareAndSetTail(Node expect,Node update)</code>。</p><p>将节点添加到队列末端之后，线程会进入阻塞状态。</p><p>当占有同步状态的节点释放资源后，会把首节点中的线程唤醒，让其尝试去获取线程。当获取到同步状态之后，会将队列的首节点指向当前节点。独占式锁中，由于一次只有一个线程去获取同步状态，所以设置首节点不需要做线程安全处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 等待队列的头，延迟初始化。除初始化外，它仅通过方法setHead进行修改。 * 注意：如果head存在，则保证不会取消其waitStatus。 */</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span><span class="token comment">/** * 等待队列的尾部，延迟初始化。仅通过方法enq修改以添加新的等待节点。 */</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span><span class="token comment">/** * The synchronization state. */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同步器既可以支持独占式地获取同步状态，<code>ReentrantLock</code></p><p>也可以支持共享式地获取同步状态，<code>ReentrantReadWriteLock</code>、<code>CountDownLatch</code></p><h2 id="同步器与锁"><a href="#同步器与锁" class="headerlink" title="同步器与锁"></a>同步器与锁</h2><p>同步器用来实现锁的一种方式，并不是锁。</p><p>锁是业务代码使用的，通过锁对线程进行管控。</p><p>同步器是锁实现代码使用的，通过对同步器中，状态及等待队列的操作，实现锁的语义。</p><h2 id="同步器中的方法"><a href="#同步器中的方法" class="headerlink" title="同步器中的方法"></a>同步器中的方法</h2><p>独占式获取与释放同步状态、共享式获取与释放 同步状态和查询同步队列中的等待线程情况</p><h2 id="1-独占式流程分析"><a href="#1-独占式流程分析" class="headerlink" title="1.独占式流程分析"></a>1.独占式流程分析</h2><p>分析ReentrantLock</p><h3 id="1-lock"><a href="#1-lock" class="headerlink" title="1.lock"></a>1.lock</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 公平锁FairSync</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//非公平锁</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果前一个线程刚释放同步状态，队列中的首节点还未占有同步状态，此时，当前线程，会直接占有同步状态</span>    <span class="token comment">// synchronizer也是非公平的，但synchronizer的非公平时由于会有一个等待区，线程没有抢到资源时，会到</span>    <span class="token comment">// 等待区中，当占有资源的线程释放锁之后，等待区中的线程会同时抢资源，部分先后。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 阻塞线程</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.获取当前锁引用</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.获取同步状态变量值</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * hasQueuedPredecessors         * 查询是否有线程等待获取的时间长于当前线程。         * 如果当前线程前面有排队线程，则为true；如果当前线程位于队列的头部或队列为空，则为false         *          * compareAndSetState         * 设置同步状态变量值         *          * setExclusiveOwnerThread         * 设置当前拥有独占访问权限的线程。null参数表示没有线程拥有访问权限。         * 此方法不会以其他方式强制任何同步或易失性字段访问。         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * getExclusiveOwnerThread返回setExclusiveOwnerThread最后设置的线程，如果从未设置，     * 则返回null。此方法不会以其他方式强制任何同步或易失性字段访问。     *      * 如果当前线程时有独占访问权限的线程     */</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 向队列中添加节点</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当前线程在“死循环”中尝试获取同步状态</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210926173728.png" alt="image-20210926173728174" style="zoom: 67%;" /><h3 id="2-unlock"><a href="#2-unlock" class="headerlink" title="2.unlock"></a>2.unlock</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">// 启用线程，底层使用的是LockSupport.unpark(s.thread)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前同步状态变量值，并减去释放值</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 将占有同步状态的线程引用设为空</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-共享式流程分析"><a href="#2-共享式流程分析" class="headerlink" title="2.共享式流程分析"></a>2.共享式流程分析</h2><p>共享式获取支持多个线程同时持有同步状态</p><p>以ReentrantReadWriteLock为例，可以多个读线程占有同步状态，但只支持一个写线程占有同步状态，且同时读线程也不能占有同步状态。</p><p>由于写锁为独占锁，所以一下均为读锁流程。</p><p>写锁可以降级为读锁，但读锁不能升级为写锁。</p><p>读锁降级为读锁时，不释放写锁，先获取读锁，再释放写锁。</p><h3 id="1-lock-1"><a href="#1-lock-1" class="headerlink" title="1.lock"></a>1.lock</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> remaining <span class="token operator">=</span> available <span class="token operator">-</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>available<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> remaining<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1.如果写入锁被另一个线程持有，则失败。 * 2.否则，该线程符合lock wrt状态，因此询问它是否应该因为队列策略而阻塞。 *  如果没有，请尝试通过大小写状态和更新计数来授予。 *  请注意，步骤不检查可重入获取，这将推迟到完整版本，以避免在更典型的不可重入情况下必须检查保持计数。 * 3.如果第2步失败，或者是因为线程明显不合格，或者CAS失败，或者是因为计数饱和， *  则通过完整重试循环链接到版本。 */</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span>        <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> EXCLUSIVE_MASK<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> c <span class="token operator">>>></span> SHARED_SHIFT<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判读是否有前置节点</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这一点的正确性取决于在tail之前初始化head和head.next，如果当前线程是队列中的第一个线程，则是准确的。</span>    <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>     <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> s<span class="token punctuation">;</span>    <span class="token comment">// 头节点不是尾节点</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span>        <span class="token comment">// 头节点之后有节点，且该节点不是当前线程</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/jin-xin-yu/note-picture/raw/master/img/20210926181813.png" alt="image-20210926181813497" style="zoom: 67%;" /><h3 id="2-unlock-1"><a href="#2-unlock-1" class="headerlink" title="2.unlock"></a>2.unlock</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert firstReaderHoldCount > 0;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HoldCounter</span> rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// Releasing the read lock has no effect on readers,</span>            <span class="token comment">// but it may allow waiting writers to proceed if</span>            <span class="token comment">// both read and write locks are now free.</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="2021/04/21/Spring/"/>
      <url>2021/04/21/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring简介"><a href="#1-Spring简介" class="headerlink" title="1.Spring简介"></a>1.Spring简介</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>​        Spring是轻量级、开源的J2EE框架。是为了解决应用复杂性而产生的框架，它吸取了Java EE 容器管理的优点，提供了一个 IOC容器来管理 Bean，并通过 AOP方式来增强Bean的功能。</p><p>​        不同的是它并没像 Java EE 那样详细规定容器提供的是何种服务和容器里运行的具体组件类型 Spring 只提供了两种机制， 控制反转(IOC)和面向切面 (AOP)，来提供任意的服务和增强 Bean的任意特性，使得 Spring本身容易掌握，又可以通过Bean管理来无限扩展功能。</p><h2 id="2-核心组件"><a href="#2-核心组件" class="headerlink" title="2.核心组件"></a>2.核心组件</h2><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/1858105-20191126085752264-916496250.png" alt="img"></p><h3 id="1-Core-Container"><a href="#1-Core-Container" class="headerlink" title="1.Core Container"></a>1.Core Container</h3><h4 id="1-Beans-amp-Core"><a href="#1-Beans-amp-Core" class="headerlink" title="1.Beans &amp; Core"></a>1.Beans &amp; Core</h4><p>Spring框架的基础及核心部分，提供了BeanFactory功能；</p><h4 id="2-Context"><a href="#2-Context" class="headerlink" title="2.Context"></a>2.Context</h4><p>​        提供了类似于JNDI注册器的框架式的对象访问方法。同时提供了大量扩展。（国际化、事件传播、资源加载与对Context的透明创建的支持。</p><h4 id="3-SpEL"><a href="#3-SpEL" class="headerlink" title="3.SpEL"></a>3.SpEL</h4><p>​        Spring Expression Language，提供了强大的表达式语言，类似于JSP的EL与JSTL。</p><h3 id="2-Data-Access-Integration"><a href="#2-Data-Access-Integration" class="headerlink" title="2.Data Access/Integration"></a>2.Data Access/Integration</h3><p>数据访问模块，提供了大量访问数据库的组件。</p><h3 id="3-Web"><a href="#3-Web" class="headerlink" title="3.Web"></a>3.Web</h3><p>建立在应用程序上下文模块之上，为基于web的应用提供了上下文</p><h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ol><li>方便解耦，简化开发；</li><li>Aop编程支持；</li><li>方便程序测试；</li><li>方便和其他框架进行整合；</li><li>方便进行事务操作；</li><li>降低API开发难度。</li></ol><h2 id="4-环境搭建"><a href="#4-环境搭建" class="headerlink" title="4.环境搭建"></a>4.环境搭建</h2><h3 id="1-jar包"><a href="#1-jar包" class="headerlink" title="1.jar包"></a>1.jar包</h3><table><thead><tr><th>jar包</th><th>作用</th></tr></thead><tbody><tr><td>spring-aop.jar</td><td>开发AOP特性时需要的jar</td></tr><tr><td>spring-beans.jar</td><td>处理Bean的jar</td></tr><tr><td>spring-context.jar</td><td>处理spring上下文的jar</td></tr><tr><td>spring-core.jar</td><td>spring核心jar</td></tr><tr><td>spring-expression.jar</td><td>spring表达式</td></tr><tr><td>commons-logging.jar</td><td>三方提供的日志jar</td></tr></tbody></table><p>在使用maven构建spring项目时，只需要导入spring-context的依赖以及commons-logging的依赖，其他的依赖会自动添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-IDE"><a href="#2-IDE" class="headerlink" title="2.IDE"></a>2.IDE</h3><ol><li>IDEA</li><li>Spring Tool Suite</li><li>Eclipse+Spring插件</li></ol><h1 id="2-SpringIOC"><a href="#2-SpringIOC" class="headerlink" title="2.SpringIOC"></a>2.SpringIOC</h1><h2 id="1-IOC简介"><a href="#1-IOC简介" class="headerlink" title="1.IOC简介"></a>1.IOC简介</h2><h3 id="1-IOC概念"><a href="#1-IOC概念" class="headerlink" title="1.IOC概念"></a>1.IOC概念</h3><p><strong>控制反转</strong>：Inversion of Control</p><p>​        将创建Bean的控制权反转，交由Spring管理。</p><p>​        把对象创建和对象之间的调用过程，交给 Spring 进行管理。</p><p>​        反向控制应用程序所需要的资源</p><p>​        将创建对象、属性值的方式进行了翻转，从new、setXxx()  翻转为了从springIOC容器getBean()，也就是在IOC容器中创建对象.</p><p><strong>依赖注入：</strong>dependency injection</p><p>​        将属性值 注入给了属性，将属性 注入给了bean，将bean注入给了IOC容器；</p><p>​        Spring IOC负责管理对象，并结合你对对象的描述进行初始化和加强。比如，对于一个用注解＠Controller 声明的对象，Spring 会认为这个对象是个 Web Controller ，如果这个对象里的方法有＠RequestMapping 注解，则会将客户端发起的HTTP 请求转化成 Java方法调用。</p><h3 id="2-IOC底层原理"><a href="#2-IOC底层原理" class="headerlink" title="2.IOC底层原理"></a>2.IOC底层原理</h3><p>1.xml解析              2.工厂模式              3.反射</p><h3 id="3-IOC理解"><a href="#3-IOC理解" class="headerlink" title="3.IOC理解"></a>3.IOC理解</h3><blockquote><p>  ioc的思想最核⼼的地⽅在于，资源不由使⽤资源的双⽅管理，⽽由不使⽤资源的第三⽅管理，这可以带来很多好处。第⼀，资源集中管理，实现资源的可配置和易管理。第⼆，降低了使⽤资源双⽅的依赖程度，也就是我们说的耦合度。 也就是说，甲⽅要达成某种⽬的不需要直接依赖⼄⽅，它只需要达到的⽬的告诉第三⽅机构就可 以了，⽐如甲⽅需要⼀双袜⼦，⽽⼄⽅它卖⼀双袜⼦，它要把袜⼦卖出去，并不需要⾃⼰去直接 找到⼀个卖家来完成袜⼦的卖出。它也只需要找第三⽅，告诉别⼈我要卖⼀双袜⼦。这下好了， 甲⼄双⽅进⾏交易活动，都不需要⾃⼰直接去找卖家，相当于程序内部开放接⼝，卖家由第三⽅作为参数传⼊。甲⼄互相不依赖，⽽且只有在进⾏交易活动的时候，甲才和⼄产⽣联系。反之亦 然。这样做什么好处么呢，甲⼄可以在对⽅不真实存在的情况下独⽴存在，⽽且保证不交易时候⽆联系，想交易的时候可以很容易的产⽣联系。甲⼄交易活动不需要双⽅⻅⾯，避免了双⽅的互不信任造成交易失败的问题。因为交易由第三⽅来负责联系，⽽且甲⼄都认为第三⽅可靠。那么交易就能很可靠很灵活的产⽣和进⾏了。这就是ioc的核⼼思想。⽣活中这种例⼦⽐⽐皆是，⽀付宝在整个淘宝体系⾥就是庞⼤的ioc容器，交易双⽅之外的第三⽅，提供可靠性可依赖可灵活变更 交易⽅的资源管理中⼼。另外⼈事代理也是，雇佣机构和个⼈之外的第三⽅。<br>  在以上的描述中，诞⽣了两个专业词汇，依赖注⼊和控制反转所谓的依赖注⼊，则是，甲⽅开放 接⼝，在它需要的时候，能够讲⼄⽅传递进来(注⼊)所谓的控制反转，甲⼄双⽅不相互依赖，交易 活动的进⾏不依赖于甲⼄任何⼀⽅，整个活动的进⾏由第三⽅负责管理。</p></blockquote><h3 id="4-使用IOC的优点"><a href="#4-使用IOC的优点" class="headerlink" title="4.使用IOC的优点"></a>4.使用IOC的优点</h3><ol><li>不⽤⾃⼰组装，拿来就⽤。</li><li>降低耦合度。</li><li>享受单例的好处，效率⾼，不浪费空间。</li><li>便于单元测试，⽅便切换mock组件。</li><li>便于进⾏AOP操作，对于使⽤者是透明的。 </li><li>统⼀配置，便于修改。</li></ol><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h3><h4 id="1-约束"><a href="#1-约束" class="headerlink" title="1.约束"></a>1.约束</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>jdbc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jdbc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>jpa</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/data/jpa<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/aop                           https://www.springframework.org/schema/aop/spring-aop.xsd                           http://www.springframework.org/schema/tx                           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd                           http://www.springframework.org/schema/jdbc                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd                           http://www.springframework.org/schema/data/jpa                           https://www.springframework.org/schema/data/jpa/spring-jpa.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置包扫描"><a href="#2-配置包扫描" class="headerlink" title="2.配置包扫描"></a>2.配置包扫描</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- use-default-filters="false" 表示现在不使用默认 filter，自己配置 filter --></span><span class="token comment">&lt;!-- context:include-filter ，设置扫描哪些内容 --></span><span class="token comment">&lt;!-- context:exclude-filter： 设置哪些内容不进行扫描 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>包名<span class="token punctuation">"</span></span> <span class="token attr-name">use-defaultfilters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>包名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>包名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>type属性</th><th>规则</th></tr></thead><tbody><tr><td>annotation</td><td>根据注解排除</td></tr><tr><td>aspectj</td><td>按照ASPECTJ表达式</td></tr><tr><td>assignable</td><td>按照给定的类型</td></tr><tr><td>custom</td><td>按照自定义规则</td></tr><tr><td>regex</td><td>按照正则表达</td></tr></tbody></table><h4 id="3-加载其他配置文件"><a href="#3-加载其他配置文件" class="headerlink" title="3.加载其他配置文件"></a>3.加载其他配置文件</h4><p>1.加载其他spring配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>配置文件名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring容器同时加载多个配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件名"</span><span class="token punctuation">,</span><span class="token string">"配置文件名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring容器中的bean定义冲突问题</p><ul><li><p>同id的bean，后定义的覆盖先定义的</p></li><li><p>导入配置文件可以理解为将导入的配置文件复制粘贴到对应位置</p></li><li><p>导入配置文件的顺序与位置不同可能会导致最终程序运行结果不同</p></li></ul><p>2.Spring提供了读取外部properties文件的机制，使用读取到的数据为bean的属性赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--需要开启context命名空间支持--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:配置文件名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2.配置类"></a>2.配置类</h3><h4 id="1-配置类标识注解"><a href="#1-配置类标识注解" class="headerlink" title="1.配置类标识注解"></a>1.配置类标识注解</h4><p><code>Configuration</code></p><h4 id="2-配置包扫描-1"><a href="#2-配置包扫描-1" class="headerlink" title="2.配置包扫描"></a>2.配置包扫描</h4><p>使用注解<code>@ComponentScan</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * basePackages : 设置扫描那些包 * includeFilters : 设置要扫描那些包 * excludeFilters : 设置要忽略扫描那些包 * useDefaultFilters : 表示现在不使用默认 filter，自己配置 filter */</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"包名"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>includeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在@ComponentScan注解中配置excludeFilters，excludeFilters是一个数组类类型，里边是@Filter类型数组</p><p>有以下几种方法</p><p><strong>按类型</strong></p><p>在@Filter注解中配置type属性，type属性的类型为要根据什么确定</p><table><thead><tr><th>type属性</th><th>规则</th></tr></thead><tbody><tr><td>FilterType.ANNOTATION</td><td>根据注解排除</td></tr><tr><td>FilterType.ASPECTJ</td><td>按照ASPECTJ表达式</td></tr><tr><td>FilterType.ASSIGNABLE_TYPE</td><td>按照给定的类型</td></tr><tr><td>FilterType.CUSTOM</td><td>按照自定义规则</td></tr><tr><td>FilterType.REGEX</td><td>按照正则表达</td></tr></tbody></table><p>配置classes属性配置要排除的类型，是一个数组类型，里边填写要排除的类型。</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//根据注解排除所有带有@Controller注解的类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.jxy"</span><span class="token punctuation">,</span>excludeFilters <span class="token operator">=</span>                <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token class-name">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同排除配置方式一样，只需将excludeFilters替换为includeFilters，同时，配置useDefaultFilters为false（默认为true）进行开启。</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//只包含带有Controller的注解的类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.jxy"</span><span class="token punctuation">,</span>              includeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token class-name">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>                                                classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-加载其他配置文件-1"><a href="#3-加载其他配置文件-1" class="headerlink" title="3.加载其他配置文件"></a>3.加载其他配置文件</h4><p>1.加载其他spring配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>配置类类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring容器同时加载多个配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>配置类类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>配置类类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.加载properties文件</p><p>使用<code>@PropertySource(&quot;classpath:/配置文件名&quot;)</code></p><p>ignoreResourceNotFound：忽略未找到的配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:/jdbc.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ignoreResourceNotFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:/jdbc.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.spring.dao"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.spring.dao"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"entityManagerFactory"</span><span class="token punctuation">,</span> transactionManagerRef <span class="token operator">=</span> <span class="token string">"transactionManager"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;driver&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;url&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;user&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;password&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DriverManagerDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DriverManagerDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Profile环境标识</p><p>加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中。默认是 defaut环境；</p><p>写在配置类上，只有是指定的环境的时候，整个配置类里面的所有配置才能开始生效；</p><p>没有标注环境标识的bean在，任何环境下都是加载的；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Compont</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-开启Aop"><a href="#4-开启Aop" class="headerlink" title="4.开启Aop"></a>4.开启Aop</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-条件创建"><a href="#5-条件创建" class="headerlink" title="5.条件创建"></a>5.条件创建</h4><p>添加注解@Conditional()，创建条件类，并添加进注解中。</p><p>创建条件类</p><p>创建一个类实现Condition接口，然后定义条件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Annotation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConditional</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * conditionContext:判断条件能使用的上下文条件     * annotatedTypeMetadata：注释信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> conditionContext<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> annotatedTypeMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取到ioc使用的Beanfactory</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取类加载器</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前环境</span>        <span class="token class-name">Environment</span> environment <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取到Bean定义的注册类</span>        <span class="token class-name">BeanDefinitionRegistry</span> registry <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> property <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//返回值为false的条件为不满足的条件，为true的为满足的条件</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanNamesForType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">StudentServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Environment</span> environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> property <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> beanNamesForType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">StudentServiceImpl</span><span class="token punctuation">></span></span> beansOfType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">StudentServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beansOfType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>结果    <span class="token number">22</span>行为<span class="token boolean">false</span>时    <span class="token class-name">Windows</span> <span class="token number">10</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token number">22</span>行为<span class="token boolean">true</span>时    <span class="token class-name">Windows</span> <span class="token number">10</span>    student<span class="token punctuation">&#123;</span>student<span class="token operator">=</span>com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span><span class="token class-name">StudentServiceImpl</span><span class="token annotation punctuation">@1de76cc7</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Bean"><a href="#3-Bean" class="headerlink" title="3.Bean"></a>3.Bean</h2><h3 id="1-Bean属性"><a href="#1-Bean属性" class="headerlink" title="1.Bean属性"></a>1.Bean属性</h3><h4 id="1-id"><a href="#1-id" class="headerlink" title="1.id"></a>1.id</h4><p>bean的唯一标识</p><h4 id="2-class"><a href="#2-class" class="headerlink" title="2.class"></a>2.class</h4><p>指定bean的全限定类名</p><h4 id="3-name"><a href="#3-name" class="headerlink" title="3.name"></a>3.name</h4><p>配置bean名称，可配置多个，中间以 <code>,</code>  隔开</p><p>在获取bean时可以使用name获取</p><p>不推荐使用</p><h4 id="4-scope"><a href="#4-scope" class="headerlink" title="4.scope"></a>4.scope</h4><p>配置作用范围</p><p><code>singleton</code>：单例对象，在项目启动时，加载进spring容器中。</p><p><code>prototype</code>：非单例对象，在对象创建时，创建一个新的对象，保存在spring容器中。</p><p><code>request</code>、<code>session</code>、<code>application</code>、 <code>websocket</code> ：设定创建出的对象放置在web容器对应的位置</p><h4 id="5-init-method、destroy-method"><a href="#5-init-method、destroy-method" class="headerlink" title="5.init-method、destroy-method"></a>5.init-method、destroy-method</h4><p>控制bean的生命周期，设置bean的创建销毁函数</p><p>对单例模式无效</p><p>init-method：在使用构造方法执行之后执行</p><p>destroy-method：在spring容器销毁时执行</p><p>使用多例模式时，创建的对象不由spring容器管理，而是交由JVM虚拟机进行销毁，所以使用多例模式时，init-method生效，destroy-method不生效</p><h4 id="6-factory-bean、factory-method"><a href="#6-factory-bean、factory-method" class="headerlink" title="6.factory-bean、factory-method"></a>6.factory-bean、factory-method</h4><p>工厂模式创建bean</p><p>1.静态工厂</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>staticfactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.factory.BeanFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserService</span> <span class="token function">getUserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态工厂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStaticFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserService</span> staticfactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"staticfactory"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staticfactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.实例工厂</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.factory.BeanFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UserService</span> <span class="token function">getUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例工厂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInstanceStaticFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserService</span> instanceFactoryBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"instanceFactoryBean"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instanceFactoryBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Bean创建"><a href="#2-Bean创建" class="headerlink" title="2.Bean创建"></a>2.Bean创建</h3><h4 id="1-配置文件-1"><a href="#1-配置文件-1" class="headerlink" title="1.配置文件"></a>1.配置文件</h4><p>使用bean标签</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>***<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name1,name2,...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*****<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作用范围<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-配置类-1"><a href="#2-配置类-1" class="headerlink" title="2.配置类"></a>2.配置类</h4><h5 id="1-使用-Bean注解"><a href="#1-使用-Bean注解" class="headerlink" title="1.使用@Bean注解"></a>1.使用<code>@Bean</code>注解</h5><p>默认方法名为id，也可以通过<code>@Bean</code>的属性value配置</p><p>通过<code>@Scope</code>注解设置作用域</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span> initMethod <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">,</span>destroyMethod <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DriverManagerDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-类上添加注解"><a href="#2-类上添加注解" class="headerlink" title="2.类上添加注解"></a>2.类上添加注解</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token operator">:</span> 通用注解，所有需要创建对象的类都可以使用此注解。<span class="token annotation punctuation">@Repository</span> <span class="token operator">:</span> <span class="token class-name">Dao</span>层使用此注解<span class="token annotation punctuation">@Service</span> <span class="token operator">:</span> <span class="token class-name">Service</span>层使用此注解<span class="token annotation punctuation">@Controller</span> <span class="token operator">:</span> <span class="token class-name">Controller</span>层使用此注解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>所有注解都有一个属性value:作为创建的对象的id，可以省略，省略时id值默认为类名首字母小写。</strong></p><p>通过<code>@Scope</code>注解设置作用域</p><h3 id="3-Bean赋值"><a href="#3-Bean赋值" class="headerlink" title="3.Bean赋值"></a>3.Bean赋值</h3><h4 id="1-赋值方式"><a href="#1-赋值方式" class="headerlink" title="1.赋值方式"></a>1.赋值方式</h4><h5 id="1-set注入"><a href="#1-set注入" class="headerlink" title="1.set注入"></a>1.set注入</h5><p>使用 set方法进行赋值、底层是通过反射实现的。在对应的javaBean中要实现属性的set方法。</p><h5 id="2-构造器注入"><a href="#2-构造器注入" class="headerlink" title="2.构造器注入"></a>2.构造器注入</h5><p>通过构造方法赋值,javabean中要有对应的构造方法</p><p><strong>引用类型(String除外)要将value换位ref</strong></p><p>如果赋值顺序与构造器中属性顺序不一致需要用type/index/name指令使其一一对应</p><p>index=” “ :指定位置</p><p>type=” “ 指定数据类型   构造方法中属性的属性类型不能重复</p><p>name=” “ 指定属性名    更直观，更推荐 </p><h5 id="3-命名空间引入"><a href="#3-命名空间引入" class="headerlink" title="3.命名空间引入"></a>3.命名空间引入</h5><p>需要引入命名空间p</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简单类型：p:属性名=”属性值”<br>引用类型（除了String外）：p:属性名-ref=”引用的id”</p><h5 id="4-自动装配"><a href="#4-自动装配" class="headerlink" title="4.自动装配"></a>4.自动装配</h5><p>只适用于 ref类型</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">...</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span>  <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName|byType|constructor|no<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>byName本质是byId,根据id值找到对应的bean<br>byName:  自动寻找：其他bean的id值=该Course类的属性名<br>byType:  其他bean的类型(class)  是否与 该Course类的ref属性类型一致  （注意，此种方式 必须满足：当前Ioc容器中 只能有一个Bean满足条件  ）<br>constructor： 其他bean的类型(class)  是否与 该Course类的构造方法参数 的类型一致；此种方式的本质就是byType</p><p>可以在头文件中 一次性将该ioc容器的所有bean  统一设置成自动装配：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name">...</span><span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自动装配虽然可以减少代码量，但是会降低程序的可读性，使用时需要谨慎。</p><h4 id="2-不同配置方式"><a href="#2-不同配置方式" class="headerlink" title="2.不同配置方式"></a>2.不同配置方式</h4><h5 id="1-配置文件-2"><a href="#1-配置文件-2" class="headerlink" title="1.配置文件"></a>1.配置文件</h5><h6 id="1-set注入-1"><a href="#1-set注入-1" class="headerlink" title="1.set注入"></a>1.set注入</h6><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>普通属性值<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>引用类型属性对应的bean的id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 或 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引用类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span><span class="token punctuation">></span></span>属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 有特殊符号时 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>><span class="token cdata">&lt;![CDATA[包含特殊符号的字符串]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 或 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>特殊字符使用转义字符<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 如把&lt;...> &amp;lt;...&amp;gt; --></span><span class="token comment">&lt;!-- 特殊数据类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- list集合 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 数组 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- set集合 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- map集合 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给属性赋空值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--给对象类型赋值null--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!--注意:没有&lt;value>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-构造器注入-1"><a href="#2-构造器注入-1" class="headerlink" title="2.构造器注入"></a>2.构造器注入</h6><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--顺序不一致时--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--顺序不一致时--></span><span class="token comment">&lt;!--使用index--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用type--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">vvalue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用name指定属性名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">vvalue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.命名空间引入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>属性名</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>属性名</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-配置类-2"><a href="#2-配置类-2" class="headerlink" title="2.配置类"></a>2.配置类</h5><h6 id="1-Bean"><a href="#1-Bean" class="headerlink" title="1.@Bean"></a>1.@Bean</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> 对象类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    对象类型 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 对象类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    对象名<span class="token punctuation">.</span>set<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    对象名<span class="token punctuation">.</span>set<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    对象名<span class="token punctuation">.</span>set<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> 对象名<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> 对象类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    对象类型 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 对象类型<span class="token punctuation">(</span>构造方法赋值<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-Value"><a href="#2-Value" class="headerlink" title="2.@Value"></a>2.@Value</h6><p>使用<code>@Value</code>赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="3-自动注入"><a href="#3-自动注入" class="headerlink" title="3.自动注入"></a>3.自动注入</h6><p>需要在配置文件/配置类中添加扫描器</p><p>Spring在启动的时候，会根据base-package在 该包中扫描所有类，查找这些类是否有注解</p><p><strong>1.@Autowired</strong></p><p>根据类型注入</p><p>会自动寻找对的类型的Bean对象，并将其自动注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>创建对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Compontent</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">StudentDao</span> studentDao<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以标注在方法与构造器上</p><p>标注在方法， Spring容器创建当前对象，就会调用方法，完成赋值；<br>方法使用的参数，自定义类型的值从◎c容器中获取</p><p><strong>2.@Qualifier</strong></p><p>根据id名注入</p><p>@Qualifier要与@Autowired配合使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"id名"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@@Repository(&quot;studentDao&quot;)public StudentDao studentDao&#123;    &#125;public class ***&#123;    @Autowired    @Qualifier(&quot;student&quot;)    StudentDao studentDao;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.@Resource</strong></p><p>默认根据组件名称（创建对象时的对象名）注入，添加name属性，根据id名注入</p><p>spring官方不推荐</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"studentDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">StudentDao</span> studentDao<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span>    <span class="token class-name">StudentDao</span> studentDao<span class="token punctuation">;</span><span class="token comment">//studentDao就是组件名称</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">StudentDao</span> studentDao<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.@Inject</strong></p><p>需要导入jar包：javax.inject.jar</p><p>用法与@Autowired相同，但缺少required属性</p><p><strong>5.@Primary</strong></p><p>作用：将指定的Bean作为首选Bean，当自动注入时有多个相同类型的Bean时，默认使用该Bean</p><h4 id="3-Nullable注解"><a href="#3-Nullable注解" class="headerlink" title="3.@Nullable注解"></a>3.@Nullable注解</h4><p>（1）@Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以 为空，参数值可以为空 </p><p>（2）注解用在方法上面，方法返回值可以为空 </p><p>（3）注解使用在方法参数里面，方法参数可以为空 </p><p>（4）注解使用在属性上面，属性值可以为空</p><h3 id="4-Bean获取"><a href="#4-Bean获取" class="headerlink" title="4.Bean获取"></a>4.Bean获取</h3><h4 id="1-配置文件-3"><a href="#1-配置文件-3" class="headerlink" title="1.配置文件"></a>1.配置文件</h4><h5 id="1-BeanFactory接口"><a href="#1-BeanFactory接口" class="headerlink" title="1.BeanFactory接口"></a>1.BeanFactory接口</h5><p>IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用 。</p><p>加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BeanFactory</span> context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式一：使用强制类型转换，获取Student类型数据</span><span class="token class-name">Student</span> zs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式二：使用getBean的重载方法，参数一为Bean的id,参数二为要准换成为的转换类型实体类</span><span class="token class-name">Student</span> ls <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-ApplicationContext接口"><a href="#2-ApplicationContext接口" class="headerlink" title="2.ApplicationContext接口"></a>2.ApplicationContext接口</h5><p>BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用 。</p><p>加载配置文件时候就会把在配置文件对象进行创建。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"springContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式一：使用强制类型转换，获取Student类型数据</span><span class="token class-name">Student</span> zs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式二：使用getBean的重载方法，参数一为Bean的id,参数二为要准换成为的转换类型实体类</span><span class="token class-name">Student</span> ls <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-自动注入-1"><a href="#3-自动注入-1" class="headerlink" title="3.自动注入"></a>3.自动注入</h5><p>将其作为属性使用自动注入赋值</p><h4 id="2-配置类-3"><a href="#2-配置类-3" class="headerlink" title="2.配置类"></a>2.配置类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>配置类类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-函数式风格"><a href="#3-函数式风格" class="headerlink" title="3.函数式风格"></a>3.函数式风格</h4><p>Spring5 核心容器支持函数式风格 GenericApplicationContext</p><p>函数式风格创建对象，交给 spring 进行管理</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1 创建 GenericApplicationContext 对象</span>    <span class="token class-name">GenericApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 调用 context 的方法对象注册</span>    context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"staff1"</span><span class="token punctuation">,</span><span class="token class-name">Staff</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Staff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3 获取在 spring 注册的对象</span>    <span class="token class-name">Staff</span> staff1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"staff1"</span><span class="token punctuation">,</span> <span class="token class-name">Staff</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Bean的生命周期"><a href="#5-Bean的生命周期" class="headerlink" title="5.Bean的生命周期"></a>5.Bean的生命周期</h3><p>bean 生命周期有七步 </p><p>（1）通过构造器创建 bean 实例（无参数构造） </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法） </p><p>（3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization </p><p>（4）调用 bean 的初始化的方法（需要进行配置初始化的方法factory-method） </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization </p><p>（6）bean 可以使用了（对象获取到了） </p><p>（7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法destroy-method）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> t<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要使用后置处理器，需要创建BeanPostProcessor接口的实现类，并实现其中的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置bean的初始化及销毁方法"><a href="#配置bean的初始化及销毁方法" class="headerlink" title="配置bean的初始化及销毁方法"></a>配置bean的初始化及销毁方法</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>在Bean配置initMethod及destroyMethod属性</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span>destroyMethod <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">StudentFactoryBean</span> <span class="token function">studentFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StudentFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>让需要配置初始化方法和销毁方法的类实现InitializingBean、DisposableBean接口，并实现afterPropertiesSet()方法和destroy()方法。</p><p>在afterPropertiesSet()中定义初始化方法</p><p>在destroy()中定义销毁方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>在需要配置为初始化方法和销毁方法的方法上分别添加注解@PostConstruct和@PreDestory使其成为初始化方法和销毁方法。</p><h5 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h5><p>创建BeanPostProcessor实现类，并重写方法。</p><p>将其添加为组件@Component</p><h3 id="6-Bean加载控制"><a href="#6-Bean加载控制" class="headerlink" title="6.Bean加载控制"></a>6.Bean加载控制</h3><h4 id="1-DependsOn"><a href="#1-DependsOn" class="headerlink" title="1.@DependsOn"></a>1.@DependsOn</h4><p>控制bean的加载顺序，使其在指定bean加载完毕后再加载</p><p>用在某个bean加载时需要依赖另一个bean时，此时需要使被依赖的bean先加载，以保证这个bean可以顺利加载。</p><ul><li>配置在方法上，使@DependsOn指定的bean优先于@Bean注解配置的bean进行加载</li><li>配置在类上，使@DependsOn指定的bean优先于当前类中所有@Bean配置的bean进行加载</li><li>配置在类上，使@DependsOn指定的bean优先于@Component等配置的bean进行加载</li></ul><h4 id="2-Order"><a href="#2-Order" class="headerlink" title="2.@Order"></a>2.@Order</h4><p>设置bean的加载优先级，数值越小越先加载</p><h4 id="3-Lazy"><a href="#3-Lazy" class="headerlink" title="3.@Lazy"></a>3.@Lazy</h4><p>控制bean的加载时机，使其延迟加载</p><h1 id="3-SpringAOP"><a href="#3-SpringAOP" class="headerlink" title="3.SpringAOP"></a>3.SpringAOP</h1><h2 id="1-Aop入门"><a href="#1-Aop入门" class="headerlink" title="1.Aop入门"></a>1.Aop入门</h2><h3 id="1-Aop简介"><a href="#1-Aop简介" class="headerlink" title="1.Aop简介"></a>1.Aop简介</h3><p><strong>Aop:面向切面编程</strong></p><p>​        利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><strong>功能：</strong>不通过修改源代码方式，在主干功能里面添加新功能</p><p>​        Spring AOP (Aspect Oriented Programming ）指面向切面编程，通过预编译方式或者运行时刻对目标对象动态地添加功能。AOP分离了企业应用 的业务逻辑和系统级服务 ，比如事务服务，还有应用系统的审计、安全访问等代码 比如要实 现用户访问控制，可以对每个 Controller 的方法使用一个自定义的注解 Function ，用 SpringAOP向Controller 每个方法动态地添加用户权限校验功能。</p><p>==<strong>Spring选择class文件加载进JVM后，运行字节码文件前执行。</strong>==</p><h3 id="2-Aop底层原理"><a href="#2-Aop底层原理" class="headerlink" title="2.Aop底层原理"></a>2.Aop底层原理</h3><p>1、 有接口情况，使用 JDK 动态代理</p><p> 创建接口实现类代理对象，增强类的方法 </p><p>2、没有接口情况，使用 CGLIB 动态代理</p><p>创建子类的代理对象，增强类的方法</p><p>具体原理参考代理模式的动态代理。</p><p><strong>jar包：aopaliance.jar  aspectjweaver.jar</strong></p><h3 id="3-名词解释"><a href="#3-名词解释" class="headerlink" title="3.名词解释"></a>3.名词解释</h3><ul><li>Joinpoint(连接点)：就是方法</li><li>Pointcut(切入点)：就是挖掉共性功能的方法</li><li>Advice(通知)：就是共性功能，最终以一个方法的形式呈现</li><li>Aspect(切面)：就是共性功能与挖的位置的对应关系</li><li>Target(目标对象)：就是挖掉功能的方法对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>Weaving(织入)：就是将挖掉的功能回填的动态过程</li><li>Proxy(代理)：目标对象无法直接完成工作，需要对其进行功能回填，通过创建原始对象的代理对象实现</li></ul><h3 id="4-切入点表达式"><a href="#4-切入点表达式" class="headerlink" title="4.切入点表达式"></a>4.切入点表达式</h3><p>格式：<code>关键字([访问修饰符] 返回值 包名.类名.方法名(参数) [异常名])</code></p><p>简写模式：可以省略访问修饰符、异常名。<code>关键字(返回值 包名.类名.方法名(参数))</code></p><p><strong>关键字</strong>：匹配模式</p><blockquote><ul><li><p><strong>execution ：匹配执行指定方法</strong></p></li><li><p>args ：匹配带有指定参数类型的方法</p></li><li><p>其他的还有within 、this 、target、@within 、@target、@args 、@annotation、bean、reference pointcut </p></li></ul></blockquote><p><strong>访问修饰符</strong>：java方法访问控制权限修饰符</p><p>类名：方法所在的类<strong>（此处可以配置接口名称）</strong></p><p>异常：方法定义中指定抛出的异常，<strong>可以省略不写</strong></p><p>表达式可以使用通配符与逻辑运算符</p><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>1.任意匹配                2.前缀、后缀</td></tr><tr><td>..</td><td>多个连续的任意符，常用于简化包名与参数</td></tr><tr><td>+</td><td>匹配子项</td></tr><tr><td><strong>逻辑运算符</strong></td><td><strong>作用</strong></td></tr><tr><td>&amp;&amp;</td><td>两个表达式需要都满足</td></tr><tr><td>||</td><td>两个表达式满足一个或两个都满足</td></tr><tr><td>！</td><td>不满足改表达式的</td></tr></tbody></table><h3 id="5-通知类型"><a href="#5-通知类型" class="headerlink" title="5.通知类型"></a>5.通知类型</h3><h4 id="1-前置通知"><a href="#1-前置通知" class="headerlink" title="1.前置通知"></a>1.前置通知</h4><p>在目标方法执行前执行</p><h4 id="2-后置通知"><a href="#2-后置通知" class="headerlink" title="2.后置通知"></a>2.后置通知</h4><p>在目标方法执行后执行，如果方法出现异常，则不执行</p><h4 id="3-异常通知"><a href="#3-异常通知" class="headerlink" title="3.异常通知"></a>3.异常通知</h4><p>在目标方法出现异常时执行</p><h4 id="4-最终通知"><a href="#4-最终通知" class="headerlink" title="4.最终通知"></a>4.最终通知</h4><p>在目标方法执行后执行，即使方法出现异常，仍然执行</p><h4 id="5-环绕通知"><a href="#5-环绕通知" class="headerlink" title="5.环绕通知"></a>5.环绕通知</h4><p>在方法执行的整个周期中都可以增强方法</p><h2 id="2-创建通知"><a href="#2-创建通知" class="headerlink" title="2.创建通知"></a>2.创建通知</h2><h3 id="1-通知类"><a href="#1-通知类" class="headerlink" title="1.通知类"></a>1.通知类</h3><p><strong>1.实现对应的接口，将普通类变为通知类</strong></p><p>前置通知：<code>MethodBeforeAdvice</code></p><p>后置通知：<code>AfterReturningAdvice</code></p><p>异常通知：<code>ThrowsAdvice</code></p><p>环绕通知：<code>MethodInterceptor</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeforeAdviceClass</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterAdviceClass</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">Object</span> o1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ThrowsAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AroundAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> methodInvocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> result<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用环绕通知实现的前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//之前的为前置通知</span>            result <span class="token operator">=</span> methodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//之后为后置通知</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用环绕通知实现的后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//方法体三，异常通知</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用环绕通知实现的异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.将通知类配置进spring容器中</strong></p><p><strong>3.在配置文件中配置通知</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类bean<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类bean<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置通知"><a href="#2-配置通知" class="headerlink" title="2.配置通知"></a>2.配置通知</h3><p>将一个普通类中的方法配置为通知</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>所在类bean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>全类名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>所在类bean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>所在类bean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知类型<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切入点表达式)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-注解通知"><a href="#3-注解通知" class="headerlink" title="3.注解通知"></a>3.注解通知</h3><p><strong>1.开启Aop注解驱动</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置文件开启注解驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.jxy"</span><span class="token punctuation">)</span><span class="token comment">//配置类开启注解驱动</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.为需要添加通知方法的类添加<code>@Component</code>、<code>@Aspect</code>注解</strong></p><p><strong>3.添加切面</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* *..*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4.添加通知方法</strong></p><p>使用注解将方法声明为通知方法</p><p> @Before：前置通知</p><p>@AfterReturning：后置通知</p><p> @AfterThrowing：异常通知</p><p>@Around：环绕通知</p><p>@After最终通知，最后执行，即使异常也会执行</p><p>注解中传入切入点或配置切入点表达式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//通过配置returning获取返回值</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"res"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------后置通知"</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//通过Throwable对象获取异常信息</span><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"point()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"t"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------异常通知"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解形式前置后置通知获取切面方法信息通过<code>ProceedingJoinPoint</code>对象获取，返回值通过Object对象获取</p><p>目标对象为：<code>jp.getTarget()</code></p><p>方法名为：<code>p.getSignature().getName()</code></p><p>参数列表为：<code>Arrays.toString(jp.getArgs())</code></p><p>注解形式环绕通知通过ProceedingJoinPoint类型参数调用.proceed()方法表示原方法执行时机</p><p>该方法之前为前置通知，之后为后置通知catch{}中为异常通知，finally{}中为最终通知。</p><p><strong>设置通知优先级</strong></p><p>如果多个方法对同一个方法增强，可以使用@Order()注解设置优先级。括号中添加int类型数字，数字越小，优先级越高。</p><h1 id="4-Spring事务"><a href="#4-Spring事务" class="headerlink" title="4.Spring事务"></a>4.Spring事务</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h3 id="1-事务理解"><a href="#1-事务理解" class="headerlink" title="1.事务理解"></a>1.事务理解</h3><p>为完成某种需求，而对数据库进行多次操作，多次操作合成为一次事务。</p><h3 id="2-事务作用"><a href="#2-事务作用" class="headerlink" title="2.事务作用"></a>2.事务作用</h3><p>1.是数据库在操作异常时回滚到操作之前的状态，避免两次关联数据库操作，一次操作成功，第二次操作失败，从而造成数据库修改不一致，保障数据库数据的一致性。</p><p>2.发访可时，使多个访问相互隔离，防止不同操作之间的相互干扰。</p><h3 id="3-事务特性（ACID）"><a href="#3-事务特性（ACID）" class="headerlink" title="3.事务特性（ACID）"></a>3.事务特性（ACID）</h3><p><strong>原子性</strong> ：将事务作为一个整体，要么执行成功，要么执行失败。</p><p><strong>一致性</strong> ：事务前后数据的完整性保持一致。</p><p><strong>隔离性</strong> ：并发访问数据库时，数据库为每一个访问开启的事务，不被其他事务所干扰，事务之间相互隔离。</p><p><strong>持久性</strong>：事务一旦提交，对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也会应该对其有影响。</p><h3 id="4-事务隔离级"><a href="#4-事务隔离级" class="headerlink" title="4.事务隔离级"></a>4.事务隔离级</h3><p><strong>脏读</strong>：允许读取未提交的数据。</p><p><strong>幻读</strong>：读取过程中，进行了增删操作，只是读取数据条目发生变化。</p><p><strong>不可重复读</strong>：读取过程中，单个数据发生了变化，导致两次读取的数据不一致。</p><p>为了有效保证并发读取数据的正确性，用四种事务隔离级别来解决脏读、不可重复读、幻读等问题：</p><ul><li>未提交读(Read Uncommitted)：允许脏读，可能读取到其他会话中未提交事务修改的数据（一般不用）</li><li>提交读(Read Committed)：只能读取到已经提交的数据，解决了脏读的问题</li><li>可重复读(Repeatable Read)：可重复读，MySQL InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻读</li><li>串行读(Serializable)：最严格的隔离级别。在Serializable隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。虽然Serializable隔离级别下的事务具有最高的安全性，但是由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别。</li></ul><h3 id="5-Spring事务"><a href="#5-Spring事务" class="headerlink" title="5.Spring事务"></a>5.Spring事务</h3><p>在 Spring 进行事务管理操作有两种方式：</p><p>编程式事务管理、声明式事务管理，声明式事务管理，底层使用 AOP 原理</p><p>Spring事务核心对象</p><p><strong>PlatformTransactionManager</strong>：平台事务管理器</p><blockquote><p><strong>DataSourceTransactionManager</strong>：适用于Spring JDBC和MyBatis</p><p><strong>HibernateTransactionManager</strong>：适用于Hibernate3.0及以上版本</p><p><strong>JpaTransactionManager</strong>：适用于JPA</p><p><strong>JdoTransactionManager</strong>：适用于JDO</p><p><strong>JtaTransactionManager</strong>：适用于JTA\</p><ul><li>JPA（Java Persistence API）Java EE 标准之一，为POJO提供持久化标准规范，并规范了持久化开发的统一API，符合JPA规范的开发可以在不同的JPA框架下运行</li><li>JDO(Java Data Object )是Java对象持久化规范，用于存取某种数据库中的对象，并提供标准化API。与JDBC相比，JDBC仅针对关系数据库进行操作，JDO可以扩展到关系数据库、文件、XML、对象数据库（ODBMS）等，可移植性更强</li><li>JTA（Java Transaction API）Java EE 标准之一，允许应用程序执行分布式事务处理。与JDBC相比，JDBC事务则被限定在一个单一的数据库连接，而一个JTA事务可以有多个参与者，比如JDBC连接、JDO 都可以参与到一个JTA事务中</li></ul></blockquote><p><strong>TransactionDefinition</strong>：事务定义对象</p><p>此接口定义了事务的基本信息</p><ul><li><p>获取事务定义名称</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取事务的读写属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取事务隔离级别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获事务超时时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取事务传播行为特征</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>TransactionStatus</strong>：事务状态</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img1/image-20210421112451121.png" alt="image-20210421112451121"></p><h2 id="2-编程式事务"><a href="#2-编程式事务" class="headerlink" title="2.编程式事务"></a>2.编程式事务</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建事务管理器，需要设置数据源</span><span class="token class-name">DataSourceTransactionManager</span> tm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事务定义</span><span class="token class-name">DefaultTransactionDefinition</span> dtd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建事务状态对象，用于控制事务执行，开启事务</span><span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>dtd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//事务操作</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//提交事务</span>tm<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Aop优化"><a href="#Aop优化" class="headerlink" title="Aop优化"></a>Aop优化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* *..*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">transactionAdvice</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultTransactionDefinition</span> dtd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>            dtd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>dtd<span class="token punctuation">)</span><span class="token punctuation">;</span>            proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-声明式事务（XML）"><a href="#3-声明式事务（XML）" class="headerlink" title="3.声明式事务（XML）"></a>3.声明式事务（XML）</h2><p>1.配置事务管理器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.配置通知</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置通知/配置事务增强（如何切入）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--所有事务都是读写事务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--所有以get开头的事务都是只读事务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>tx:method中属性</p><p>1.name：配置方法名</p><p>2.read-only：配置事务类型（false读写，true只读）</p><p>3.timeout：超时时长</p><p>4.isolation：隔离级别（DEFAULT：数据库默认，READ_COMMITTED：不允许脏读，READ_UNCOMMITTED：允许脏读，REPEATABLE_READ解决不可重复读：，SERIALIZABLE：解决幻读虚读）</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED（读未提交）</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED（读已提交）</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ（可重复读）</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE（串行化）</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>5.rollback-for：出现什么异常回滚（需要配置异常全类名，多个异常中间使用 ‘ , ‘ 隔开）</p><p>6.no-rollback-for：出现什么异常不回滚</p><p>7.propagation：设置事务传播行为</p><p>事务的传播行为</p><p>如果一个方法调用了其他方法，那么当前方法中的事务为事务管理员，被调用的方法中的事务为事务协调员</p><p>事务的传播行为就是事务协调员对事务管理员所携带的事务的处理方式</p><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</td></tr><tr><td>REQUIRED_NEW</td><td>当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起</td></tr><tr><td>SUPPORTS</td><td>如果有事务在运行，当前的方法就在这个事务内运行否则它可以不运行在事务中</td></tr><tr><td>NOT SUPPORTE</td><td>当前的方法不应该运行在事务中，如果有运行的事务，将它挂起</td></tr><tr><td>MANDATORY</td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</td></tr><tr><td>NEVER</td><td>当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常</td></tr><tr><td>NESTED</td><td>如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行。否则，就启动一个新的事务，并在它自己的事务内运行</td></tr></tbody></table></blockquote><p>3.配置切入点和切面</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--将所有service包下的方法都添加进来--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.jxy.service..*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPoint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.完整文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置事务管理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置通知/配置事务增强（如何切入）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--所有事务都是读写事务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--所有以get开头的事务都是只读事务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置切入点和切面--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--将所有service包下的方法都添加进来--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.jxy.service..*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPoint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-声明式事务（注解）"><a href="#4-声明式事务（注解）" class="headerlink" title="4.声明式事务（注解）"></a>4.声明式事务（注解）</h2><h3 id="1-开启事务"><a href="#1-开启事务" class="headerlink" title="1.开启事务"></a>1.开启事务</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置事务--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    transactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-开启事务注解"><a href="#2-开启事务注解" class="headerlink" title="2.开启事务注解"></a>2.开启事务注解</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用-Transactional"><a href="#3-使用-Transactional" class="headerlink" title="3.使用@Transactional"></a>3.使用@Transactional</h3><p>@Transactional可添加在类或方法上，添加到类上代表ben类中所有的方法都进行事务处理，添加在方法上代表之开启当前方法的事务。</p><p>一般会加在接口上，防止实现类重写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>        readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>        rollbackFor <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        noRollbackFor <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-Spring-整合"><a href="#5-Spring-整合" class="headerlink" title="5.Spring 整合"></a>5.Spring 整合</h1><h2 id="1-Spring-Druid"><a href="#1-Spring-Druid" class="headerlink" title="1.Spring - Druid"></a>1.Spring - Druid</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置数据源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:/jdbc.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ignoreResourceNotFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Spring-MyBatis"><a href="#2-Spring-MyBatis" class="headerlink" title="2.Spring - MyBatis"></a>2.Spring - MyBatis</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/tx                           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--加载数据库配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 整合MyBatis --></span>    <span class="token comment">&lt;!--配置MyBatis整合--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定mybatis全局配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 配置别名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定mapper配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/spring/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--将mybatis接口加入到ioc容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--==================================事务配置======================================--></span>    <span class="token comment">&lt;!--配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置通知/配置事务增强（如何切入）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--*：所有方法都是事务方法--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--所有以get开头的方法都是事务方法--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.spring.dao"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MyBatisConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;driver&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;url&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;user&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;password&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">UserService</span> <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactory<span class="token punctuation">.</span><span class="token function">setTypeAliasesPackage</span><span class="token punctuation">(</span><span class="token string">"com.spring.domain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MapperScannerConfigurer</span> <span class="token function">mapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MapperScannerConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configurer<span class="token punctuation">.</span><span class="token function">setBasePackage</span><span class="token punctuation">(</span><span class="token string">"com.spring.dao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用配置类整合MyBatis时，由于MyBatis需要的Bean创建时依赖数据源，所以需要数据源对象先创建。</p><p>解决方法</p><p>可以将MyBatis配置文件单独整合在一个配置类中，使用@Import引入。</p><p><strong>无法使用</strong>@Depends注解解决，因为其执行顺序由spring决定。</p><h2 id="3-Spring-SpringData-Jpa"><a href="#3-Spring-SpringData-Jpa" class="headerlink" title="3.Spring - SpringData Jpa"></a>3.Spring - SpringData Jpa</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>jpa</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/data/jpa<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/data/jpa                           https://www.springframework.org/schema/data/jpa/spring-jpa.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加载数据库配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 整合SpringData Jpa --></span>    <span class="token comment">&lt;!--配置entityManagerFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityManagerFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--配置数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定实体类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>packagesToScan<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--配置服务的提供商--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>persistenceProvider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jpaVendorAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--配置数据库名称--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>database<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MYSQL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--配置是否自动创建数据库表--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generateDdl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--配置显示sql--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showSql<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.JpaTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jpa:</span>repositories</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.dao<span class="token punctuation">"</span></span>                      <span class="token attr-name">entity-manager-factory-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityManagerFactory<span class="token punctuation">"</span></span>                      <span class="token attr-name">transaction-manager-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:/jdbc.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ignoreResourceNotFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.spring.dao"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">BeanConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.spring.dao"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"entityManagerFactory"</span><span class="token punctuation">,</span> transactionManagerRef <span class="token operator">=</span> <span class="token string">"transactionManager"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;driver&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;url&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;user&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;password&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DriverManagerDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DriverManagerDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">LocalContainerEntityManagerFactoryBean</span> <span class="token function">entityManagerFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LocalContainerEntityManagerFactoryBean</span> entityManagerFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalContainerEntityManagerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entityManagerFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        entityManagerFactoryBean<span class="token punctuation">.</span><span class="token function">setPackagesToScan</span><span class="token punctuation">(</span><span class="token string">"com.spring.domain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entityManagerFactoryBean<span class="token punctuation">.</span><span class="token function">setPersistenceProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HibernatePersistenceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HibernateJpaVendorAdapter</span> hibernateJpaVendorAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HibernateJpaVendorAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hibernateJpaVendorAdapter<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token class-name">Database</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        hibernateJpaVendorAdapter<span class="token punctuation">.</span><span class="token function">setGenerateDdl</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hibernateJpaVendorAdapter<span class="token punctuation">.</span><span class="token function">setShowSql</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entityManagerFactoryBean<span class="token punctuation">.</span><span class="token function">setJpaVendorAdapter</span><span class="token punctuation">(</span>hibernateJpaVendorAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> entityManagerFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">JpaTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JpaTransactionManager</span> jpaTransactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpaTransactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jpaTransactionManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Spring-Log4j2"><a href="#4-Spring-Log4j2" class="headerlink" title="4.Spring - Log4j2"></a>4.Spring - Log4j2</h2><p>Spring5 已经移除 Log4jConfigListener，官方建议使用 Log4j2 </p><ol><li><p>spring5默认使用Log4j2,所以不需要在spring配置文件中进行配置。只需导入相关依赖，添加log4j2.xml(名字固定)配置文件即可</p></li><li><p>pom.xml</p><p>实际上需要导入log4j-api.jar、log4j-core.jar、log4j-slf4j-impl.jar、slf4j-api.jar</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-slf4j-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>log4j2.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE >ALL --></span><span class="token comment">&lt;!--Configuration 后面的 status 用于设置 log4j2 自身内部的信息输出，可以不设置，当设置成 trace 时，可以看到 log4j2 内部各种详细输出--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--先定义所有的 appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--输出日志信息到控制台--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--控制日志输出的格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--然后定义 logger，只有定义 logger 并引入的 appender，appender 才会生效--></span>    <span class="token comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定 Logger，则会使用 root 作为默认的日志输出--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="5-Spring-Junit"><a href="#5-Spring-Junit" class="headerlink" title="5.Spring - Junit"></a>5.Spring - Junit</h2><h3 id="1-Junit4"><a href="#1-Junit4" class="headerlink" title="1.Junit4"></a>1.Junit4</h3><p>1.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用</p><p>@RunWith(SpringJUnit4ClassRunner.class) : 设置spring专用的类加载器</p><p>@ContextConfiguration : 设置配置类</p><p>@ContextConfiguration(locations = {“classpath*:applicationContext.xml”}) : 设置配置文件</p><p>@Before : 测试前置执行</p><p>@After : 测试后置执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Junit5"><a href="#2-Junit5" class="headerlink" title="2.Junit5"></a>2.Junit5</h3><p>1.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//指定使用JUnit5</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//指定配置文件</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//可以使用@Autowired，普通的JUnit不能使用</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StaffService</span> staffService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Staff</span><span class="token punctuation">></span></span> query <span class="token operator">=</span> staffService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//或使用复合注解@SpringJUnitConfig</span><span class="token annotation punctuation">@SpringJUnitConfig</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StaffService</span> staffService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Staff</span><span class="token punctuation">></span></span> query <span class="token operator">=</span> staffService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Spring-Web"><a href="#6-Spring-Web" class="headerlink" title="6.Spring - Web"></a>6.Spring - Web</h2><p>1.jar包spring-web.jar</p><p>2.web项目实现IOC容器初始化，须在web.xml文件中配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--当applicationContext.xml保存在web-inf目录中,且文件名必须为applicationContext.xml时为约定形式，不用写context-param--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--监听器父类中的contextConfigLocatio属性，该属性值保存着容器配置文件applicationContext.xml的位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>        classpath:applicationContext.xml,        classpath:applicationContext-*.xml    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用Spring web提供的监听器，在服s务器开启时，初始化IOC容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>        org.springframework.web.context.ContextLoaderListener    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-PageHelper使用踩坑记录</title>
      <link href="2021/04/19/MyBatis-PageHelper%E4%BD%BF%E7%94%A8%E8%B8%A9%E5%9D%91/"/>
      <url>2021/04/19/MyBatis-PageHelper%E4%BD%BF%E7%94%A8%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-PageHelper出现SQLException"><a href="#1-PageHelper出现SQLException" class="headerlink" title="1.PageHelper出现SQLException"></a>1.PageHelper出现SQLException</h2><p>获取原本的SQL语句，在其后边拼接上<code>limit</code>语句，然后执行。如果后边添加分号，会直接在分好后拼接linmit，造成SQLException</p><h2 id="2-一次发起多次查询请求，分页不起作用"><a href="#2-一次发起多次查询请求，分页不起作用" class="headerlink" title="2.一次发起多次查询请求，分页不起作用"></a>2.一次发起多次查询请求，分页不起作用</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>​        PageHelper插件在定义<code>PageHelper.startPage()</code>之后，只会对第一次发起的查询请求进行分页操作。之后<code>PageHelper.startPage()</code>已经失效，所以之后的查询会原样输出。</p><p>​        所以并不是分页未起作用，只是在第一次请求之后，PageHelper已经完成并停止。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//开启分页</span><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一次查询请求，PageHelper生效，将查询到的结果进行分页操作，将结果添加进集合 u </span>u<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">searchUserByKeyWord</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一次查询结束，PageHelper失效</span><span class="token comment">//之后的查询操作，PageHelper并未生效，查询到的结果未经分页操作直接放入集合中</span>u<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">searchUserByKeyWord1</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">searchUserByKeyWord2</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token class-name">AllRes</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时PageInfo并未生效，只是将集合AllRes转换为PageInfo对象。</span><span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> pageInfo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span><span class="token class-name">AllRes</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以查询结果并不是预期的将所有的查询结果放入到一个集合中，在对合并的集合进行分页操作。</p><p>真正的结果是，对第一次查询进行了分页操作，将分页后的结果放入总集合中。之后执行其余的查询操作，并将讲过放入总集合中。最后虽然得到了PageInfo对象，但并不是分页结果，而是将总集合转换为了PageInfo对象。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 经验 </tag>
            
            <tag> MyBatis </tag>
            
            <tag> PageHelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>org.springframework.beans.factory.BeanDefinitionStoreException</title>
      <link href="2021/04/19/org-springframework-beans-factory-BeanDefinitionStoreException/"/>
      <url>2021/04/19/org-springframework-beans-factory-BeanDefinitionStoreException/</url>
      
        <content type="html"><![CDATA[<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><pre class="line-numbers language-none"><code class="language-none">03-Jul-2020 19:19:52.558 警告 [RMI TCP Connection(3)-127.0.0.1] org.springframework.context.support.AbstractApplicationContext.refresh Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;org.springframework.cache.interceptor.CacheInterceptor#0&#39;: Cannot resolve reference to bean &#39;cacheManager&#39; while setting bean property &#39;cacheManager&#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &#39;cacheManager&#39; available03-Jul-2020 19:19:52.562 严重 [RMI TCP Connection(3)-127.0.0.1] org.springframework.web.context.ContextLoader.initWebApplicationContext Context initialization failedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;org.springframework.cache.interceptor.CacheInterceptor#0&#39;: Cannot resolve reference to bean &#39;cacheManager&#39; while setting bean property &#39;cacheManager&#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &#39;cacheManager&#39; available...03-Jul-2020 19:19:52.576 严重 [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start. Full details will be found in the appropriate container log file03-Jul-2020 19:19:52.577 严重 [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal Context [&#x2F;SpringMVC] startup failed due to previous errors[2020-07-03 07:19:52,590] Artifact SpringMVC:war exploded: Error during artifact deployment. See server log for details.03-Jul-2020 19:20:00.379 信息 [Catalina-utility-2] org.apache.catalina.startup.HostConfig.deployDirectory 把web 应用程序部署到目录 [D:\apache-tomcat-9.0.31\webapps\manager]03-Jul-2020 19:20:00.433 信息 [Catalina-utility-2] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [D:\apache-tomcat-9.0.31\webapps\manager] has finished in [54] ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>错误提示</strong><br>Error creating bean with name ‘org.springframework.cache.interceptor.CacheInterceptor#0’: Cannot resolve reference to bean ‘cacheManager’ while setting bean property ‘cacheManager’; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named ‘cacheManager’ available</p><p>在设置bean属性“cacheManager”时无法解决对bean“cacheManager”的引用。<br>经过百度得知cacheManager适用于缓存的，但此时并未配置缓存相关的信息。<br>但是在检查xml配置文件时，发现beans标签中有一条 xmlns:mvc=”<a href="http://www.springframework.org/schema/cache&quot;">http://www.springframework.org/schema/cache&quot;</a><br>对应的schemaLocation也有<br><a href="http://www.springframework.org/schema/cache">http://www.springframework.org/schema/cache</a> <a href="http://www.springframework.org/schema/cache/spring-cache.xsd&quot;">http://www.springframework.org/schema/cache/spring-cache.xsd&quot;</a><br>可以发现本应是配置mvc标签的位置变为了配置cache标签，导致&lt;<a href="mvc:annotation-driven/">mvc:annotation-driven/</a>&gt;虽然没报错，但在运行时，无法找到对应的资源。<br>经过重试几次后发现IDEA在配置mvc标签时，自动生成的xmlns及schemaLocation会生成为cache的，这时只需将其改为mvc或添加mvc的即可。</p><p>错误标签</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/cache<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改正标签如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 异常 </tag>
            
            <tag> 经验 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA运行web工程，控制台输出乱码</title>
      <link href="2021/04/19/IDEA%E8%BF%90%E8%A1%8Cweb%E5%B7%A5%E7%A8%8B%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81/"/>
      <url>2021/04/19/IDEA%E8%BF%90%E8%A1%8Cweb%E5%B7%A5%E7%A8%8B%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>问题情况如下</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>只解决url传值时的乱码问题<br><img src="https://img-blog.csdnimg.cn/20200704095952951.png" alt="在这里插入图片描述"><br><strong>解决方案</strong><br>在IDEA中配置tomcat位置设置一下编码格式<br>Run→Edit Configurations..→VM options<br><img src="https://img-blog.csdnimg.cn/20200704100257717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200704100356538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文本如下</p><pre class="line-numbers language-none"><code class="language-none">-Dfile.encoding&#x3D;utf-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>再次运行，显示正常</strong><br><img src="https://img-blog.csdnimg.cn/20200704100605750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>解决springmvc乱码问题<br>在web.xml文件中配置一个编码过滤器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置编码拦截器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token comment">&lt;!---配置需要的编码格式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> java </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中maven模块的jdk版本总是自动更换</title>
      <link href="2020/12/02/IDEA%E4%B8%ADmaven%E6%A8%A1%E5%9D%97%E7%9A%84jdk%E7%89%88%E6%9C%AC%E6%80%BB%E6%98%AF%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2/"/>
      <url>2020/12/02/IDEA%E4%B8%ADmaven%E6%A8%A1%E5%9D%97%E7%9A%84jdk%E7%89%88%E6%9C%AC%E6%80%BB%E6%98%AF%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>IDEA中maven模块的jdk版本总是自动更换，导致程序因jdk版本不一致或版本过低导致编译异常</p><p>解决方法：在pom.xml文件中设置jdk版本<br>参考自<a href="https://blog.csdn.net/wltsysterm/article/details/79170692?ops_request_misc=&request_id=&biz_id=102&utm_term=IDEA%E6%A8%A1%E5%9D%97jdk%E8%87%AA%E5%B7%B1%E6%8D%A2%E6%88%901.5&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-79170692">独行侠_阿涛 的博客</a></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showDeprecation</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showDeprecation</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> java </tag>
            
            <tag> Maven </tag>
            
            <tag> 异常 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java因环境版本不一致导致的编译错误</title>
      <link href="2020/10/20/java%E5%9B%A0%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%E7%9A%84%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/"/>
      <url>2020/10/20/java%E5%9B%A0%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%E7%9A%84%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>使用IDEA运行项目出现编译错误<br>Error:Compilation failed: internal java compiler error<img src="https://img-blog.csdnimg.cn/20200629174744697.png" alt="在这里插入图片描述"></p><h1 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h1><p>项目中JDK版本不一致<br>在IDEA中需要设置三个地方的JDK版本</p><p>1.设置中的java Compiler，需要设置模块的JDK版本<br>路径：setting→Build,Ex…..→Compiler→java Compiler<br><img src="https://img-blog.csdnimg.cn/20200629175632358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.Project Structure中设置Moudle的JDK版本<br><img src="https://img-blog.csdnimg.cn/20200629180003977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.Project Structure中设置Project的JDK版本<br><img src="https://img-blog.csdnimg.cn/20200629175956586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入Project Structure的方式有两种<br><img src="https://img-blog.csdnimg.cn/20200629180420369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在我实际使用中，起码要1、2中的版本保持一致，程序才能正常运行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> java </tag>
            
            <tag> 异常 </tag>
            
            <tag> 经验 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList初始化长度分析</title>
      <link href="2020/10/19/ArrayList%E5%88%9D%E5%A7%8B%E5%8C%96%E9%95%BF%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>2020/10/19/ArrayList%E5%88%9D%E5%A7%8B%E5%8C%96%E9%95%BF%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><strong>ArrayList构造器底层分析，ArrayList初始化长度流程分析</strong></p><p>首先ArrayList集合底层是通过Object数组实现的。</p><h2 id="1-空参构造器创建集合"><a href="#1-空参构造器创建集合" class="headerlink" title="1.空参构造器创建集合"></a>1.空参构造器创建集合</h2><p>当使用空参构造器实例化ArrayList时，底层首先会创建一个名为ElementData的Object类型数组，并使elementData等于集合中定义的为空的静态常量数组DEFAULTCAPACITY_EMPTY_ELEMENTDATA 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时的elementData数组是一个空数组，没有定义数组长度<br>当集合首次添加数据，调用add()方法时,elementData数组会成为长度为10的数组。</p><p>分析如下：</p><p><strong>使用add()方法向集合中添加数据时，定义数组长度的流程</strong></p><p>1.首先创建出来的数组为空，所以size=0;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.上面add方法调用ensureCapacityInternal()方法时size=0,这里传入的参数minCapacity=0+1=1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.刚创建出来的数组elementData为空，elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，<br>则进入if语句中<br>参数minCapacity=1，静态常量DEFAULT_CAPACITY=10，去两个数中较大的数，则返回值为DEFAULT_CAPACITY=10</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果此时数组为刚创建时的为空状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//private static final int DEFAULT_CAPACITY = 10;</span>        <span class="token comment">//比较两者大小，返回较大的</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果不为空，说明数组已经定义过长度，返回此时长度</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.这里就相当于ensureExplicitCapacity(10);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.传入参数minCapacity=10，elementData.length=0<br>进入if语句，执行方法grow(10)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//grow(10);</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.＞＞运算符</p><p>按二进制形bai式把所有的数字向du右移动对应位数，低位移出（舍弃），高位的空位补符zhi号位，即正数补零，负数补1。符号位不变。</p><ol><li>传入参数minCapacity=10</li><li>oldCapacity = elementData.lengt=0</li><li>通过newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)，将数组长度调整为原来的1.5倍。但此时数组长度为0，所以经过扩容，数组长度仍为0</li><li>newCapacity - minCapacity=0-10=-10&lt;0，进入当前if语句<br>newCapacity = minCapacity=10<br>newCapacity - MAX_ARRAY_SIZE &lt; 0<br>跳过该条if语句<br>Arrays.copyOf(elementData, newCapacity)，传回一个长度为10的新数组，赋值给elementData，此时elementData 就是一个长度为10的Object类型数组。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此时数组长度为0，oldCapacity=0</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//将数组长度扩大到原来的1.5倍，还是0</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//newCapacity - minCapacity=0-10=-10&lt;0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">//newCapacity=10</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//此时elementData的长度就为10</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>所以，当集合使用空参构造器时，底层是一个空数组。当第一次调用add()方法添加数据后，底层数组就会变为长度为10的数组。</strong></p><h2 id="2-有参构造器创建集合"><a href="#2-有参构造器创建集合" class="headerlink" title="2.有参构造器创建集合"></a>2.有参构造器创建集合</h2><p>当使用有参构造器实例化ArrayList</p><p>传入参数initialCapacity大于0时，创建一个长度为initialCapacity的数组，赋值给elementData。</p><p>传入参数等于0时elementData = EMPTY_ELEMENTDATA，而EMPTY_ELEMENTDATA为Object类型的空数组。</p><p>如果其他条件(initialCapacity&lt;0),则抛出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//当传入参数大于0时，创建长度为传入参数大小的数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果传入参数为0，创建数组elementData等于定义的静态常量EMPTY_ELEMENTDATA</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果传入参数不符合规定，抛出异常IllegalArgumentException</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传时获取其他参数</title>
      <link href="2020/10/19/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%97%B6%E8%8E%B7%E5%8F%96%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0/"/>
      <url>2020/10/19/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%97%B6%E8%8E%B7%E5%8F%96%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>文件上传时，无法获取表单中的其他数据</strong></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在使用文件上传时，form表单中需要添加属性enctype=”multipart/form-data”</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时表单提交时会指定数据传输为二进制类型，所以服务端无法直接获取到前端传来的数据。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>通过文件上传时，使用的jar包中的方法获取前端传过来的值</p><p>例如<br>使用jsmartcom_zh_CN.ar时，可以使用SmartUpload对象调用getRequest()方法获取request对象，再调用getParameter()方法获取值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name<span class="token operator">=</span>smartUpload<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 经验 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnsatisfiedDependencyException and Failed to configure a DataSource</title>
      <link href="2020/10/15/UnsatisfiedDependencyException/"/>
      <url>2020/10/15/UnsatisfiedDependencyException/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>未使用数据库操作时，尝试项目启动，检测环境配置时，却报了一个错误<br>错误描述：未指定“url”属性，无法配置嵌入的数据源。</p><h2 id="详细提示信息"><a href="#详细提示信息" class="headerlink" title="详细提示信息"></a>详细提示信息</h2><pre class="line-numbers language-none"><code class="language-none">Description:Failed to configure a DataSource: &#39;url&#39; attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver classAction:Consider the following:If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200605221744680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>经检测发现，虽然没有使用数据库操作，但却导入了jdbc的依赖以及Druid的依赖<br><img src="https://img-blog.csdnimg.cn/20200605222151627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="另一个注意"><a href="#另一个注意" class="headerlink" title="另一个注意"></a>另一个注意</h2><p>经过实验，导致该问题的原因时spring-boot-starter-jdbc这个启动器。<br>但Druid启动器也需要删除，否则回报名为UnsatisfiedDependencyException的异常。</p><pre class="line-numbers language-none"><code class="language-none">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;dataSource&#39;: Unsatisfied dependency expressed through field &#39;basicProperties&#39;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties&#39;: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org&#x2F;springframework&#x2F;jdbc&#x2F;datasource&#x2F;embedded&#x2F;EmbeddedDatabaseType<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200605222418895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lYSkpK,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>在未使用到之前尽量不导入不需要的启动器。</strong><br>避免出错的同时，也能避免pom.xml文件的臃肿。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 异常 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA文件上传路径</title>
      <link href="2020/10/05/IDEA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%B7%AF%E5%BE%84/"/>
      <url>2020/10/05/IDEA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用IDEA学习文件上传操作时，根据提示，文件上传成功，但在指定的资源文件夹下无法找到上传的资源。</p><a id="more"></a><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ol><li>在文件上传时，找一个文件命名重复率较少的文件，进行上传，根据提示，文件上传成功。</li><li>使用Everything查找该文件，发现一个位置可疑的文件，该文件在项目的out文件夹下的子目录中<img src="https://img-blog.csdnimg.cn/20200605220007762.png" alt="在这里插入图片描述"></li><li>百度查找问题，IDEA文件上传默认目录<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3>经百度，得知，上传的时，IDEA默认会在该项目的out文件夹下的子文件夹中创建你指定的文件夹，并将上传的文件保存到该文件夹中。<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3>在IDEA的Project Structure中的Artifacts目录中修改Output directory,将其修改为项目的web文件夹的路径。<br><img src="https://img-blog.csdnimg.cn/20200605220657667.png" alt="在这里插入图片描述"><br>修改完成之后，经测试，上传文件正常。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 经验 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scanner对象失效</title>
      <link href="2020/10/02/Scanner%E5%AF%B9%E8%B1%A1%E5%A4%B1%E6%95%88/"/>
      <url>2020/10/02/Scanner%E5%AF%B9%E8%B1%A1%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>当使用Scanner对象调用nextInt()方法时，如果输入一个字符串数据时，JVM会认为扫描器出现错误，Scanner对象就会失效，此时，需要重新创建Scanner对象或为Scnner对象重新赋值。</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重新为Scanner</span>        sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InputMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 异常 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="2020/09/18/Swagger/"/>
      <url>2020/09/18/Swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p><a href="https://swagger.io/tools/swagger-ui/">官网</a></p><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p><a id="more"></a><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h1><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description: * @author:靳新宇 * @date : 07-28 18:04 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取环境</span>        <span class="token comment">//        Profiles profiles=Profiles.of("dev","test");</span>        <span class="token comment">//        boolean enviro = environment.acceptsProfiles(profiles);</span>        <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">//是否使用swagger,默认为ture,false关闭使用，可以通过判断环境，授权是否能使用</span>            <span class="token comment">//                .enable(enviro)</span>            <span class="token comment">//设置组名，可以添加多个Docket,在页面中进行切换</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">/*                RequestHandlerSelectors:配置要扫描路径                basePackage():要扫描的包                any():扫描全部                none():不扫描                withClassAnnotation():扫描类上有某注解的                withMethodAnnotation():扫描方法上有某注解的                 */</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.jxy.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">/*                过滤路径                ant():                 */</span>            <span class="token comment">//.paths(PathSelectors.ant("/com/**"))</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"apiInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Contact</span> contact<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"jin"</span><span class="token punctuation">,</span><span class="token string">"https://i.csdn.net/#/uc/profile"</span><span class="token punctuation">,</span><span class="token string">"1551903505@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"swagger标题"</span><span class="token punctuation">,</span>                           <span class="token string">"描述"</span><span class="token punctuation">,</span>                           <span class="token string">"v 1.0"</span><span class="token punctuation">,</span>                           <span class="token string">"https://i.csdn.net/#/uc/profile"</span><span class="token punctuation">,</span>                           contact<span class="token punctuation">,</span>                           <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                           <span class="token string">""</span><span class="token punctuation">,</span>                           <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-ApiInfo-信息"><a href="#1-ApiInfo-信息" class="headerlink" title="1.ApiInfo:信息"></a>1.ApiInfo:信息</h3><p><strong>ui页面信息设置</strong></p><p>new ApiInfo(标题,描述,版本号,连接网址,个人信息，开源版本， ， );</p><h3 id="2-groupName-组名"><a href="#2-groupName-组名" class="headerlink" title="2.groupName:组名"></a>2.groupName:组名</h3><p>可以配置多个Docket，配置不同信息，在ui界面通过组名进行切换</p><h3 id="3-select-扫描路径"><a href="#3-select-扫描路径" class="headerlink" title="3.select:扫描路径"></a>3.select:扫描路径</h3><h4 id="1-apis-扫描路径"><a href="#1-apis-扫描路径" class="headerlink" title="1.apis:扫描路径"></a>1.apis:扫描路径</h4><p>RequestHandlerSelectors:配置要扫描路径</p><p>basePackage():要扫描的包</p><p>any():扫描全部</p><p>none():不扫描</p><p>withClassAnnotation():扫描类上有某注解的</p><p>withMethodAnnotation():扫描方法上有某注解的</p><h4 id="2-paths过滤路径"><a href="#2-paths过滤路径" class="headerlink" title="2.paths过滤路径"></a>2.paths过滤路径</h4><p>any():扫描全部</p><p>none():不扫描</p><p>ant:路径</p><h2 id="3-注解"><a href="#3-注解" class="headerlink" title="3.注解"></a>3.注解</h2><h3 id="1-ApiOperation"><a href="#1-ApiOperation" class="headerlink" title="1.@ApiOperation"></a>1.@ApiOperation</h3><p>配置在方法上，对方法进行注解</p><h3 id="2-ApiParam"><a href="#2-ApiParam" class="headerlink" title="2.@ApiParam"></a>2.@ApiParam</h3><p>配置在参数前，对参数进行注解</p><h3 id="3-ApiModel"><a href="#3-ApiModel" class="headerlink" title="3.@ApiModel"></a>3.@ApiModel</h3><p>配置在实体类上，对实体类进行注解</p><p>需要在路径方法中使用，才能看到</p><h3 id="4-ApiModelProperty"><a href="#4-ApiModelProperty" class="headerlink" title="4.@ApiModelProperty"></a>4.@ApiModelProperty</h3><p>配置在实体类属性上，对属性进行注解</p><p>需要在路径方法中使用，才能看到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"学生实体类"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"获取学生"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"getStudent"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"学生参数"</span><span class="token punctuation">)</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-UI界面"><a href="#3-UI界面" class="headerlink" title="3.UI界面"></a>3.UI界面</h1><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/swagger-UI%E7%95%8C%E9%9D%A2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/%E5%AE%9E%E4%BD%93%E7%B1%BB%E4%BF%A1%E6%81%AF.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/%E7%82%B9%E5%87%BB%E6%B5%8B%E8%AF%95.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/%E6%B5%8B%E8%AF%95.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="2020/09/18/SSM%E6%95%B4%E5%90%88/"/>
      <url>2020/09/18/SSM%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><strong>spring、springmvc、mybatis整合</strong></p><a id="more"></a><h1 id="1-创建工程"><a href="#1-创建工程" class="headerlink" title="1.创建工程"></a>1.创建工程</h1><p>创建maven工程，选择org. apache maven archetypes maven -archetype-webapp**</p><h1 id="2-完善结构"><a href="#2-完善结构" class="headerlink" title="2.完善结构"></a>2.完善结构</h1><p>在main文件夹下创建java和resources（资源文件）文件夹，需选择提示创建的java和resourcrs文件夹，否则可能无效</p><p>需选择提示创建的java和resourcrs文件夹，否则可能无效</p><h1 id="3-配置配置文件"><a href="#3-配置配置文件" class="headerlink" title="3.配置配置文件"></a>3.配置配置文件</h1><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SSM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--Spring相关依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--MyBatis依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--数据库相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--其他需要--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showDeprecation</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showDeprecation</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-web-xml"><a href="#2-web-xml" class="headerlink" title="2.web.xml"></a>2.web.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加载spring配置文件，主要用于加载配置及业务相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置前端控制器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置编码过滤器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用REST风格的URI,将页面普通的post请求转换为delete或put请求--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3.Spring配置文件"></a>3.Spring配置文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Spring配置文件扫描除Controller注解的所有的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--==================================数据源配置======================================--></span>    <span class="token comment">&lt;!--加载数据库配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置Druid数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--==================================spring-mybatis整合配置================================--></span>    <span class="token comment">&lt;!--配置MyBatis整合--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定mybatis全局配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定mapper配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/jxy/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--将mybatis接口加入到ioc容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--==================================事务配置======================================--></span>    <span class="token comment">&lt;!--配置事务--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--配置事务增强--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!----></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--将所有service包下的方法都添加进来--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.jxy.service..*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPoint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置事务增强（如何切入）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--*：所有方法都是事务方法--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--所有以get开头的方法都是事务方法--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>用MyBatis-Plus形式创建MyBatis核心类sqlSessionFactory</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>***MybatisSqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.entity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>（仍有部分还需配置在conf.xml文件中）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--关闭驼峰命名自动转换为下划线命名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--开启日志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-SpringMVC配置文件"><a href="#4-SpringMVC配置文件" class="headerlink" title="4.SpringMVC配置文件"></a>4.SpringMVC配置文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--SpringMVC配置文件只需要配置控制器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--给返回值加前缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--给返回值加后缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加载静态资源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-MyBatis配置文件"><a href="#5-MyBatis配置文件" class="headerlink" title="5.MyBatis配置文件"></a>5.MyBatis配置文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--开启日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--开启延迟加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--开启按需加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--驼峰命名自动转换--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MyBatis </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="2020/09/18/SpringMVC/"/>
      <url>2020/09/18/SpringMVC/</url>
      
        <content type="html"><![CDATA[<p>​        Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等等。</p><a id="more"></a><h1 id="1-SpringMVC入门"><a href="#1-SpringMVC入门" class="headerlink" title="1.SpringMVC入门"></a>1.SpringMVC入门</h1><h2 id="1-SpringMVC简介"><a href="#1-SpringMVC简介" class="headerlink" title="1.SpringMVC简介"></a>1.SpringMVC简介</h2><p>SpringMVC是一款基于Java实现MVC模型的轻量级Web框</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- tomcat插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--设置插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--具体的插件配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uriEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uriEncoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置前端控制器"><a href="#2-配置前端控制器" class="headerlink" title="2.配置前端控制器"></a>2.配置前端控制器</h3><h4 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置前端控制器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath*:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置编码过滤器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定springmvc配置文件的路径，如果要省略，必须放到 默认路径：<br>==/WEB-INF/***-servlet.xml==</p><h4 id="注解驱动"><a href="#注解驱动" class="headerlink" title="注解驱动"></a>注解驱动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建Servlet容器时，使用注解的方式加载SpringMVC配置类中的信息，并加载成WEB专用的ApplicationContext对象 * 该对象放入了ServletContext范围，后期在整个WEB容器中可以随时获取调用 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AnnotationConfigWebApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringMVCConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 注解配置映射地址方式，服务于SpringMVC的核心控制器DispatcherServlet */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 乱码处理作为过滤器，在servlet容器启动时进行配置，相关内容参看Servlet零配置相关课程 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//调用父类的onStartup</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.创建字符集过滤器对象</span>    <span class="token class-name">CharacterEncodingFilter</span> characterEncodingFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.设置使用的字符集</span>    characterEncodingFilter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.添加到容器（它不是ioc容器，而是ServletContainer）</span>    <span class="token class-name">FilterRegistration</span><span class="token punctuation">.</span><span class="token class-name">Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token string">"characterEncodingFilter"</span><span class="token punctuation">,</span> characterEncodingFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.添加映射</span>    registration<span class="token punctuation">.</span><span class="token function">addMappingForUrlPatterns</span><span class="token punctuation">(</span>        <span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span>REQUEST<span class="token punctuation">,</span> <span class="token class-name">DispatcherType</span><span class="token punctuation">.</span>FORWARD<span class="token punctuation">,</span>                   <span class="token class-name">DispatcherType</span><span class="token punctuation">.</span>INCLUDE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-springmvc配置文件"><a href="#3-springmvc配置文件" class="headerlink" title="3.springmvc配置文件"></a>3.springmvc配置文件</h3><h4 id="xml-1"><a href="#xml-1" class="headerlink" title="xml"></a>xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--扫描有注解的包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springmvc.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置视图解析器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给返回值加前缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给返回值加后缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 解决返回json数据时，String类型数据乱码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解驱动-1"><a href="#注解驱动-1" class="headerlink" title="注解驱动"></a>注解驱动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//配置扫描带有@Controller注解的类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.springmvc.anno"</span><span class="token punctuation">,</span> includeFilters <span class="token operator">=</span>               <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token class-name">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>                                      classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span><span class="token comment">//相当于&lt;mvc:annotation-driven/></span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMVCConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注解配置放行指定资源格式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/img/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"/img/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/js/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"/js/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/css/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"/css/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//注解配置通用放行资源的格式，两个二选一</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDfServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//&lt;mvc:default-servlet-handler/></span>        configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 解决返回json数据时，String类型数据乱码      */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringHttpMessageConverter</span> converter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">)</span> converters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setDefaultCharset</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 配置视图解析器前缀后缀     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">InternalResourceViewResolver</span> <span class="token function">resourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InternalResourceViewResolver</span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">".jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建控制器"><a href="#4-创建控制器" class="headerlink" title="4.创建控制器"></a>4.创建控制器</h3><p>通过注解@Controller方法将一个类变为SpringMVC所需要的特殊类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-添加映射"><a href="#5-添加映射" class="headerlink" title="5.添加映射"></a>5.添加映射</h3><p>在类中添加方法，通过注解的方式进行映射，实现servlet的功能</p><p>一个类可以题有多个方法，通过注解@RequestMapping的value值进行区分<br><code>@RequestMapping(value=&quot;*&quot;)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/success"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@RequestMapping注解中的参数</strong><br>path/value:方法对应的映射,可以放在方法和类上<br>mothod:要求提交方式<br>params:要求请求中要包含的内容<br>    params= {“name”}:要求内容有name属性<br>    params= {“!name”}:要求不能有name属性<br>    params= {“name=zs”}:要求name属性必须为zs<br>    params= {“name=!zs”}要求name属性不能为zs</p><p>方法的返回值通过配置添加前缀后缀成为url进行跳转</p><p>映射是去匹配@RequestMapping注解的value值，可以和方法名、类名不一致 </p><h2 id="3-流程执行过程解析"><a href="#3-流程执行过程解析" class="headerlink" title="3.流程执行过程解析"></a>3.流程执行过程解析</h2><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><p>1.前端控制器DispatcherServlet拦截所有请求。</p><p>2.DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，请求HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器）</p><p>3.返回一个HandlerExecutionChain对象的形式的执行链；</p><p>4.DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p><p>5.执行Handler，找到对应的Controller中的mapping进行数据处理。</p><p>6.返回一个ModelAndView对象给处理器适配器。</p><p>7.将得到的ModelAndView对象返回给前端控制器DispatcherServlet。</p><p>8.前端控制器DispatcherServlet请求视图解析器ViewResolver进行视图解析。</p><p>9.视图解析器解析之后将渲染后的视图返回。</p><p>10.试图渲染将request域中的数据添加进视图。</p><p>11.将渲染完成的试图返回给客户端。</p><blockquote><h2 id="3-视图、视图解析器"><a href="#3-视图、视图解析器" class="headerlink" title="3.视图、视图解析器"></a>3.视图、视图解析器</h2><p>**视图的顶级接口:**View</p><p><strong>视图解析器：</strong>ViewResolver</p><p><strong>常见的视图和解析器：</strong></p><p>InternalResourceView、InternalResourceViewResolver<br>JstlView：JstlView extends InternalResourceView：</p><p>springMVC解析jsp时会默认使用InternalResourceView， 如果发现Jsp中包含了jstl语言相关的内容，则自动转为JstlView。</p><p><strong>JstlView</strong> </p><p>可以解析jstl，实现国际化操作</p><p>国际化： 针对不同地区、不同国家 ，进行不同语言的显示 </p><p>具体实现国际化步骤：<br>a.创建资源文件<br><code>基名_语言_地区.properties</code><br><code>基名_语言.properties</code><br>基名随便起，一般为base</p><p>b.配置springmvc配置文件，加载国际化资源文件<br>springmvc在启动时，会自动查找一个id=”messageSource”的bean，如果有则自动加载</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ResourceBundleMessageSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i18n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ResourceBundleMessageSource会在springmvc响应程序时 介入（解析国际化资源文件）</p><p>c.通过jstl使用国际化<br>需要jstl.jar  standar.jar<br>添加jstl的taglib不是使用jstl流程语句的<br>而是国际化的&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/fmt&quot;">http://java.sun.com/jsp/jstl/fmt&quot;</a> prefix=”fmt”%&gt;</p><p><strong>1.InternalResourceViewResolver</strong>其他功能：</p><p>要用SpringMVC实现：有一个页面直接跳转到另一个页面，除超链接外也可以使用映射<br>&lt;mvc:view-controller path=”映射”   view-name=”success（跳转地址，也会添加前缀和后缀）” /&gt;</p><p>以上注解 ，会让所有的请求 转入<a href="mvc:..">mvc:..</a>中匹配映射地址，而会忽略调@RequsetMapping()；<br>如果想让 @RequsetMapping(“…”)  和<a href="mvc:..">mvc:..</a>共存，则需要加入一个配置<br><a href="mvc:annotation-driven">mvc:annotation-driven</a></mvc:annotation-driven><br>这个配置会协调很多操作，建议建立项目是就加上</p></blockquote><h1 id="2-请求"><a href="#2-请求" class="headerlink" title="2.请求"></a>2.请求</h1><h2 id="1-获取请求参数"><a href="#1-获取请求参数" class="headerlink" title="1.获取请求参数"></a>1.获取请求参数</h2><p>如果后端接受参数的变量名与前端的参数一致，可以直接接受</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/success"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果后端接受参数的变量名与前端的参数不一致，使用以下方式接受数据</p><h3 id="1-PathVariable"><a href="#1-PathVariable" class="headerlink" title="1.@PathVariable"></a>1.@PathVariable</h3><p>1.在<code>@RequestMapping</code>中的url中添加参数，在接受变量前使用<code>PathVariable</code>注解标识</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"映射/&#123;属性名&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"属性名"</span><span class="token punctuation">)</span> 属性类型 属性名<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"success"</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-RequestParam"><a href="#2-RequestParam" class="headerlink" title="2.@RequestParam"></a>2.@RequestParam</h3><p>使用<code>@RequestParam</code>注解将前端获取的数据的数据与接受变量关联起来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"前端传入参数属性名"</span><span class="token punctuation">,</span>               required <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>               <span class="token comment">// false/true 是否必须传值默认为true，必须传值</span>               defaultValue <span class="token operator">=</span> <span class="token string">"..."</span>          <span class="token comment">// 如果没有传值时的默认值</span>              <span class="token punctuation">)</span> 属性类型 属性名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以通过本方法获取session,cookie等值<br>@ResuqtHeader获取头信息<br>@CookieValue获取cookie信息</p><h3 id="3-使用对象"><a href="#3-使用对象" class="headerlink" title="3.使用对象"></a>3.使用对象</h3><p><strong>要求</strong></p><p>表单中的表单name值为对应的类的对应属性名,如果有对象类型属性，则表单中要写为级联形式</p><p>方法的参数为用于接受的对象类型变量</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> home<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> school<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    学号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    家：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address.home<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    学校：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address.school<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>阅读<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>阅读    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>打游戏<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>打游戏    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>篮球    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>魔方<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>魔方    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>乒乓球<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>乒乓球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/pojo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pojo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-none"><code class="language-none">Student(no&#x3D;100, name&#x3D;古, age&#x3D;22, hobbies&#x3D;[阅读, 打游戏, 篮球, 魔方, 乒乓球], address&#x3D;Address(home&#x3D;河南, school&#x3D;商丘))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-使用Servlet-API"><a href="#4-使用Servlet-API" class="headerlink" title="4.使用Servlet API"></a>4.使用Servlet API</h3><p>通过servlet方式获取</p><p>直接在参数中添加<code>HttpServletRequest request</code>参数，运行时，tomcat会自动为request赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"welcome"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">welcome4</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-requestBody"><a href="#5-requestBody" class="headerlink" title="5.@requestBody"></a>5.@requestBody</h3><p>获取请求体</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testRequestBody<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    学号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>获取为json字符串格式，中文会出现乱码no<span class="token operator">=</span><span class="token number">100</span><span class="token operator">&amp;</span>name<span class="token operator">=</span><span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">9D</span><span class="token operator">%</span>B3<span class="token operator">%</span>E6<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span>B0<span class="token operator">%</span>E5<span class="token operator">%</span>AE<span class="token operator">%</span><span class="token number">87</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-CookieValue"><a href="#6-CookieValue" class="headerlink" title="6.@CookieValue"></a>6.@CookieValue</h3><p>获取cookie</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testCookieValue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testCookieValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> cookieValue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-RequestHeader"><a href="#7-RequestHeader" class="headerlink" title="7.@RequestHeader"></a>7.@RequestHeader</h3><p>获取请求头信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/url"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"头信息"</span><span class="token punctuation">)</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> header<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-SessionAttribute"><a href="#8-SessionAttribute" class="headerlink" title="8.@SessionAttribute"></a>8.@SessionAttribute</h3><p>获取Session中的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getSession"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SessionAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-指定请求类型"><a href="#2-指定请求类型" class="headerlink" title="2.指定请求类型"></a>2.指定请求类型</h2><p>1.使用<code>@RequestMapping</code>，指定method属性。</p><blockquote><p>method属性</p><p>RequestMethod.GET</p><p>RequestMethod.POST</p><p>RequestMethod.PUT</p><p>RequestMethod.HEAD</p><p>RequestMethod.OPTIONS</p><p>RequestMethod.PATCH</p><p>RequestMethod.TRACE</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/redirect"</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> attr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       attr<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       attr<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用请求方式对应的注解</p><p><code>@GetMapping</code></p><p><code>@PostMapping</code></p><p><code>@PutMapping</code></p><p><code>@PatchMapping</code></p><p><code>@DeleteMapping</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span>`<span class="token punctuation">(</span><span class="token string">"/redirect"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> attr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       attr<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       attr<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-类型转换器"><a href="#3-类型转换器" class="headerlink" title="3.类型转换器"></a>3.类型转换器</h2><h3 id="1-配置类型转换器"><a href="#1-配置类型转换器" class="headerlink" title="1.配置类型转换器"></a>1.配置类型转换器</h3><p>SpringMVC对接收的数据进行自动类型转换，该工作通过Converter接口实现，SpringMVC自带一些常见的类型转换器</p><blockquote><ul><li><p><strong>标量转换器</strong><br> StringToBooleanConverter String→Boolean<br> ObjectToStringConverter Object→String<br> StringToNumberConverterFactory String→Number（ Integer、 Long等）<br> NumberToNumberConverterFactory Number子类型之间(Integer、 Long、 Double等)<br> StringToCharacterConverter String→java.lang.Character<br> NumberToCharacterConverter Number子类型(Integer、 Long、 Double等)→java.lang.Character<br> CharacterToNumberFactory java.lang.Character→Number子类型(Integer、 Long、 Double等)<br> StringToEnumConverterFactory String→enum类型<br> EnumToStringConverter enum类型→String<br> StringToLocaleConverter String→java.util.Local<br> PropertiesToStringConverter java.util.Properties→String<br> StringToPropertiesConverter String→java.util.Properties  </p></li><li><p><strong>集合、数组相关转换器</strong><br> ArrayToCollectionConverter 数组→集合（ List、 Set）<br> CollectionToArrayConverter 集合（ List、 Set） →数组<br> ArrayToArrayConverter 数组间<br> CollectionToCollectionConverter 集合间（ List、 Set）<br> MapToMapConverter Map间<br> ArrayToStringConverter 数组→String类型<br> StringToArrayConverter String→数组， trim后使用“,”split<br> ArrayToObjectConverter 数组→Object<br> ObjectToArrayConverter Object→单元素数组<br> CollectionToStringConverter 集合（ List、 Set） →String<br> StringToCollectionConverter String→集合（ List、 Set）， trim后使用“,”split<br> CollectionToObjectConverter 集合→Object<br> ObjectToCollectionConverter Object→单元素集合  </p></li><li><p><strong>默认转换器</strong><br> ObjectToObjectConverter Object间<br> IdToEntityConverter Id→Entity<br> FallbackObjectToStringConverter Object→String  </p></li></ul></blockquote><p><strong>配置：以日期类型格式转换为例</strong></p><ul><li><p>第一种方式：声明自定义的转换格式并覆盖系统转换格式</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--1.设定格式类型Converter，注册为Bean，受SpringMVC管理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.format.support.FormattingConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--2.自定义Converter格式类型设定，该设定使用的是同类型覆盖的思想--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formatters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--3.使用set保障相同类型的转换器仅保留一个，避免冲突--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--4.设置具体的格式类型--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.format.datetime.DateFormatter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--5.类型规则--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy-MM-dd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--5.启用自定义Converter--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一种方式：声明自定义的转换格式并覆盖系统转换格式</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/requestParam11"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">requestParam11</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"page.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><strong>第二种方式日期类型格式转换（常用）</strong><br> 名称： @DateTimeFormat<br> 类型： 形参注解、成员变量注解<br> 位置：形参前面 或 成员变量上方<br> 作用：为当前参数或变量指定类型转换规则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/requestParam11"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">requestParam11</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> <span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"page.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>配置注解驱动支持</strong>  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果POJO中有Date类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/requestParam11"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">requestParam13</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"page.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-自定义类型转换器"><a href="#2-自定义类型转换器" class="headerlink" title="2.自定义类型转换器"></a>2.自定义类型转换器</h3><p><strong>步骤</strong></p><p>1.编写自定义类型转器的类（实现Converter接口）</p><p>接口的泛型一为原有的数据类型，泛型二位要转换成的数据类型</p><p>返回值位转换好的数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//接受前端传来的字符串</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据“-”将字符段分割，并将其创建为String数组</span>        <span class="token class-name">Student</span> student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将数组中的内容放入对象中</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在SpringMVC配置文件中配置</p><ol><li><p>将自定义转换器MyConverter纳入SpringIOC容器    </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myConverter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.lanqiao.converter.MyConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="2"><li><p>将myConverter再纳入 SpringMVC提供的转换器Bean</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id名<span class="token punctuation">"</span></span>           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>定义的转换器id名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>将conversionService注册到annotation-driven中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>3.测试转换器</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"converter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">converter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-静态资源访问"><a href="#4-静态资源访问" class="headerlink" title="4.静态资源访问"></a>4.静态资源访问</h2><p>在SpringMVC中，如果不处理直接访问静态资源：404 。</p><p><strong>原因</strong></p><p>SpringMVC会拦截所有请求，将其交给SpringMVC的入口DispatcherServlet去处理：找该请求映射对应的@requestMapping。</p><p><strong>解决思路</strong></p><p>如果是需要mvc处理的，则交给@RequsetMapping(“img.png”)处理；如果不需要springmvc处理，则</p><p>使用 tomcat默认的Servlet去处理。</p><p><strong>解决静态资源方案</strong></p><p><strong>方案一</strong></p><p>如果有springmvc对应的@requestMapping则交给spring处理；如果没有对应</p><p>@requestMapping,则交给服务器tomcat默认的servlet去处理</p><p>1.在springmvc配置文件中添加：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.但这样服务器只能访问静态资源，需要配置进行协调</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>方案二</strong></p><p>设置某些请求访问某些静态资源</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/文件夹/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--同样需要配置协调配置、--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3-响应"><a href="#3-响应" class="headerlink" title="3.响应"></a>3.响应</h1><h2 id="1-设置响应参数"><a href="#1-设置响应参数" class="headerlink" title="1.设置响应参数"></a>1.设置响应参数</h2><h3 id="1-ModelAndView"><a href="#1-ModelAndView" class="headerlink" title="1.ModelAndView"></a>1.ModelAndView</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"modelAndView"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span>  <span class="token function">modelAndView</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ModelAndView</span> mv<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法返回值类型为ModelAndView</p><p>创建ModelAndView对象，参数为view（跳转页面路径）</p><p>通过ModelAndView对象调用addObject方法，将model（数据）放入request域</p><h3 id="2-ModelMap"><a href="#2-ModelMap" class="headerlink" title="2.ModelMap"></a>2.ModelMap</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"modelMap"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">modelMap</span><span class="token punctuation">(</span><span class="token class-name">ModelMap</span> modelmap<span class="token punctuation">,</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modelmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法的返回值为String类型，返回view</p><p>参数中添加ModelMap</p><p>方法中直接使用ModelMap对象调用put()方法，将内容放入request域中</p><h3 id="3-Model"><a href="#3-Model" class="headerlink" title="3.Model"></a>3.Model</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"model"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法的返回值为String类型，返回view</p><p>参数中添加Model</p><p>方法中直接使用Model对象调用addAttribute()方法，将内容放入request域中</p><h3 id="4-Map"><a href="#4-Map" class="headerlink" title="4.Map"></a>4.Map</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法的返回值为String类型，返回view</p><p>参数中添加Map</p><p>方法中直接使用Map对象调用put()方法，将内容放入request域中</p><h3 id="5-SessionAttributes"><a href="#5-SessionAttributes" class="headerlink" title="5.@SessionAttributes"></a>5.@SessionAttributes</h3><p>在类名前添加注解@SessionAttributes(value={“…”,”…”}})</p><p>将需要放入session域中的对象放入注解中，会自动将其放入request域与session域中</p><p>如果要批量放入，对象之间以”,”分隔</p><p>还可以通过type,将某一类型的放入@SessionAttributes(types=对象类型.class)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>names <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MVCController</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-ModelAttribute"><a href="#6-ModelAttribute" class="headerlink" title="6.@ModelAttribute"></a>6.@ModelAttribute</h3><p><strong>适用场景</strong>：经常在更新（修改，删除）时使用<br><strong>作用</strong>：在不改变原有代码的基础之上，插入一个新方法。适用于一个controller对应一个功能</p><p>通过@ModelAttribute修饰的方法 ，会在每次请求本controller前先执行，并且该方法的参数map.put()可以将 对象放入即将查询的参数中。</p><p>必须满足的约定：</p><p>map.put(k,v) 其中的k 必须是即将查询的方法参数 的首字母小写</p><p>testModelAttribute(Student xxx)  ，即student；</p><p>如果不一致，需要通过@ModelAttribute声明。如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">查询<span class="token annotation punctuation">@ModelAttribute</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//查询出student</span>    <span class="token comment">//约定：map的key就是方法参数类型的首字母小写</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果map的key不是方法参数类型的首字母小写，则需要在方法的参数前加一个注解</span>    <span class="token comment">//@ModelAttribute("stu")</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>                 <span class="token punctuation">&#125;</span>修改<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uodate</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//将名字修改为ls</span>    student①<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>student②<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//①是前一个方法查询的内容，②是从前端传过来的</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-设置响应类型"><a href="#2-设置响应类型" class="headerlink" title="2.设置响应类型"></a>2.设置响应类型</h2><p>响应有两种类型：请求转发、重定向</p><p>forward:请求转发（默认）</p><p>redirect:重定向 </p><p>指定请求类型时，SpringMVC不会自动添加前缀(/views)、后缀(.jsp)，需手动添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式一</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/model"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">testForward</span><span class="token punctuation">(</span><span class="token class-name">ModelAndView</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     model<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>     model<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"forward:index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方式二</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/redirect"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> attr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       attr<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       attr<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果未设置跳转路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//此时，会根据为url添加前缀后缀寻找对应的页面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-返回JSON数据"><a href="#3-返回JSON数据" class="headerlink" title="3.返回JSON数据"></a>3.返回JSON数据</h2><p>使用<code>@ResponseBody</code>标识方法，告诉SpringMVC返回值不是一个View页面，而是一个ajax调用的返回值，会将该方法的返回值 以一个json数组的形式返回给前台。</p><p>方法返回值直接写想要返回的数据的数据类型</p><p>返回值为要获取的数据</p><p>SpringMVC会将数据自动转换为json数据，将json数据返回</p><p>需要添加jackon依赖帮助自动转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> students <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">前台：服务端将返回值结果 以json数组的形式 传给了result。<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-3.4.1.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过ajax请求springmvc</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>            <span class="token string">"student/test"</span><span class="token punctuation">,</span><span class="token comment">//服务器地址</span>            <span class="token comment">//&#123;"name":"zs","age":23&#125;（参数）</span>            <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//服务端处理完毕后的回调函数 List&lt;Student> students， 加上</span>                <span class="token comment">//@ResponseBody后， students实质是一个json数组的格式</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>no <span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-文件上传"><a href="#4-文件上传" class="headerlink" title="4.文件上传"></a>4.文件上传</h1><p>SpringMVC可以简化文件上传的代码，但是必须满足条件：实现MultipartResolver接口 ；</p><p>而该接口的实现类SpringMVC也已经提供了CommonsMultipartResolver</p><p>具体步骤：（直接使用CommonsMultipartResolver实现上传）</p><ol><li>依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>步骤</p><ol><li><p>配置CommonsMultipartResolver，将其加如IOC容器，用于文件上传，<strong>其id值固定为multipartResolver</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 上传单个文件的最大值，单位Byte;如果-1，表示无限制 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>102400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>前端</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  描述：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>处理·</p></li><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testFile"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testFile</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建File对象，一会向该路径下上传文件</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断路径是否存在，如果不存在，创建该路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取到上传文件的名称</span>    <span class="token class-name">String</span> filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把文件的名称唯一化</span>    filename <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>    <span class="token comment">// 上传文件</span>    upload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h1 id="5-拦截器"><a href="#5-拦截器" class="headerlink" title="5.拦截器"></a>5.拦截器</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>拦截器（ Interceptor）是一种动态拦截方法调用的机制。基于Aop思想。</p><p>要想实现拦截器，必须实现一个接口HandlerInterceptor</p><h2 id="2-工作时机"><a href="#2-工作时机" class="headerlink" title="2.工作时机"></a>2.工作时机</h2><p><code>preHandle</code>:在DispatcherServlet拦截请求之后，Handle执行之前执行，返回true表示继续执行，返回表示false表示停止执行。</p><p><code>postHandle</code>：在Handle执行之后执行。</p><p><code>afterCompletion</code>： 拦截器最后执行的方法，无论原始方法是否执行  </p><h2 id="3-自定义拦截器"><a href="#3-自定义拦截器" class="headerlink" title="3.自定义拦截器"></a>3.自定义拦截器</h2><p><strong>1.定义拦截器（实现<code>HandlerInterceptor</code>接口）</strong></p><p><strong>2.配置拦截器</strong></p><p>xml形式</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--mvc:interceptors : 在其中配置所有拦截器vc:interceptor : 配置一个拦截器mvc:mapping : 拦截的路径mvc:exclude-mapping : 放行的路径bean : 配置拦截器mvc:mapping、mvc:exclude-mapping可以使用通配符/* : 拦截所有单级请求/** : 拦截所有请求--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springmvc.handle.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解驱动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.springmvc.anno"</span><span class="token punctuation">,</span> includeFilters <span class="token operator">=</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token class-name">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMVCConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例</strong></p><p>1.编写拦截器implements HandlerInterceptor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// handler：被调用的处理器对象，本质上是一个方法对象，对反射中的Method对象进行了再包装</span>        <span class="token comment">//返回值为true拦截后处理完成继续请求，返回值为false，拦截后终止请求</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//ex:如果处理器执行过程中出现异常对象，可以针对异常情况进行单独处理</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"视图渲染完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.将拦截器配置在spring配置文件中，默认拦截一切请求</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置具体拦截路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定拦截的路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定不拦截的路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/student/welcome<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-拦截器链"><a href="#4-拦截器链" class="headerlink" title="4.拦截器链"></a>4.拦截器链</h2><p>多个拦截器过程拦截器链，多个拦截器按照一定的顺序，对原始被调用功能进行增强</p><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定具体的拦截器类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.MyInterceptor1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置多个拦截器，配置顺序即为最终运行顺序--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.MyInterceptor2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.MyInterceptor3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-执行顺序"><a href="#2-执行顺序" class="headerlink" title="2.执行顺序"></a>2.执行顺序</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img1/image-20200427171422781.png" alt="image-20200427171422781"></p><h2 id="5-与过滤器相比"><a href="#5-与过滤器相比" class="headerlink" title="5.与过滤器相比"></a>5.与过滤器相比</h2><ol><li>归属不同： Filter属于Servlet技术， Interceptor属于SpringMVC技术</li><li>拦截内容不同： Filter对所有访问进行增强， 拦截器仅针对SpringMVC的访问进行增强</li></ol><h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6.异常处理"></a>6.异常处理</h1><h2 id="1-实现接口"><a href="#1-实现接口" class="headerlink" title="1.实现接口"></a>1.实现接口</h2><p>创建一个异常处理类，实现<code>HandlerExceptionResolver</code>接口，用于处理异常。</p><p>重写<code>resolveException</code>方法，返回<code>ModelAndView</code>对象，用于修改/添加信息或跳转路径。</p><p>需要将其添加进Spring容器中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errMsg"</span><span class="token punctuation">,</span><span class="token string">"错误信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用注解"><a href="#2-使用注解" class="headerlink" title="2.使用注解"></a>2.使用注解</h2><p>1.创建一个类，添加<code>@ControllerAdvice</code>注解</p><p>2.在方法上添加<code>@ExceptionHandler</code>注解，参数为要处理的异常</p><p>3.方法的参数中可以接收<code>Exception</code>类型数据，用于获取异常信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">nullEcp</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errMsg"</span><span class="token punctuation">,</span> <span class="token string">"空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要返回json数据，可以使用<code>@ControllerAdvice`@ResponseBody`+</code>或<code>@RestControllerAdvice</code></p><p>如果出现中文乱码，需要进行配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ExceptionHandler</code>标识的方法的参数 必须在异常类型(<code>Throwable</code>或其子类)</p><p>不能使用ModelMap和Map方式处理数据</p><p>异常处理路径：最短优先  </p><p>@ExceptionHandler默认只能捕获 当前类中的异常方法。如果发生异常的方法和处理异常的方法不在同一个类中、使用@ControllerAdvice注解处理方法所在的类</p><p><strong>总结：</strong>如果一个方法用于处理异常，并且只处理当前类中的异常：@ExceptionHandler</p><p>​           如果一个方法用于处理异常，并且处理所有类中的异常： 类前加@ControllerAdvice、 处理异常的方法前加      </p><p>​          @ExceptionHandler</p><h2 id="3-配置方式"><a href="#3-配置方式" class="headerlink" title="3.配置方式"></a>3.配置方式</h2><p>通过配置来实现异常的处理（优先级低于使用ControllerAdvice方式）<br>将SimpleMappingExceptionResolver加入到ioc容器中                        </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 如果发生异常，异常对象会被保存在exceptionAttribute的value值中；并且会放入request域中 ；可     以不配置使用默认值exception--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exception<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>异常1全类名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                要跳转的页面内（也会自动添加前缀后缀）            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>异常2全类名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="2020/09/18/SpringCloud/"/>
      <url>2020/09/18/SpringCloud/</url>
      
        <content type="html"><![CDATA[<p>​        Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><a id="more"></a><h1 id="1-SpringCloud基础入门"><a href="#1-SpringCloud基础入门" class="headerlink" title="1.SpringCloud基础入门"></a>1.SpringCloud基础入门</h1><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/cloud.svg"></p><h2 id="1-各大组件情况与选择"><a href="#1-各大组件情况与选择" class="headerlink" title="1.各大组件情况与选择"></a>1.各大组件情况与选择</h2><h3 id="1-服务注册中心"><a href="#1-服务注册中心" class="headerlink" title="1.服务注册中心"></a>1.服务注册中心</h3><table><thead><tr><th>组件</th><th>现状</th></tr></thead><tbody><tr><td>Eureka</td><td>停止维护，不建议使用</td></tr><tr><td>Zookeeper</td><td>可正常可用</td></tr><tr><td>Consul</td><td>可正常可用</td></tr><tr><td>Nacos</td><td>阿里开发，国内流行，推荐使用</td></tr></tbody></table><h3 id="2-服务调用"><a href="#2-服务调用" class="headerlink" title="2.服务调用"></a>2.服务调用</h3><table><thead><tr><th>组件</th><th>现状</th></tr></thead><tbody><tr><td>Ribbon</td><td>维护状态，但已被遗弃</td></tr><tr><td>LoadBalancer</td><td>新推出,还不完善，但会逐渐替代Ribbon</td></tr></tbody></table><h3 id="3-服务调用2"><a href="#3-服务调用2" class="headerlink" title="3.服务调用2"></a>3.服务调用2</h3><table><thead><tr><th>组件</th><th>现状</th></tr></thead><tbody><tr><td>Feign</td><td>停止更新</td></tr><tr><td>OpenFeign</td><td>用于替代Feign</td></tr></tbody></table><h3 id="4-服务降级"><a href="#4-服务降级" class="headerlink" title="4.服务降级"></a>4.服务降级</h3><table><thead><tr><th>组件</th><th>状态</th></tr></thead><tbody><tr><td>Hystrix</td><td>停止更新，不建议使用</td></tr><tr><td>resilience4j</td><td>国外使用较多，但国内使用较少</td></tr><tr><td>Sentienl</td><td>阿里开发，国内使用较多</td></tr></tbody></table><h3 id="5-服务网关"><a href="#5-服务网关" class="headerlink" title="5.服务网关"></a>5.服务网关</h3><table><thead><tr><th>组件</th><th>状态</th></tr></thead><tbody><tr><td>Zuul</td><td>已废弃，不建议使用</td></tr><tr><td>gateway</td><td>目前Zuul的替代方案</td></tr></tbody></table><h3 id="6-服务配置"><a href="#6-服务配置" class="headerlink" title="6.服务配置"></a>6.服务配置</h3><table><thead><tr><th>组件</th><th>状态</th></tr></thead><tbody><tr><td>Config</td><td>停止维护，不建议使用</td></tr><tr><td>Nacos</td><td>阿里开发，国内主流，建议使用</td></tr></tbody></table><h3 id="7-服务总线"><a href="#7-服务总线" class="headerlink" title="7.服务总线"></a>7.服务总线</h3><table><thead><tr><th>组件</th><th>状态</th></tr></thead><tbody><tr><td>Bus</td><td>可使用</td></tr><tr><td>Nacos</td><td>可使用</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97%E7%8E%B0%E7%8A%B6.png"></p><h2 id="2-Rest微服务工程构建"><a href="#2-Rest微服务工程构建" class="headerlink" title="2.Rest微服务工程构建"></a>2.Rest微服务工程构建</h2><h3 id="1-创建父工程"><a href="#1-创建父工程" class="headerlink" title="1.创建父工程"></a>1.创建父工程</h3><p>1.创建Maven工程</p><p>2.修改字符编码</p><p>3.修改编译环境Build, Execution, Deployment –&gt;Compiler –&gt;java Compiler</p><p>4.删除父工程中的src</p><p>5.编写pom.xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--设置打包方式pom--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--统一管理jar包版本--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--spring boot 2.2.2--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--maven信息统计--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-project-info-reports-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--spring cloud Hoxton.SR1--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--spring cloud 阿里巴巴--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--mysql--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mysql.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--druid--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;druid.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--mybatis--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis.spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--junit--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--log4j--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;log4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--lombok--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lombok.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-微服务模块开发流程"><a href="#2-微服务模块开发流程" class="headerlink" title="2.微服务模块开发流程"></a>2.微服务模块开发流程</h3><p>1.新建Moudle模块</p><p>2.编写pom.xml文件</p><p>3.配置yml配置文件</p><p>4.添加主启动类（如直接创建SpringBoot项目，可省略此步骤）</p><p>5.增加业务类</p><h3 id="3-微服务构建步骤"><a href="#3-微服务构建步骤" class="headerlink" title="3.微服务构建步骤"></a>3.微服务构建步骤</h3><h4 id="1-创建子工程支付Moudle模块"><a href="#1-创建子工程支付Moudle模块" class="headerlink" title="1.创建子工程支付Moudle模块"></a>1.创建子工程支付Moudle模块</h4><h5 id="1-创建普通Maven结构Moudle"><a href="#1-创建普通Maven结构Moudle" class="headerlink" title="1.创建普通Maven结构Moudle"></a>1.创建普通Maven结构Moudle</h5><h5 id="2-编写子模块pom文件"><a href="#2-编写子模块pom文件" class="headerlink" title="2.编写子模块pom文件"></a>2.编写子模块pom文件</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-配置文件application-yml"><a href="#3-配置文件application-yml" class="headerlink" title="3.配置文件application.yml"></a>3.配置文件application.yml</h5><p><strong>配置文件添加在resources目录下</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token comment">#服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#   数据源基本配置</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment">#   数据源其他配置,默认不起作用需要手动配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span><span class="token comment">#  实体类所在包</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.jxy.springcloud.entity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-创建主启动类"><a href="#4-创建主启动类" class="headerlink" title="4.创建主启动类"></a>4.创建主启动类</h5><p><strong>直接创建Springboot模块可省略此步骤</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-热部署Devtools"><a href="#2-热部署Devtools" class="headerlink" title="2.热部署Devtools"></a>2.热部署Devtools</h4><h4 id="3-消费者订单模块"><a href="#3-消费者订单模块" class="headerlink" title="3.消费者订单模块"></a>3.消费者订单模块</h4><h5 id="1-创建Moudle"><a href="#1-创建Moudle" class="headerlink" title="1.创建Moudle"></a>1.创建Moudle</h5><h5 id="2-编写子模块的pom-xml文件"><a href="#2-编写子模块的pom-xml文件" class="headerlink" title="2.编写子模块的pom.xml文件"></a>2.编写子模块的pom.xml文件</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-consumer-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-配置application-yml配置文件"><a href="#3-配置application-yml配置文件" class="headerlink" title="3.配置application.yml配置文件"></a>3.配置application.yml配置文件</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token comment">#端口号默认为80，可省略，作为客户端模块，应使用80省略端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-创建主启动类-1"><a href="#4-创建主启动类-1" class="headerlink" title="4.创建主启动类"></a>4.创建主启动类</h5><h5 id="5-增加业务类"><a href="#5-增加业务类" class="headerlink" title="5.增加业务类"></a>5.增加业务类</h5><p>微服务都是以HTTP接口的形式暴露自身服务的，因此在调用远程服务时就必须使用HTTP客户端。我们可以使用JDK原生的URLConnection、Apache的Http Client、Netty的异步HTTP Client,最方便、最优雅的Feign, Spring的RestTemplate等。</p><p>客户端通过本模块操作其他模块，使用RestTemplate</p><h6 id="1-RestTemplate简介"><a href="#1-RestTemplate简介" class="headerlink" title="1.RestTemplate简介"></a>1.RestTemplate简介</h6><p>RestTemplate是Spring提供的用于访问Rest服务(Rest风格、Rest架构)的客户端。<br>RestTemplate提供了多种便捷访问远程Http服务的方法,能够大大提高客户端的编写效率。</p><h6 id="2-RestTemplate使用步骤"><a href="#2-RestTemplate使用步骤" class="headerlink" title="2.RestTemplate使用步骤"></a>2.RestTemplate使用步骤</h6><p>1.将RestTemplate配置进服务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用RestTemplate</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> STUDENT_URL <span class="token operator">=</span> <span class="token string">"http://localhost:8001"</span><span class="token punctuation">;</span>    <span class="token comment">//获取RestTemplate对象</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用RestTemplate对象调用相应方法</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/insert"</span><span class="token punctuation">,</span> student<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/queryById/"</span> <span class="token operator">+</span> no<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-工程重构"><a href="#4-工程重构" class="headerlink" title="4.工程重构"></a>4.工程重构</h4><p><strong>作用</strong></p><p>将各个项目中重复的部分抽离出来，单独放到一个模块中，将该模块打包，发布到本地仓库，在需要的模块中的pom.xml文件中引入</p><h5 id="1-创建一个模块"><a href="#1-创建一个模块" class="headerlink" title="1.创建一个模块"></a>1.创建一个模块</h5><h5 id="2-添加所需的pom依赖"><a href="#2-添加所需的pom依赖" class="headerlink" title="2.添加所需的pom依赖"></a>2.添加所需的pom依赖</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-将重复部分提取"><a href="#3-将重复部分提取" class="headerlink" title="3.将重复部分提取"></a>3.将重复部分提取</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E9%87%8D%E6%9E%84.png"></p><h5 id="4-将模块发布到本地仓库"><a href="#4-将模块发布到本地仓库" class="headerlink" title="4.将模块发布到本地仓库"></a>4.将模块发布到本地仓库</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E5%8F%91%E5%B8%83%E5%88%B0%E6%9C%AC%E5%9C%B0.png"></p><h5 id="5-在需要的模块中引入"><a href="#5-在需要的模块中引入" class="headerlink" title="5.在需要的模块中引入"></a>5.在需要的模块中引入</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;project.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-SpringCloud"><a href="#2-SpringCloud" class="headerlink" title="2.SpringCloud"></a>2.SpringCloud</h1><h2 id="1-服务注册中心-Eureka"><a href="#1-服务注册中心-Eureka" class="headerlink" title="1.服务注册中心 - Eureka"></a>1.服务注册中心 - Eureka</h2><p>服务注册：将服务信息注册进注册中心<br>服务发现：从注册中心上获取服务信息<br>实质：存key服务名     取vaue调用地址</p><h3 id="1-Eureka单机"><a href="#1-Eureka单机" class="headerlink" title="1.Eureka单机"></a>1.Eureka单机</h3><h4 id="1-创建注册中心"><a href="#1-创建注册中心" class="headerlink" title="1.创建注册中心"></a>1.创建注册中心</h4><h5 id="1-创建模块"><a href="#1-创建模块" class="headerlink" title="1.创建模块"></a>1.创建模块</h5><h5 id="2-配置pom-xml"><a href="#2-配置pom-xml" class="headerlink" title="2.配置pom.xml"></a>2.配置pom.xml</h5><p><strong>添加EurekaServer依赖</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入本地库中的公共模块--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;project.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--添加EurekaServer依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--数据库相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--web模块--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--（健康监控）配置和使用--></span>    <span class="token comment">&lt;!--在生产环境中，需要实时或定期监控服务的可用性。Spring Boot的actuator（健康监控）功能提供了很多监控所需的接口，        可以对应用系统进行配置查看、相关功能统计等。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--热启动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--lombok--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-application-yml"><a href="#3-application-yml" class="headerlink" title="3.application.yml"></a>3.application.yml</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment">#eureka服务端的实例名称</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#false：表示不向注册中心注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#false:表示自己就是注册中心，职责是维护服务实例，不需要去检索服务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment">#设置与EurekaServer交互的地址，查询服务和注册服务都需要依赖此地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span>/eureka/<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-启动类"><a href="#4-启动类" class="headerlink" title="4.启动类"></a>4.启动类</h5><p>添加注解**@EnableEurekaServer**，表示这是服务注册中心模块启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloudEurekaServer7001Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CloudEurekaServer7001Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-启动效果"><a href="#5-启动效果" class="headerlink" title="5.启动效果"></a>5.启动效果</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/EurekaServer.png"></p><h4 id="2-服务注册"><a href="#2-服务注册" class="headerlink" title="2.服务注册"></a>2.服务注册</h4><h5 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-配置yml"><a href="#2-配置yml" class="headerlink" title="2.配置yml"></a>2.配置yml</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token comment">#服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#   数据源基本配置</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment">#   数据源其他配置,默认不起作用需要手动配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#是否将自己注册进eureka server，默认为true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#是否从eureka server抓取已有注册信息，默认为true，单点时无所谓，集群时必须为true才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-添加注解"><a href="#3-添加注解" class="headerlink" title="3.添加注解"></a>3.添加注解</h5><p>注册组件使用**@EnableEurekaClient**注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.jxy.springcloud.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-检测"><a href="#4-检测" class="headerlink" title="4.检测"></a>4.检测</h5><p>先启动Eureka模块，再启动其他模块</p><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1.png"></p><p>有时会触发保护机制</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6.png"></p><h5 id="5-流程"><a href="#5-流程" class="headerlink" title="5.流程"></a>5.流程</h5><p>1.先启动 eureka注册中心</p><p>2.启动服务提供者 paymen付服务</p><p>3.支付服务启动后会把自身信息（比如服务地址以别名方式注册进 eureka）</p><p>4.消者 order服务在需要凋用接囗时，使用服务别名去注册中心获取实际的RPC远程调用地址</p><p>5.消费决得调用地址后，底层实际是利用 Httpclien术实现远程调用</p><p>6.消费者获得服务地址后会缓存在本地jvm内存中，默认每间隔30秒更新一次服务调用地址</p><h3 id="2-Eureka集群"><a href="#2-Eureka集群" class="headerlink" title="2.Eureka集群"></a>2.Eureka集群</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>作用：避免单点故障，搭建Eureka注册中心集群，实现负载均衡和故障容错。</p><p>实现：多个注册中心互相注册其他注册中心模块</p><h4 id="2-集群搭建"><a href="#2-集群搭建" class="headerlink" title="2.集群搭建"></a>2.集群搭建</h4><h5 id="1-创建多个模块"><a href="#1-创建多个模块" class="headerlink" title="1.创建多个模块"></a>1.创建多个模块</h5><p>参考单机创建注册中心模块</p><h5 id="2-修改url映射文件"><a href="#2-修改url映射文件" class="headerlink" title="2.修改url映射文件"></a>2.修改url映射文件</h5><p>文件地址C:\Windows\System32\drivers\etc\hosts</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.png"></p><h5 id="3-注册模块互相注册"><a href="#3-注册模块互相注册" class="headerlink" title="3.注册模块互相注册"></a>3.注册模块互相注册</h5><p>在yml配置文件中配置defaultZone，值为其他注册中心模块的url</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment">#eureka服务端的实例名称</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#false：表示不向注册中心注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#false:表示自己就是注册中心，职责是维护服务实例，不需要去检索服务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment">#设置与EurekaServer交互的地址，查询服务和注册服务都需要依赖此地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h5><p>修改配置文件后localhost:端口号与映射文件中的配置都可以使用，且，在一个eurekaServer中可以发现其他注册中心模块</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/l7001.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/l7002.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/e7001.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/e7002.png"></p><h4 id="3-服务注册"><a href="#3-服务注册" class="headerlink" title="3.服务注册"></a>3.服务注册</h4><p>只需将注册中心的url添加都进服务模块的yml配置文件中即可</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#是否将自己注册进eureka server，默认为true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#是否从eureka server抓取已有注册信息，默认为true，单点时无所谓，集群时必须为true才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/e27001.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/e27002.png"></p><h4 id="4-服务集群"><a href="#4-服务集群" class="headerlink" title="4.服务集群"></a>4.服务集群</h4><h5 id="1-创建模块-1"><a href="#1-创建模块-1" class="headerlink" title="1.创建模块"></a>1.创建模块</h5><p>集群时，相同功能模块只需要duankouhao 不同（主启动类名建议不同），其余的都相同。</p><p><strong>yml配置文件中服务名必须相同</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-修改调用出的url"><a href="#2-修改调用出的url" class="headerlink" title="2.修改调用出的url"></a>2.修改调用出的url</h5><p>集群时，为了能一个url均衡调用集群中的服务，不在使用端口号的url,而是改为服务名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> STUDENT_URL <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> STUDENT_URL <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/insert"</span><span class="token punctuation">,</span> student<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/queryById/"</span> <span class="token operator">+</span> no<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-添加-LoadBalanced注解"><a href="#3-添加-LoadBalanced注解" class="headerlink" title="3.添加@LoadBalanced注解"></a>3.添加@LoadBalanced注解</h5><p>在获取RestTemplate组件时，添加注解**@LoadBalanced**，才能达到负载均衡的效果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4.png"></p><p>测试时同一个url多次访问，会访问不同端口号的服务，证明集群成功。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4%E6%B5%8B%E8%AF%95.gif"></p><h3 id="3-actuator信息完善"><a href="#3-actuator信息完善" class="headerlink" title="3.actuator信息完善"></a>3.actuator信息完善</h3><h4 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2.添加配置"></a>2.添加配置</h4><p>配置显示名称，添加<strong>instance</strong>配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#是否将自己注册进eureka server，默认为true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#是否从eureka server抓取已有注册信息，默认为true，单点时无所谓，集群时必须为true才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> payment8001  <span class="token comment">#设置显示服务名</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#访问路径显示ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h4><p>显示由原来的localhost:…变为修改的名字</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E6%9C%8D%E5%8A%A1%E6%98%BE%E7%A4%BA.png"></p><p><strong>ip显示</strong></p><p>修改前</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/ip%E4%B8%8D%E6%98%BE%E7%A4%BA.png"></p><p>修改后</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/ip%E6%98%BE%E7%A4%BA.png"></p><h3 id="4-服务发现Discovery"><a href="#4-服务发现Discovery" class="headerlink" title="4.服务发现Discovery"></a>4.服务发现Discovery</h3><p>通过DiscoveryClient对象获取服务信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/discovery"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取方法一</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> service<span class="token operator">:</span>services<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取方法二</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance<span class="token operator">:</span>instances<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>discoveryClient<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/discovery1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/discovery2.png"></p><h3 id="5-Eureka自我保护"><a href="#5-Eureka自我保护" class="headerlink" title="5.Eureka自我保护"></a>5.Eureka自我保护</h3><h4 id="1-默认开启"><a href="#1-默认开启" class="headerlink" title="1.默认开启"></a>1.默认开启</h4><p>Eureka页面会显示</p><p><strong>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</strong></p><p>​        代表自我保护机制开启，一个服务即使一次没有响应，短时间内Eureka也不会将其注销，等待一段时间后，如果服务进行响应，则一切继续，如果一段时间内能没有响应，则Eureka会将其注销。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E5%AE%89%E5%85%A8%E4%BF%9D%E6%8A%A4.png"></p><h4 id="2-关闭自我保护机制"><a href="#2-关闭自我保护机制" class="headerlink" title="2.关闭自我保护机制"></a>2.关闭自我保护机制</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token comment">#关闭自我保护机制</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#设置时间间隔</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭之后显示</p><p><strong>THE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E5%85%B3%E9%97%AD%E4%BF%9D%E6%8A%A4.png"></p><h4 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h4><p>将响应时间缩短</p><p>在服务端设置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#设置时间间隔</span><span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在客户端显示</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#服务端在收到最后一次心跳后等待的时间上限，超时注销，默认90s</span><span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token comment">#客户端向服务端发送心跳时间间隔，默认30s</span><span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试</strong></p><p>未关闭自我保护机制时，关闭8002客户端服务，在eureka端仍会显示，关闭之后，一次未响应，立即被注销</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/%E5%85%B3%E9%97%AD%E4%BF%9D%E6%8A%A42.png"></p><h2 id="2-服务注册中心-Consul"><a href="#2-服务注册中心-Consul" class="headerlink" title="2.服务注册中心 - Consul"></a>2.服务注册中心 - Consul</h2><h3 id="1-安装Consul"><a href="#1-安装Consul" class="headerlink" title="1.安装Consul"></a>1.安装Consul</h3><p><a href="https://www.consul.io/downloads">官网下载地址</a></p><p>下载解压之后，为exe文件，在该目录下打开cmd，可以使用命令查询版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">consul --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/consul-version.png"></p><p>使用命令运行consul</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">consul agent -dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认在8500端口运行</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/consul%E8%BF%90%E8%A1%8C.png"></p><h3 id="2-使用Consul"><a href="#2-使用Consul" class="headerlink" title="2.使用Consul"></a>2.使用Consul</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--consul--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置application-yml"><a href="#2-配置application-yml" class="headerlink" title="2.配置application.yml"></a>2.配置application.yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8004</span><span class="token comment">#服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>        <span class="token comment">#使用MP还需添加数据库连接配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210557.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/consul%E8%BF%90%E8%A1%8C2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210607.png"></p><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h4><h5 id="1-payment模块"><a href="#1-payment模块" class="headerlink" title="1.payment模块"></a>1.payment模块</h5><h6 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h6><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-provider-payment8004<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--consul--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--引入本地库中的公共模块--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;project.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--SpringBoot-web启动器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--thymeleaf模板引擎--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--信息收集--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--MyBatis-Plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--数据库相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--单元测试--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--工具--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2.application.yml"></a>2.application.yml</h6><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8004</span><span class="token comment">#服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#   数据源基本配置</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment">#   数据源其他配置,默认不起作用需要手动配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-主启动类"><a href="#3-主启动类" class="headerlink" title="3.主启动类"></a>3.主启动类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.jxy.springcloud.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8004</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8004</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-业务类"><a href="#4-业务类" class="headerlink" title="4.业务类"></a>4.业务类</h6><p>略</p><h5 id="2-consumer模块"><a href="#2-consumer模块" class="headerlink" title="2.consumer模块"></a>2.consumer模块</h5><h6 id="1-pom-xml-1"><a href="#1-pom-xml-1" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h6><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-consumer-consulOrder80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--consul--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--引入本地库中的公共模块--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;project.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--SpringBoot-web启动器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--thymeleaf模板引擎--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--信息收集--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--MyBatis-Plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--数据库相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--单元测试--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--工具--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-application-yml-1"><a href="#2-application-yml-1" class="headerlink" title="2.application.yml"></a>2.application.yml</h6><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token comment">#微服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>order  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#   数据源基本配置</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment">#   数据源其他配置,默认不起作用需要手动配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-主启动类-1"><a href="#3-主启动类-1" class="headerlink" title="3.主启动类"></a>3.主启动类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsulOrderMain80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConsulOrderMain80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-config"><a href="#4-config" class="headerlink" title="4.config"></a>4.config</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-controller"><a href="#5-controller" class="headerlink" title="5.controller"></a>5.controller</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> STUDENT_URL <span class="token operator">=</span> <span class="token string">"http://cloud-payment-service"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/insert"</span><span class="token punctuation">,</span> student<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/queryById/"</span> <span class="token operator">+</span> no<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-结果-1"><a href="#3-结果-1" class="headerlink" title="3.结果"></a>3.结果</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210619.png"></p><h2 id="3-负载均衡服务调用-Ribbon"><a href="#3-负载均衡服务调用-Ribbon" class="headerlink" title="3.负载均衡服务调用 - Ribbon"></a>3.负载均衡服务调用 - Ribbon</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><p>Spring Cloud Ribbon是基于 Netflix Ribbon实现的一套客户端负载均衡的工具。<br>        简单的说， Ribbon是Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Riυbon客户端组件提供一系列完善的配置，例如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer（简称LB）后面所有的机器， Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用 Ribbon实现自定义的负载均衡算法。</p><h4 id="LB负载均衡（-Load-balance）"><a href="#LB负载均衡（-Load-balance）" class="headerlink" title="LB负载均衡（ Load balance）"></a>LB负载均衡（ Load balance）</h4><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。常见的负载均衡有软件 Nginx，LVS，硬件F5等。</p><p>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</p><p>​        Nginx是服务器负载均衡，客户端所有请求都会交给 nginx，然后由 nginx实现转发请求。即负载均衡是由服务端实现的。Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到M本地，从而在本地实现RPC远程服务调用技术。</p><h4 id="负载均衡分类"><a href="#负载均衡分类" class="headerlink" title="负载均衡分类"></a>负载均衡分类</h4><p><strong>集中式LB</strong><br>        即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如 ngInX），由滚设施负责把访问请求通过某策略转发至服务的提供方；</p><p><strong>进程内LB</strong><br>        将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出个合适的服务器。Ribbon就属于进程内LB，它只是个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址</p><h4 id="Ribbon工作步骤"><a href="#Ribbon工作步骤" class="headerlink" title="Ribbon工作步骤"></a>Ribbon工作步骤</h4><p>第一步先选择 EurekaServer，它优先选择在同一个区域內负载较少的 server。</p><p>第二步再根据用户指定的策略，在从 server取到的服务注册列表中选择一个地址。</p><p>其中 Ribbon提供了多种策略；比如轮询、随机和根据响应时间加权。</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>spring-cloud-starter-netflix-eureka-client已经集成了ribbon,受用Eureka时可以省略引入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-RestTemplate"><a href="#2-RestTemplate" class="headerlink" title="2.RestTemplate"></a>2.RestTemplate</h3><p>Ribbon通过负载均衡+RestTemplate实现功能</p><p><strong>RestTemplate对象与@LoadBalanced注解</strong></p><p>RestTemplate有两种方法</p><p>postForObject/getForObject</p><p>返回对象为响应体中数据转换为的对象，可以理解为json</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/insert"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/insert"</span><span class="token punctuation">,</span> student<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/queryById/"</span> <span class="token operator">+</span> no<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postForEntity/getForEntity</p><p>返回对象为ResponseEntity对象，包括响应头信息、响应体信息、响应状态码等，可以通过ResponseEntity对象获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/insert2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">insert2</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/insert"</span><span class="token punctuation">,</span> student<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/query/&#123;no&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CommonResult</span><span class="token punctuation">></span></span> forEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>STUDENT_URL <span class="token operator">+</span> <span class="token string">"/queryById/"</span> <span class="token operator">+</span> no<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**         * getStatusCode：获取状态码         * forEntity.getStatusCode().is1xxInformational();         * forEntity.getStatusCode().is2xxSuccessful():         * forEntity.getStatusCode().is3xxRedirection();         * forEntity.getStatusCode().is4xxClientError();         * forEntity.getStatusCode().is5xxServerError();         *  forEntity.getStatusCode().isError();         * getBody：获取响应体         * getHeaders：获取头信息         * getStatusCodeValue：获取状态码（int型）        */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>forEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> forEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> <span class="token string">"操作失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Ribbon负载策略"><a href="#3-Ribbon负载策略" class="headerlink" title="3.Ribbon负载策略"></a>3.Ribbon负载策略</h3><h4 id="1-自带策略"><a href="#1-自带策略" class="headerlink" title="1.自带策略"></a>1.自带策略</h4><table><thead><tr><th>策略类</th><th>命名</th><th>描述</th></tr></thead><tbody><tr><td>RandomRule</td><td>随机策略</td><td>随机选择server</td></tr><tr><td>RoundRobinRule</td><td>轮询策略</td><td>按照顺序选择server（<strong>ribbon默认策略</strong>）</td></tr><tr><td>RetryRule</td><td>重试策略</td><td>在一个配置时间段内，当选择server不成功，则一直尝试选择一个可用的server</td></tr><tr><td>BestAvailableRule</td><td>最低并发策略</td><td>逐个考察server，如果server断路器打开，则忽略，再选择其中并发链接最低的server</td></tr><tr><td>AvailabilityFilteringRule</td><td>可用过滤策略</td><td>过滤掉一直失败并被标记为circuit tripped的server，过滤掉那些高并发链接的server（active connections超过配置的阈值）</td></tr><tr><td>ResponseTimeWeightedRule</td><td>响应时间加权重策略</td><td>根据server的响应时间分配权重，响应时间越长，权重越低，被选择到的概率也就越低。响应时间越短，权重越高，被选中的概率越高，这个策略很贴切，综合了各种因素，比如：网络，磁盘，io等，都直接影响响应时间</td></tr><tr><td>ZoneAvoidanceRule</td><td>区域权重策略</td><td>综合判断server所在区域的性能，和server的可用性，轮询选择server并且判断一个AWS Zone的运行性能是否可用，剔除不可用的Zone中的所有server</td></tr></tbody></table><h4 id="2-替换策略"><a href="#2-替换策略" class="headerlink" title="2.替换策略"></a>2.替换策略</h4><h5 id="1-注册策略组件"><a href="#1-注册策略组件" class="headerlink" title="1.注册策略组件"></a>1.注册策略组件</h5><p>注册策略组件时，不能于@ComponentScan注解所在类放在同一个包或其所在包的下级中，如SpringBoot主启动类（主启动类的@SpringBootApplication注解包含@ComponentScan注解）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRule</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-选择策略"><a href="#2-选择策略" class="headerlink" title="2.选择策略"></a>2.选择策略</h5><p>在需要的主启动类上添加注解@RibbonClient</p><p>name属性为调用的服务名，configuration属性为选择的配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"http://cloud-payment-service"</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">MyRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMain80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderMain80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-负载均衡服务调用-OpenFeign"><a href="#4-负载均衡服务调用-OpenFeign" class="headerlink" title="4.负载均衡服务调用 - OpenFeign"></a>4.负载均衡服务调用 - OpenFeign</h2><h3 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h3><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/2.2.4.RELEASE/reference/html/">官方文档</a></p><h4 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h4><p>​        Feign旨在使编写 Java Http客户端变得更容易。<br>​        前面在使用 Ribbon+ RestTemplatel时，利用 RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，<strong>往往一个接口会被多处调用，所以通常都会针对毎个微服务自行封装些客户端类来包装这些依赖服努的调用。</strong>所以， Feign在此基础上做了进一步封裝，由他来帮助我们定义和实现依赖服务接口的定义。在 Feign的实现下，<strong>我们需创建一个接口并使用注解的方式来配置它（以前是Dao接口上面标注 Mapper注解现在是个微服务接口上面标注一个Feign注解即可）</strong>，即可完成对服务提供方的接口绑定，简化了使用 Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><p>Feign集成了Rinbon<br>        利用 Ribbon维护了 Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Rboh不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用</p><h4 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h4><p>​        Open Feign是 Spring Cloud在 Feign的基础上支持了 SpringMVC的注解，如@ RequesMapping等等。 OpenFeign的@ FeignClient可以解析SpringMvC的@ RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="1-新建module"><a href="#1-新建module" class="headerlink" title="1.新建module"></a>1.新建module</h4><h4 id="2-pom-xml"><a href="#2-pom-xml" class="headerlink" title="2.pom.xml"></a>2.pom.xml</h4><p>添加openfeign依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-consumer-openfeign-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--引入本地库中的公共模块--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jxy.sprincloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;project.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-application-yml-1"><a href="#3-application-yml-1" class="headerlink" title="3.application.yml"></a>3.application.yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token comment">#微服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>order  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#   数据源基本配置</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment">#   数据源其他配置,默认不起作用需要手动配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#是否将自己注册进eureka server，默认为true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#是否从eureka server抓取已有注册信息，默认为true，单点时无所谓，集群时必须为true才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-主启动类"><a href="#4-主启动类" class="headerlink" title="4.主启动类"></a>4.主启动类</h4><p>在主启动类上添加注解**@EnableFeignClients**</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description:openfeign * @author:靳新宇 * @date : 08-07 09:24 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenFeign80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OpenFeign80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-业务类"><a href="#5-业务类" class="headerlink" title="5.业务类"></a>5.业务类</h4><h5 id="1-业务类接口-FeignClient注解配置调用的服务提供模块。"><a href="#1-业务类接口-FeignClient注解配置调用的服务提供模块。" class="headerlink" title="1.业务类接口+@FeignClient注解配置调用的服务提供模块。"></a>1.业务类接口+@FeignClient注解配置调用的服务提供模块。</h5><p>添加service层接口（于Ribbon不同，Ribbon并不需要接口，但需要添加@RestTemplate组件）；</p><p>由于没有实现类，要在接口上添加@Component注解；</p><p>同时使用@FeignClient注解声明使用OpenFeign，value值为对应的服务的服务名。</p><p>方法上的url为调用的服务中对应的url</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cloud-payment-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConsumerService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/discovery"</span><span class="token punctuation">)</span>    <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-controller控制层"><a href="#2-controller控制层" class="headerlink" title="2.controller控制层"></a>2.controller控制层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description:OpenFeign控制层 * @author:靳新宇 * @date : 08-07 09:35 */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取Service层Bean</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ConsumerService</span> consumerService<span class="token punctuation">;</span>    <span class="token comment">//直接使用Service层Bean调用对应方法</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"comsumer/discovery"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-超时控制"><a href="#3-超时控制" class="headerlink" title="3.超时控制"></a>3.超时控制</h3><p>​        OpenFeign底层使用的为Ribbon,默认等待响应时长为1s，更改时，我们可以通过配置Ribbon进行更改,也可以通过feign或hystrix进行配置</p><h4 id="1-测试"><a href="#1-测试" class="headerlink" title="1.测试"></a>1.测试</h4><p>编写一个请求，让其沉睡3s，测试，通过直接访问可以进行访问，但通过OpenFeign会报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/timeout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> serverPort<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/timeout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//一般默认等待时间为1s</span>    <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>直接访问</strong></p><p><img src="G:\笔记\SpringCloud\图片\直接访问.png"></p><p><strong>通过OpenFeign访问</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210648.png"></p><h4 id="2-超时设置"><a href="#2-超时设置" class="headerlink" title="2.超时设置"></a>2.超时设置</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">########################################方式一#########################################</span><span class="token comment">#设置超时时间，ribbon/feign/openfeign通用</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token comment">#设置建立连接后从服务器读取到可用资源所用的时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment">#设置建立连接所用时间，适用于网络情况正常的情况下，两端连接所用时间</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token comment">########################################方式二#########################################</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token comment">#设置建立连接所用时间，适用于网络情况正常的情况下，两端连接所用时间</span>        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment">#设置建立连接后从服务器读取到可用资源所用的时间</span>        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token comment">########################################方式三#########################################        </span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210700.png"></p><h3 id="4-日志增强"><a href="#4-日志增强" class="headerlink" title="4.日志增强"></a>4.日志增强</h3><p><strong>日志级别</strong></p><p>NONE：默认的，不显示任何日志；<br>BASIC：仅记录请求方法、URL、响应状态码及执行时间<br>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息<br>FUL：除了 HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token comment">#feign以哪个级别监视哪个包</span>    <span class="token key atrule">com.jxy.springcloud.service</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description:OpenFeign日志配置 * @author:靳新宇 * @date : 08-07 12:04 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token class-name">Level</span> <span class="token function">feignLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token class-name">Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210723.png"></p><h2 id="5-服务降级-Hystrix"><a href="#5-服务降级-Hystrix" class="headerlink" title="5.服务降级 - Hystrix"></a>5.服务降级 - Hystrix</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><h4 id="1-服务雪崩"><a href="#1-服务雪崩" class="headerlink" title="1.服务雪崩"></a>1.服务雪崩</h4><p>​        多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所<br>谓的“雪崩效应”。</p><p>​        对于高流量的应用来说，单的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><p>​        所以，通常当你发现—个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p><h4 id="2-Hystrⅸ"><a href="#2-Hystrⅸ" class="headerlink" title="2.Hystrⅸ"></a>2.Hystrⅸ</h4><p>​        Hystrⅸ是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrⅸ能够保证在—个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>​        断路器″本身是_种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（ FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h4 id="3-服务降级FallBack"><a href="#3-服务降级FallBack" class="headerlink" title="3.服务降级FallBack"></a>3.服务降级FallBack</h4><p>​        服务降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。</p><p><strong>服务降级产生原因</strong></p><p>1.程序运行异常</p><p>2.超时</p><p>3.服务熔断触发服务降级</p><p>4.线程池/信号量打满也会导致服务降级</p><h4 id="4-服务熔断"><a href="#4-服务熔断" class="headerlink" title="4.服务熔断"></a>4.服务熔断</h4><p>​        服务熔断的作用类似于我们家用的保险丝，当某服务出现不可用或响应超时的情况时，为了防止整个系统出现雪崩，暂时停止对该服务的调用。</p><p>​        <strong>熔断机制</strong>是应对服务雪崩效应的一种微服务链路保护机制，当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息。当检测到该节点微服务响应正常后恢复调用链路。</p><p>​        在SpringCloud框架机制通过Hystrix实现，Hystrix会监控微服务见调用的状况，当失败的调用到一个阈值，缺省是5秒内20次调用失败就会启动熔断机制，熔断机制的注解是@HystrixCommand。</p><p>服务降级 -&gt;  服务熔断 -&gt;  逐渐恢复</p><h4 id="5-服务限流"><a href="#5-服务限流" class="headerlink" title="5.服务限流"></a>5.服务限流</h4><p>​        高并发操作时，限制单位时间内调用服务的次数。</p><h3 id="2-依赖"><a href="#2-依赖" class="headerlink" title="2.依赖"></a>2.依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-服务降级"><a href="#3-服务降级" class="headerlink" title="3.服务降级"></a>3.服务降级</h3><p>​        当出现服务降级情况时，可以通过Hystrix配置保底方案。可以作用于客户端，也可以作用于服务端，但一般情况下，在客户端进行配置。</p><h4 id="1-单例服务降级"><a href="#1-单例服务降级" class="headerlink" title="1.单例服务降级"></a>1.单例服务降级</h4><h5 id="1-配置在服务端"><a href="#1-配置在服务端" class="headerlink" title="1.配置在服务端"></a>1.配置在服务端</h5><p>1.添加依赖</p><p>2.在主启动类上添加注解@EnableCircuitBreaker</p><p>3.在业务层(service层实现类)配置保底方案，在需要保底的业务上添加注解@HystrixCommand进行配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 一般放在客户端（80端口） * @HystrixCommand:设置服务降级时的处理(运行异常，超时异常都可以） * fallbackMethod：服务降级时，保底方案 * commandProperties：设置正常情况 * name="execution.isolation.thread.timeoutInMilliseconds",value = "3000"：线程三秒内执行为正常情况*/</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//设置休眠五秒，超过注解中设置的3s</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//服务降级保底方案</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"服务器繁忙，请稍后再试"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-配置在客户端"><a href="#2-配置在客户端" class="headerlink" title="2.配置在客户端"></a>2.配置在客户端</h5><p>1.添加依赖</p><p>2.添加配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.在启动类上添加注解@EnableHystrix</p><p>4.在业务上进行配置，及添加保底业务(controller层)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/timeout"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//程序运行异常</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"    80服务器繁忙，请稍后再试"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-全局服务降级"><a href="#2-全局服务降级" class="headerlink" title="2.全局服务降级"></a>2.全局服务降级</h4><p>​        同一处理一个业务类中的所有降级行为，如果一个服务出现降级，且有**@HystrixCommand**注解，如果配置了专有的降级处理，则使用专有的降级方法，如果未配置，则使用全局的降级处理。</p><h5 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h5><p><strong>1.编写处理方法</strong></p><p><strong>2.添加全局注解</strong></p><p>在类上添加注解**@DefaultProperties(defaultFallback = “方法名”)<strong>，并使用</strong>defaultFallback**属性指明处理方法。</p><p><strong>3.添加注解</strong></p><p>在需要使用全局处理的方法上添加注解**@HystrixCommand**</p><h5 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"allError"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取Service层Bean</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ConsumerService</span> consumerService<span class="token punctuation">;</span>    <span class="token comment">//直接使用Service层Bean调用对应方法</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"comsumer/discovery"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/timeout"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"1000"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//一般默认等待时间为1s</span>        <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testExecption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//一般默认等待时间为1s</span>        <span class="token keyword">return</span> consumerService<span class="token punctuation">.</span><span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"    80服务器繁忙，请稍后再试"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">allError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"    allErro     服务器繁忙，请稍后再试"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-通用服务降级"><a href="#3-通用服务降级" class="headerlink" title="3.通用服务降级"></a>3.通用服务降级</h4><p>主要用于服务器宕机 </p><h5 id="1-步骤-1"><a href="#1-步骤-1" class="headerlink" title="1.步骤"></a>1.步骤</h5><p><strong>1.编写service接口实现类</strong></p><p>实现类要添加@Conp</p><p><strong>2.在实现类中实现降级处理</strong></p><p><strong>3.将该实现类配置在接口中@FeignClient注解的fallback属性中</strong></p><p>@FeignClient(value = “服务名”,fallback = 实现类类名.class)</p><p><strong>4.配置中开启</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-示例-1"><a href="#2-示例-1" class="headerlink" title="2.示例"></a>2.示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description:通用服务降级 * @author:靳新宇 * @date : 08-08 08:33 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ConsumerService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"服务器故障"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ConsumerServiceImpl---宕机"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ConsumerServiceImpl---超时"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cloud-payment-service"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">ConsumerServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConsumerService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/queryById/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/discovery"</span><span class="token punctuation">)</span>    <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/timeout"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">testTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-服务熔断-1"><a href="#4-服务熔断-1" class="headerlink" title="4.服务熔断"></a>4.服务熔断</h3><p>熔断打开：请求不再进行调用当的服务，内部设置时钟一般为MTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态<br>熔断关闭：榕断关闭不会对服务进行熔断<br>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//*************************服务熔断*****************</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"testError"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//是否开启断路器</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//请求次数</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//时间窗口期（失败后重试睡眠时间）</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//失败率上限</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>no<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"***************参数不能为负数**************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">+</span><span class="token string">"操作成功"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testError</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"参数不能为负数，请重试"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test/&#123;no&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">myTest</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><p>多次失败之后，当失败率超过百分之六十时，换为正确的url也会出现错误信息，知道过一会才会成功显示</p><h3 id="5-服务限流-1"><a href="#5-服务限流-1" class="headerlink" title="5.服务限流"></a>5.服务限流</h3><h3 id="6-服务监控hystrixDashboard"><a href="#6-服务监控hystrixDashboard" class="headerlink" title="6.服务监控hystrixDashboard"></a>6.服务监控hystrixDashboard</h3><p>​        除了隔离依赖服务的调用以外， Hystⅸ还提供了准实时的调用监控（ Hystrⅸ Dashboard）， Hystriⅸx会持续地记录所有通过 Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。 Netflix通过hystrix- metrIcs- event- -stream项目实现了对以上指标的监控。 Spring Cloud也提供了 Hystrixκ Dashboard的整合，对监控内容转化成可视化界面。</p><p>1.建立监控服务Moudle</p><p>2.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.application.yml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.主启动类</p><p>添加**@EnableHystrixDashboard**注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description:Hystrix可视化界面 * @author:靳新宇 * @date : 08-08 10:21 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashBoard9001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HystrixDashBoard9001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被监视主启动类添加组件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.jxy.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 此置是为了服务监控而配置，与服务容错本身无关，Springcloud升级后的坑     * ServletRegistrationBean因为springboot的默认路径不是"/ hystrix.stream"，     * 只要在自已的项日里配置上下面的servlet就可以了     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HystrixMetricsStreamServlet</span> streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.被监控服务要添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6.查看可视化界面<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210742.png"></p><p>7.测试</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210748.png"></p><h2 id="6-路由网关-Gateway"><a href="#6-路由网关-Gateway" class="headerlink" title="6.路由网关 - Gateway"></a>6.路由网关 - Gateway</h2><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.4.RELEASE/reference/html/">官方文档</a></p><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        由于有如此众多的客户端和服务器，在云体系结构中包括一个API网关通常会很有帮助。网关可以负责保护和路由消息，隐藏服务，限制负载以及许多其他有用的事情。Spring Cloud Gateway可以精确控制API层，集成Spring Cloud服务发现和客户端负载平衡解决方案以简化配置和维护。</p><p>​        API网关可以帮助您解决这些问题以及更多问题。它是一个功能强大的架构工具，可用于管理微服务架构中的消息路由，过滤和代理。许多API管理网关都可以追溯到SOA，并且这些网关通常已实现为集中式服务器。但是，随着微服务变得越来越流行，现代轻量级的独立和分散式微网关应用程序已经出现，例如Spring Cloud Gateway。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210755.png"></p><h3 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2.核心概念"></a>2.核心概念</h3><h4 id="1-路由Route"><a href="#1-路由Route" class="headerlink" title="1.路由Route"></a>1.路由Route</h4><p>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由。</p><h4 id="2-断言Predicate"><a href="#2-断言Predicate" class="headerlink" title="2.断言Predicate"></a>2.断言Predicate</h4><p>开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由。</p><h4 id="3-过滤Filter"><a href="#3-过滤Filter" class="headerlink" title="3.过滤Filter"></a>3.过滤Filter</h4><p>指的是 Spring框架中 GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</p><h3 id="3-流程"><a href="#3-流程" class="headerlink" title="3.流程"></a>3.流程</h3><p>​        客户端向Spring Cloud Gateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。该处理程序通过特定于请求的过滤器链运行请求。过滤器由虚线分隔的原因是，过滤器可以在发送代理请求之前（”pre”）和之后（”post”）运行逻辑。所有“前置”过滤器逻辑均被执行。然后发出代理请求。发出代理请求后，将运行“后”过滤器逻辑。</p><p> 在没有端口的路由中定义的URI，HTTP和HTTPS URI的默认端口值分别为80和443。</p><p>​        </p><p>Filter在”pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，</p><p>在”post”类型的过滤器中可以做响应内容、晌应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210805.png"></p><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h3><h4 id="1-建立moudle"><a href="#1-建立moudle" class="headerlink" title="1.建立moudle"></a>1.建立moudle</h4><h4 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h4><p>gateway不需要引入web,引入可能会启动失败</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--gateway--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--consul--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--信息收集--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入本地库中的公共模块--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud_api_commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;project.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-application-yml-2"><a href="#3-application-yml-2" class="headerlink" title="3.application.yml"></a>3.application.yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-主启动类-1"><a href="#4-主启动类-1" class="headerlink" title="4.主启动类"></a>4.主启动类</h4><h4 id="5-配置路由"><a href="#5-配置路由" class="headerlink" title="5.配置路由"></a>5.配置路由</h4><p>方法一：配置文件配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token comment">#***********************************配置路由*****************************************#</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh           <span class="token comment">#路由id,建议起名时与服务名相关</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>  <span class="token comment">#匹配的服务地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/queryById/<span class="token important">**</span><span class="token punctuation">,</span>同一uri下的路径<span class="token punctuation">,</span><span class="token punctuation">...</span>      <span class="token comment">#断言，路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> id2          <span class="token key atrule">uri</span><span class="token punctuation">:</span> uri2          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=<span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：配置类配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">costomRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> routeLocatorBuilder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RouteLocatorBuilder</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> routes <span class="token operator">=</span> routeLocatorBuilder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"con"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/con"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-配置动态路由"><a href="#5-配置动态路由" class="headerlink" title="5.配置动态路由"></a>5.配置动态路由</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由,默认为true可以省略</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh           <span class="token comment">#路由id,建议起名时与服务名相关</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token comment">#匹配的服务地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/queryById/<span class="token important">**</span>      <span class="token comment">#断言，路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/discovery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-断言"><a href="#6-断言" class="headerlink" title="6.断言"></a>6.断言</h3><p>SpringCloud共提供了11种路由断言工厂，<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.4.RELEASE/reference/html/#gateway-request-predicates-factories">官方文档</a></p><p>获取时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ZonedDateTime</span> time<span class="token operator">=</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-After"><a href="#1-After" class="headerlink" title="1.After"></a>1.After</h4><p>The After Route Predicate Factory</p><p>After路由断言工厂，其参数为ZonedDateTime日期类型，该断言匹配在指定ZonedDateTime日期时间<strong>之后</strong>发生的请求。</p><p><strong>示例</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Path=/queryById/<span class="token important">**</span><span class="token punctuation">,</span> /discovery     <span class="token comment">#断言，路径相匹配的进行路由</span><span class="token punctuation">-</span> After=2020<span class="token punctuation">-</span>08<span class="token punctuation">-</span>09T16<span class="token punctuation">:</span>42<span class="token punctuation">:</span>39.095+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试：</p><p>42分39秒之前访问，显示404，之后访问正常</p><h4 id="2-Before"><a href="#2-Before" class="headerlink" title="2.Before"></a>2.Before</h4><p>The Before Route Predicate Factory</p><p>Before 路由断言工厂，其参数为ZonedDateTime日期类型，该断言匹配在指定ZonedDateTime时间<strong>之前</strong>发生的请求。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Path=/queryById/<span class="token important">**</span><span class="token punctuation">,</span> /discovery     <span class="token comment">#断言，路径相匹配的进行路由</span><span class="token punctuation">-</span> Before =2020<span class="token punctuation">-</span>08<span class="token punctuation">-</span>09T16<span class="token punctuation">:</span>42<span class="token punctuation">:</span>39.095+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-Between"><a href="#3-Between" class="headerlink" title="3.Between"></a>3.Between</h4><p>The Between Route Predicate Factory</p><p>Between 路由断言工厂，其有两个参数为ZonedDateTime日期类型，该断言匹配在两个指定ZonedDateTime时间<strong>之间</strong>发生的请求。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> Between=2020<span class="token punctuation">-</span>08<span class="token punctuation">-</span>09T16<span class="token punctuation">:</span>42<span class="token punctuation">:</span>39.095+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span><span class="token punctuation">,</span> 2020<span class="token punctuation">-</span>08<span class="token punctuation">-</span>09T17<span class="token punctuation">:</span>42<span class="token punctuation">:</span>39.095+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-Cookie"><a href="#4-Cookie" class="headerlink" title="4.Cookie"></a>4.Cookie</h4><p>The Cookie Route Predicate Factory</p><p>Cookie 路由断言工厂，其有两个参数为name与正则表达式，该断言匹配具有给定名称且其值与正则表达式匹配的cookie。</p><p><strong>示例</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Path=/queryById/<span class="token important">**</span><span class="token punctuation">,</span> /discovery     <span class="token comment">#断言，路径相匹配的进行路由</span><span class="token punctuation">-</span> Cookie=name<span class="token punctuation">,</span>zs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用curl指令测试</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210817.png"></p><p>cookie中检测不到这对键值对时会报404</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210822.png"></p><h4 id="5-Header"><a href="#5-Header" class="headerlink" title="5.Header"></a>5.Header</h4><p>The Header Route Predicate Factory</p><p><strong>示例</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Path=/queryById/<span class="token important">**</span><span class="token punctuation">,</span> /discovery     <span class="token comment">#断言，路径相匹配的进行路由</span><span class="token punctuation">-</span> Header=r<span class="token punctuation">-</span>id<span class="token punctuation">,</span>\d+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用curl指令测试</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210829.png"></p><h4 id="6-Host"><a href="#6-Host" class="headerlink" title="6.Host"></a>6.Host</h4><p>The Host Route Predicate Factory</p><p>主机</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> Host=<span class="token important">**.somehost.org</span><span class="token punctuation">,</span><span class="token important">**.anotherhost.org</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-Method"><a href="#7-Method" class="headerlink" title="7.Method"></a>7.Method</h4><p>The Method Route Predicate Factory</p><p>请求方法</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> Method =POST<span class="token punctuation">,</span>GET<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-Path"><a href="#8-Path" class="headerlink" title="8.Path"></a>8.Path</h4><p>The Path Route Predicate Factory</p><p>路径</p><h4 id="9-Query"><a href="#9-Query" class="headerlink" title="9.Query"></a>9.Query</h4><p>The Query Route Predicate Factory</p><p>查询</p><p>如果请求包含<code>green</code>查询参数，则前面的路由匹配。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> Query=green<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> Query=red<span class="token punctuation">,</span> gree.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-RemoteAddr"><a href="#10-RemoteAddr" class="headerlink" title="10.RemoteAddr"></a>10.RemoteAddr</h4><p>The RemoteAddr Route Predicate Factory</p><p>如果请求的远程地址为，则此路由匹配<code>192.168.1.10</code>。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> RemoteAddr=192.168.1.1/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-Weight"><a href="#11-Weight" class="headerlink" title="11.Weight"></a>11.Weight</h4><p>The Weight Route Predicate Factory</p><p>权重</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> Weight=group1<span class="token punctuation">,</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-过滤"><a href="#7-过滤" class="headerlink" title="7.过滤"></a>7.过滤</h3><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.4.RELEASE/reference/html/#gatewayfilter-factories">官方文档</a></p><p>自定义Filter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description:自定义过滤器 * @author:靳新宇 * @date : 08-09 18:16 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//优先级</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-服务配置-Config"><a href="#7-服务配置-Config" class="headerlink" title="7.服务配置 - Config"></a>7.服务配置 - Config</h2><h3 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h3><p>​        Spring Cloud Config为分布式系统中的外部化配置提供服务器端和客户端支持。使用Config Server，可以在中心位置管理所有环境中应用程序的外部属性。客户端和服务器上的概念与Spring <code>Environment</code>和<code>PropertySource</code>抽象，因此它们非常适合Spring应用程序，但可以与以任何语言运行的任何应用程序一起使用。在应用程序从开发人员到测试人员再到生产人员的整个部署过程中，您可以管理这些环境之间的配置，并确保应用程序具有它们迁移时所需的一切。服务器存储后端的默认实现使用git，因此它轻松支持带标签的配置环境版本，并且可用于管理内容的各种工具。添加替代实现并将其插入Spring配置很容易。</p><h3 id="2-服务端使用"><a href="#2-服务端使用" class="headerlink" title="2.服务端使用"></a>2.服务端使用</h3><h4 id="1-创建Git仓库"><a href="#1-创建Git仓库" class="headerlink" title="1.创建Git仓库"></a>1.创建Git仓库</h4><p>创建一个Git仓库，存储配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img3/20200918210841.png"></p><h4 id="2-创建Config模块"><a href="#2-创建Config模块" class="headerlink" title="2.创建Config模块"></a>2.创建Config模块</h4><h4 id="3-添加依赖"><a href="#3-添加依赖" class="headerlink" title="3.添加依赖"></a>3.添加依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--config-server--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--信息收集--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-application-yml"><a href="#4-application-yml" class="headerlink" title="4.application.yml"></a>4.application.yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token comment">#git仓库地址/经测试使用SSH会失败</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/new<span class="token punctuation">-</span>rain/SpringCloud<span class="token punctuation">-</span>3.git          <span class="token comment">#仓库名</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> SpringCloud<span class="token punctuation">-</span><span class="token number">3</span>      <span class="token comment">#配置文件所在分支</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-主启动类"><a href="#5-主启动类" class="headerlink" title="5.主启动类"></a>5.主启动类</h4><p>添加**@EnableConfigServer**注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @description:SpringCloud-ConfigCenter * @author:靳新宇 * @date : 08-10 08:52 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigCenter3344</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigCenter3344</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918210944.png"></p><p><strong>路径有以下几种写法</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F; &#123;application&#125; &#x2F; &#123;profile&#125; [&#x2F; &#123;label&#125;]&#x2F;&#123;application&#125;-&#123;profile&#125;.yml&#x2F;&#123;label&#125;&#x2F;&#123;application&#125;-&#123;profile&#125;.yml&#x2F;&#123;application&#125;-&#123;profile&#125;.properties&#x2F;&#123;label&#125;&#x2F;&#123;application&#125;-&#123;profile&#125;.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-客户端使用"><a href="#3-客户端使用" class="headerlink" title="3.客户端使用"></a>3.客户端使用</h3><h4 id="1-创建模块-2"><a href="#1-创建模块-2" class="headerlink" title="1.创建模块"></a>1.创建模块</h4><h4 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2.添加依赖"></a>2.添加依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--config--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--config--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--信息收集--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-bootstrap-yml"><a href="#3-bootstrap-yml" class="headerlink" title="3.bootstrap.yml"></a>3.bootstrap.yml</h4><p>applicaiton.yml是用户级的资源配置项</p><p>bootstrap·yml是系统级的，优先级更加高</p><p>Spring Cloud会创建个“ Bootstrap Context”，作为 Spring应用的 Application Context的父上下文。初始化的时候，Bootstrap<br>Context负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的 Environment。</p><p>Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。 Bootstrap context和 Application Contex有着不同的约定<br>，所以新增了一个 bootstrap ym;文件，保证 Bootstrap Context和 Application Context配置的分离。</p><p>要将 Client模块下的 application.ym;文件改为 bootstrap yml这是很关键的，<br>因为 bootstrap yml是比 application.yml先加载的。 bootstrap ym优先级高于 application.yml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment">#配置文件所在分支</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config    <span class="token comment">#文件名</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev    <span class="token comment">#后缀（环境）</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span>  <span class="token comment">#配置中心url</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-主启动类-2"><a href="#4-主启动类-2" class="headerlink" title="4.主启动类"></a>4.主启动类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClient3355</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigClient3355</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;config.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918210952.png"></p><h4 id="6-热启动"><a href="#6-热启动" class="headerlink" title="6.热启动"></a>6.热启动</h4><p>1.添加信息收集/监控依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--信息收集--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.添加监控配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.服务添加@RefreshScope刷新注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;config.info&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.使用curl刷新一下服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">C:\Users\Lenovo&gt; curl -X POST &quot;http:&#x2F;&#x2F;localhost:3355&#x2F;actuator&#x2F;refresh&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4.测试"></a>4.测试</h3><p>将数据库信息放入到config的Git中</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918211000.png"></p><p>修改原本服务的yml配置文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token comment">#服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment">#配置文件所在分支</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config    <span class="token comment">#文件名</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev    <span class="token comment">#后缀（环境）</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span>  <span class="token comment">#配置中心url</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token comment">#  datasource:</span><span class="token comment">#    #   数据源基本配置</span><span class="token comment">#    driver-class-name: com.mysql.jdbc.Driver</span><span class="token comment">#    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8</span><span class="token comment">#    username: root</span><span class="token comment">#    password: "0829"</span><span class="token comment">#    type: com.alibaba.druid.pool.DruidDataSource</span><span class="token comment">#    #   数据源其他配置,默认不起作用需要手动配置</span><span class="token comment">#    initialSize: 5</span><span class="token comment">#    minIdle: 5</span><span class="token comment">#    maxActive: 20</span><span class="token comment">#    maxWait: 60000</span><span class="token comment">#    timeBetweenEvictionRunsMillis: 60000</span><span class="token comment">#    minEvictableIdleTimeMillis: 300000</span><span class="token comment">#    validationQuery: SELECT 1 FROM DUAL</span><span class="token comment">#    testWhileIdle: true</span><span class="token comment">#    testOnBorrow: false</span><span class="token comment">#    testOnReturn: false</span><span class="token comment">#    poolPreparedStatements: true</span><span class="token comment">#    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span><span class="token comment">#    maxPoolPreparedStatementPerConnectionSize: 20</span><span class="token comment">#    useGlobalDataSourceStat: true</span><span class="token comment">#    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：运行正常</p><h2 id="8-消息总线-Bus"><a href="#8-消息总线-Bus" class="headerlink" title="8.消息总线 - Bus"></a>8.消息总线 - Bus</h2><h3 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1.简介"></a>1.简介</h3><p>​        Spring Cloud Bus将分布式系统的节点与轻量级消息代理链接。这可以用于广播状态更改（例如配置更改）或其他管理指令。一个关键的想法是，Bus就像一个扩展的Spring Boot应用程序的分布式执行器，但也可以用作应用程序之间的通信渠道。当前唯一的实现是使用AMQP代理作为传输，但是相同的基本功能集（还有一些取决于传输）在其他传输的路线图上。</p><p>一下采用的方式是将修改的信息传递给服务端，有服务端传递给其他客户端。</p><h3 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h4><p>1.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--bus--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--bus--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--config--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--信息收集--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.添加配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#配置rabbitmq</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.109.128    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'bus-refresh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token comment">#git仓库地址/经测试使用SSH会失败</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/new<span class="token punctuation">-</span>rain/SpringCloud<span class="token punctuation">-</span>3.git          <span class="token comment">#仓库名</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> SpringCloud<span class="token punctuation">-</span><span class="token number">3</span>      <span class="token comment">#配置文件所在分支</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master<span class="token comment">#配置rabbitmq</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.109.128    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'bus-refresh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h4><p>1.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--bus--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--bus--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--config--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--信息收集--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.添加配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#配置rabbitmq</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.109.128    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment">#配置文件所在分支</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config    <span class="token comment">#文件名</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev    <span class="token comment">#后缀（环境）</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span>  <span class="token comment">#配置中心url</span><span class="token comment">#配置rabbitmq</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.109.128    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h4><p>1.修改Git中的文件</p><p>2.刷新3344端口</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -X POST &quot;http:&#x2F;&#x2F;localhost:3344&#x2F;actuator&#x2F;bus-refresh&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.结果</p><p>刷新3344页面后，所有服务都刷新</p><p><strong>局部刷新</strong></p><p>刷新时添加参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -X POST &quot;http:&#x2F;&#x2F;localhost:服务端口号&#x2F;actuator&#x2F;bus-refresh&#x2F;客户端服务名:端口号&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -X POST &quot;http:&#x2F;&#x2F;localhost:3344&#x2F;actuator&#x2F;bus-refresh&#x2F;cloud-config-client:3355&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-链路调用-zipkin"><a href="#9-链路调用-zipkin" class="headerlink" title="9.链路调用 - zipkin"></a>9.链路调用 - zipkin</h2><h3 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h3><p><a href="http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p><h3 id="2-运行"><a href="#2-运行" class="headerlink" title="2.运行"></a>2.运行</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918211018.png"></p><p><strong>验证</strong></p><p>打开出现一下界面</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918211028.png"></p><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><h4 id="1-导入依赖-1"><a href="#1-导入依赖-1" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--zipkin--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">zipkin</span><span class="token punctuation">:</span>    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token comment">#采样率介于0 - 1 ，1表示全部采集</span>      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token comment">#服务名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token comment">#采样率介于0 - 1 ，1表示全部采集，一般设置为0.5</span>      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment">#配置文件所在分支</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config    <span class="token comment">#文件名</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev    <span class="token comment">#后缀（环境）</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span>  <span class="token comment">#配置中心url</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#   数据源基本配置</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment">#   数据源其他配置,默认不起作用需要手动配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918211041.png"></p><h1 id="3-SpringCloud-Alibaba"><a href="#3-SpringCloud-Alibaba" class="headerlink" title="3.SpringCloud Alibaba"></a>3.SpringCloud Alibaba</h1><p><a href="https://gitee.com/mirrors/Spring-Cloud-Alibaba?_from=gitee_search">Gitee地址</a>     <a href="https://github.com/alibaba/spring-cloud-alibaba">Github地址</a>   <a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html#_introduction">spring官方文档</a></p><p>目前 Spring Cloud Alibaba 提供了如下功能:</p><ol><li><strong>服务限流降级</strong>：支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Dubbo 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>Rpc服务</strong>：扩展 Spring Cloud 客户端 RestTemplate 和 OpenFeign，支持调用 Dubbo RPC 服务</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ol><p><strong>依赖</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-服务注册与配置中心-Nacos"><a href="#1-服务注册与配置中心-Nacos" class="headerlink" title="1.服务注册与配置中心 - Nacos"></a>1.服务注册与配置中心 - Nacos</h2><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>注册中心+配置中心</p><p>官网：<a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p><h3 id="1-Nacos-服务注册中心"><a href="#1-Nacos-服务注册中心" class="headerlink" title="1.Nacos - 服务注册中心"></a>1.Nacos - 服务注册中心</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p>下载地址：<a href="https://github.com/alibaba/nacos/releases/tag/1.3.2">https://github.com/alibaba/nacos/releases/tag/1.3.2</a></p><h4 id="2-运行-1"><a href="#2-运行-1" class="headerlink" title="2.运行"></a>2.运行</h4><p>在Nacos安装目录下的bin目录中代开cmd，运行stratup.cmd文件</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918211049.png"></p><p>打开网页界面<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p>登录，账号密码均为nacos</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/20200918211054.png"></p><h4 id="3-使用-1"><a href="#3-使用-1" class="headerlink" title="3.使用"></a>3.使用</h4><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-添加配置-1"><a href="#2-添加配置-1" class="headerlink" title="2.添加配置"></a>2.添加配置</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完整示例</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-主启动类-2"><a href="#3-主启动类-2" class="headerlink" title="3.主启动类"></a>3.主启动类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Payment9001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Payment9001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4.负载均衡"></a>4.负载均衡</h4><p>Nacos自带负载均衡机制，其内置了Rabbin，其本质还是使用了Rabbin，参考SpringCloud篇 ：负载均衡服务调用 - Ribbon</p><p>使用</p><p>1.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--nacos--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.添加配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>order  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment   <span class="token comment">#将服务路径配置在配置文件中，在需要时通过@Value注解引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Order80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.负载均衡配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;service-url.nacos-user-service&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">ServerURL</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"consumer/query/&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">consumerUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">ServerURL</span><span class="token operator">+</span><span class="token string">"/query/"</span><span class="token operator">+</span>no<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-更多配置"><a href="#5-更多配置" class="headerlink" title="5.更多配置"></a>5.更多配置</h4><table><thead><tr><th>配置项</th><th>Key</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>服务端地址</td><td><code>spring.cloud.nacos.discovery.server-addr</code></td><td></td><td>Nacos Server 启动监听的ip地址和端口</td></tr><tr><td>服务名</td><td><code>spring.cloud.nacos.discovery.service</code></td><td><code>$&#123;spring.application.name&#125;</code></td><td>注册的服务名</td></tr><tr><td>权重</td><td><code>spring.cloud.nacos.discovery.weight</code></td><td><code>1</code></td><td>取值范围 1 到 100，数值越大，权重越大</td></tr><tr><td>网卡名</td><td><code>spring.cloud.nacos.discovery.network-interface</code></td><td></td><td>当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址</td></tr><tr><td>注册的IP地址</td><td><code>spring.cloud.nacos.discovery.ip</code></td><td></td><td>优先级最高</td></tr><tr><td>注册的端口</td><td><code>spring.cloud.nacos.discovery.port</code></td><td><code>-1</code></td><td>默认情况下不用配置，会自动探测</td></tr><tr><td>命名空间</td><td><code>spring.cloud.nacos.discovery.namespace</code></td><td></td><td>常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等</td></tr><tr><td>AccessKey</td><td><code>spring.cloud.nacos.discovery.access-key</code></td><td></td><td>当要上阿里云时，阿里云上面的一个云账号名</td></tr><tr><td>SecretKey</td><td><code>spring.cloud.nacos.discovery.secret-key</code></td><td></td><td>当要上阿里云时，阿里云上面的一个云账号密码</td></tr><tr><td>Metadata</td><td><code>spring.cloud.nacos.discovery.metadata</code></td><td></td><td>使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息</td></tr><tr><td>日志文件名</td><td><code>spring.cloud.nacos.discovery.log-name</code></td><td></td><td></td></tr><tr><td>集群</td><td><code>spring.cloud.nacos.discovery.cluster-name</code></td><td><code>DEFAULT</code></td><td>Nacos集群名称</td></tr><tr><td>接入点</td><td><code>spring.cloud.nacos.discovery.endpoint</code></td><td></td><td>地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</td></tr><tr><td>是否集成Ribbon</td><td><code>ribbon.nacos.enabled</code></td><td><code>true</code></td><td>一般都设置成true即可</td></tr><tr><td>是否开启Nacos Watch</td><td><code>spring.cloud.nacos.discovery.watch.enabled</code></td><td><code>true</code></td><td>可以设置成false来关闭 watch</td></tr></tbody></table><h3 id="2-Nacos-配置中心"><a href="#2-Nacos-配置中心" class="headerlink" title="2.Nacos - 配置中心"></a>2.Nacos - 配置中心</h3><h4 id="1-依赖-1"><a href="#1-依赖-1" class="headerlink" title="1.依赖"></a>1.依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-添加配置文件"><a href="#2-添加配置文件" class="headerlink" title="2.添加配置文件"></a>2.添加配置文件</h4><p>直接在Nacos中添加配置文件</p><p><strong>DataID：</strong>命名规则为：服务名-环境名.文件格式</p><p><strong>Group：</strong>分组名</p><p><strong>namespace：</strong>命名空间</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/nacos-config%E9%85%8D%E7%BD%AE.png"></p><h4 id="3-在服务中配置"><a href="#3-在服务中配置" class="headerlink" title="3.在服务中配置"></a>3.在服务中配置</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#bootstrap.yml</span><span class="token key atrule">config</span><span class="token punctuation">:</span><span class="token comment">#作为配置中心地址</span><span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token comment">#配置文件格式</span><span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml<span class="token comment">#组名</span><span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP<span class="token comment">#命名空间</span><span class="token key atrule">namespace</span><span class="token punctuation">:</span> public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment">#application.yml</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token comment">#选择环境</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3366</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token comment">#作为服务注册中心地址</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token comment">#作为配置中心地址</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token comment">#配置文件格式</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        <span class="token comment">#组名</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP        <span class="token comment">#命名空间</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-寻找方式"><a href="#4-寻找方式" class="headerlink" title="4.寻找方式"></a>4.寻找方式</h4><p>先找到对应的命名空间，在命名空间中找到对应的组，在对应的组中找到对应的配置文件。</p><h3 id="3-Nacos-集群"><a href="#3-Nacos-集群" class="headerlink" title="3.Nacos - 集群"></a>3.Nacos - 集群</h3><h2 id="2-服务熔断与降级-Sentinel"><a href="#2-服务熔断与降级-Sentinel" class="headerlink" title="2.服务熔断与降级 - Sentinel"></a>2.服务熔断与降级 - Sentinel</h2><p><a href="https://github.com/alibaba/sentinel/wiki/%E4%BB%8B%E7%BB%8D">中文文档</a></p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel 具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p><strong>Sentinel 的主要特性</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel.png"></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><h4 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h4><p><a href="https://github.com/alibaba/sentinel/releases">https://github.com/alibaba/sentinel/releases</a></p><h4 id="2-使用-2"><a href="#2-使用-2" class="headerlink" title="2.使用"></a>2.使用</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar sentinel-dashboard-1.7.1.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/20200918211416.png"></p><p>打开8080端口界面</p><p>账号密码sentinel</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%95%8C%E9%9D%A2.png"></p><h3 id="2-实时监控"><a href="#2-实时监控" class="headerlink" title="2.实时监控"></a>2.实时监控</h3><h4 id="1-添加依赖-1"><a href="#1-添加依赖-1" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--后续持久化用到--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--sentinel--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--排除其自带的json工具，否则会返回xml格式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--nacos--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--后续持久化用到--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--sentinel--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--openfeign--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--SpringBoot-web启动器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--信息收集--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-添加配置-2"><a href="#2-添加配置-2" class="headerlink" title="2.添加配置"></a>2.添加配置</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9010</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment">#默认8719,如被占用，加1直至可以使用</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-主启动"><a href="#3-主启动" class="headerlink" title="3.主启动"></a>3.主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentienlService9010</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SentienlService9010</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试用例"><a href="#4-测试用例" class="headerlink" title="4.测试用例"></a>4.测试用例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"--------------------test----------------"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"--------------------test----------------"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h4><p>sentinel使用的是懒加载模式，只有先使用一次服务后，才会对服务进行监控</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%9B%91%E6%8E%A7.png"></p><h3 id="3-流控规则"><a href="#3-流控规则" class="headerlink" title="3.流控规则"></a>3.流控规则</h3><h4 id="1-名词解释"><a href="#1-名词解释" class="headerlink" title="1.名词解释"></a>1.名词解释</h4><p>流控规则：流量限制控制规则。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E6%B7%BB%E5%8A%A0%E9%99%90%E6%B5%81.png"></p><p><strong>资源名：</strong>唯一名称，默认请求路径<br><strong>针对来源：</strong>Sentinel可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）<br><strong>阈值类型/单机阈值</strong><br>    <strong>QPS（每秒钟的请求数量）：</strong>当调用该api的QPS达到阈值的时候，进行限流。(单位时间最大访问数量，超过数量失败)<br>    <strong>线程数：</strong>当调用该ap的线程数达到阈值的时候，进行限流。(单位时间最大处理数量，不限制访问数量，但单位时间只处理指定数量的                    请求，超过数量失败)<br><strong>是否集群：</strong>不需要集群<br><strong>流控模试</strong><br>    <strong>直接：</strong>api达到流条件时，直接限流<br>    <strong>关联：</strong>当关联的资源达到阈值时，就限流自己</p><p>​                <img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E5%85%B3%E8%81%94.png"></p><p>​    <strong>链路：</strong>只记录指定链路上的流量（指定资源从入口资源来的流量，如果达到阈值，就进行限流）【api级别的针对来源】</p><p><strong>流控效果</strong><br>    <strong>快速失败：</strong>直接失败，抛异常：Blocked by Sentinel (flow limiting)</p><p>​    <strong>Warm Up：</strong>根据 cofaCtor冷加载因子（默认3）的值，从阈值/ cofaCtor，经过预热时长，才达到设置的QPS阈值。</p><p>​        如果系统的使用率一段时间以来一直很低，但是突然有大量请求进入，则系统可能无法立即处理所有这些请求。但是，如果我们稳步增加传入的请求并允许系统预热，则它最终可能能够处理所有请求。</p><p>可以通过在中设置<code>warmUpPeriodSec</code>字段来配置预热时间<code>FlowRule</code>。</p><p>​    <strong>排队等待：</strong>匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</p><h4 id="2-添加方式"><a href="#2-添加方式" class="headerlink" title="2.添加方式"></a>2.添加方式</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E6%96%B9%E5%BC%8F%E4%B8%80.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E6%96%B9%E5%BC%8F%E4%BA%8C.png"></p><h4 id="3-测试-2"><a href="#3-测试-2" class="headerlink" title="3.测试"></a>3.测试</h4><p>当超出设置的限制后，sentinel直接（设置的直接）进行阻塞</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E9%99%90%E6%B5%81.png"></p><h3 id="4-降级规则"><a href="#4-降级规则" class="headerlink" title="4.降级规则"></a>4.降级规则</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">官方文档</a></p><p>​        除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。由于调用关系的复杂性，如果调用链路中的某个资源不稳定，最终会导致请求发生堆积。Sentinel <strong>熔断降级</strong>会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 <code>DegradeException</code>）。<strong>没有半开状态。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E9%99%8D%E7%BA%A7.png"></p><ul><li>RT：平均响应时间 (<code>DEGRADE_GRADE_RT</code>)：当 1s 内持续进入 N 个请求，对应时刻的平均响应时间（秒级）均超过阈值（<code>count</code>，以 ms 为单位），那么在接下的时间窗口（<code>DegradeRule</code> 中的 <code>timeWindow</code>，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 <code>DegradeException</code>）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，<strong>超出此阈值的都会算作 4900 ms</strong>，若需要变更此上限可以通过启动配置项 <code>-Dcsp.sentinel.statistic.max.rt=xxx</code> 来配置。</li><li>异常比例 (<code>DEGRADE_GRADE_EXCEPTION_RATIO</code>)：当资源的每秒请求量 &gt;= N（可配置，一般为5），并且每秒异常总数占通过量的比值超过阈值（<code>DegradeRule</code> 中的 <code>count</code>）之后，资源进入降级状态，即在接下的时间窗口（<code>DegradeRule</code> 中的 <code>timeWindow</code>，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</li><li>异常数 (<code>DEGRADE_GRADE_EXCEPTION_COUNT</code>)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 <code>timeWindow</code> 小于 60s，则结束熔断状态后仍可能再进入熔断状态。</li></ul><p>注意：异常降级仅针对业务异常，对 Sentinel 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。</p><h4 id="2-降级策略"><a href="#2-降级策略" class="headerlink" title="2.降级策略"></a>2.降级策略</h4><h5 id="1-RT：平均响应时间"><a href="#1-RT：平均响应时间" class="headerlink" title="1.RT：平均响应时间"></a>1.RT：平均响应时间</h5><p><strong>降级流程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E9%99%8D%E7%BA%A7%E6%B5%81%E7%A8%8B.png"></p><p><strong>降级配置</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinelRT.png"></p><h5 id="2-异常比例"><a href="#2-异常比例" class="headerlink" title="2.异常比例"></a>2.异常比例</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E5%BC%82%E5%B8%B8%E6%AF%94%E4%BE%8B.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E5%BC%82%E5%B8%B8%E6%AF%94%E4%BE%8B%E9%85%8D%E7%BD%AE.png"></p><h5 id="3-异常数量"><a href="#3-异常数量" class="headerlink" title="3.异常数量"></a>3.异常数量</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E5%BC%82%E5%B8%B8%E6%95%B0%E9%87%8F.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E5%BC%82%E5%B8%B8%E6%95%B0%E9%87%8F%E9%85%8D%E7%BD%AE.png"></p><h3 id="5-热点限流"><a href="#5-热点限流" class="headerlink" title="5.热点限流"></a>5.热点限流</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">官方文档</a></p><p>​        热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><h4 id="1-热点参数规则"><a href="#1-热点参数规则" class="headerlink" title="1.热点参数规则"></a>1.热点参数规则</h4><p>热点参数规则（<code>ParamFlowRule</code>）类似于流量控制规则（<code>FlowRule</code>）：</p><table><thead><tr><th>属性</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，必填</td><td></td></tr><tr><td>count</td><td>限流阈值，必填</td><td></td></tr><tr><td>grade</td><td>限流模式</td><td>QPS 模式</td></tr><tr><td>durationInSec</td><td>统计窗口时间长度（单位为秒），1.6.0 版本开始支持</td><td>1s</td></tr><tr><td>controlBehavior</td><td>流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持</td><td>快速失败</td></tr><tr><td>maxQueueingTimeMs</td><td>最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持</td><td>0ms</td></tr><tr><td>paramIdx</td><td>热点参数的索引，必填，对应 <code>SphU.entry(xxx, args)</code> 中的参数索引位置</td><td></td></tr><tr><td>paramFlowItemList</td><td>参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 <code>count</code> 阈值的限制。<strong>仅支持基本类型和字符串类型</strong></td><td></td></tr><tr><td>clusterMode</td><td>是否是集群参数流控规则</td><td><code>false</code></td></tr><tr><td>clusterConfig</td><td>集群流控相关配置</td><td></td></tr></tbody></table><p>我们可以通过 <code>ParamFlowRuleManager</code> 的 <code>loadRules</code> 方法更新热点参数规则</p><h4 id="2-示例-2"><a href="#2-示例-2" class="headerlink" title="2.示例"></a>2.示例</h4><p>示例代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 描述: 热点控制测试 * @SentinelResource：设置解决方法 * value：可随意指定，但必须具有唯一性，一般与地址保持一致 * blockHandler：指定兜底方法,不指定会在前端打印错误信息*/</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"test4"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"deal_test4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p1<span class="token punctuation">,</span>                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"------------------------tedt4-----------------------"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deal_test4</span><span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token class-name">String</span> p2<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"------------------------deal_test4--/(ㄒoㄒ)/~~-----------------------"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.value=test4的请求的第一个参数在一秒内超过一次访问时，限流</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%83%AD%E7%82%B9%E8%AE%BE%E7%BD%AE.png"></p><p><strong>2.设置特殊想项</strong></p><p>value=test4的请求的第一个参数在一秒内超过一次访问时，限流，但当第一个参数等于5时，阈值为200</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%83%AD%E7%82%B9.png"></p><p>正常结果</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%83%AD%E7%82%B9%E6%AD%A3%E5%B8%B8.png"></p><p>限流结果</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%83%AD%E7%82%B9%E5%BC%82%E5%B8%B8.png"></p><h3 id="6-系统自适应限流"><a href="#6-系统自适应限流" class="headerlink" title="6.系统自适应限流"></a>6.系统自适应限流</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">官方文档</a></p><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><p>​        Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><h3 id="7-SentinelResource"><a href="#7-SentinelResource" class="headerlink" title="7.@SentinelResource"></a>7.@SentinelResource</h3><p>设置降级方法</p><h4 id="1-专属降级方法"><a href="#1-专属降级方法" class="headerlink" title="1.专属降级方法"></a>1.专属降级方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"byResource"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"byHandler"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handler"</span><span class="token punctuation">,</span>            exceptionsToIgnore <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"访问成功(●'◡'●)"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byHandler</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"访问失败/(ㄒoㄒ)/~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<strong>blockHandler</strong>属性指定降级方法，只处理降级，不处理服务抛出的异常。</p><p>使用<strong>fallback</strong>处理服务抛出的异常，也可以处理服务降级抛出的BlockException异常。</p><p>当两个都配置时，由<strong>blockHandler</strong>处理服务降级抛出的BlockException异常</p><p><strong>exceptionsToIgnore</strong>忽略某种异常，不对其进行处理</p><h4 id="2-通用降级方法"><a href="#2-通用降级方法" class="headerlink" title="2.通用降级方法"></a>2.通用降级方法</h4><p>新建一个类用来编写降级方法，可以有多个方法，方法必须以static修饰。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//必须使用static修饰</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span> <span class="token function">commonsHandler</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">4004</span><span class="token punctuation">,</span><span class="token string">"访问失败/(ㄒoㄒ)/~~(全局处理---------1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span> <span class="token function">commonsHandler2</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">4004</span><span class="token punctuation">,</span><span class="token string">"访问失败/(ㄒoㄒ)/~~(全局处理---------2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要的地方引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byCommons"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byCommons"</span><span class="token punctuation">,</span>                  blockHandlerClass <span class="token operator">=</span> <span class="token class-name">MyHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"commonsHandler"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byCommons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"访问成功(●'◡'●)"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>blockHandlerClass</strong>属性指定降级方法所在的类，<strong>blockHandler</strong>属性指定类中的处理方法。</p><p>未作处理，直接出现异常</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%86%94%E6%96%AD1.png"></p><p>处理后</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E7%86%94%E6%96%AD2.png"></p><h3 id="8-持久化"><a href="#8-持久化" class="headerlink" title="8.持久化"></a>8.持久化</h3><p>方法：将降级流控规则配置到Nacos配置中心中</p><h4 id="1-依赖-2"><a href="#1-依赖-2" class="headerlink" title="1.依赖"></a>1.依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--后续持久化用到--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在Nacos中添加"><a href="#2-在Nacos中添加" class="headerlink" title="2.在Nacos中添加"></a>2.在Nacos中添加</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/sentinel%E6%8C%81%E4%B9%85%E5%8C%96.png"></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"resource"</span><span class="token operator">:</span><span class="token string">"/byCommons"</span><span class="token punctuation">,</span>        <span class="token property">"limitApp"</span><span class="token operator">:</span><span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token property">"grade"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"count"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"strategy"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"controBehavior"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"clusterMode"</span><span class="token operator">:</span><span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>名词解释</strong></p><p>resource：资源名称；<br>limitApp：来源应用；<br>grade：阈值类型，0表示线程数，1表示QPS；<br>count：单机阈值；<br>strategy：流控模式，0表示直接，1表示关联，2表示链路；<br>controlBehavior：流控效果，0表示快速失败，1表示 Warm Upρ，2表示排队等待；<br>clusterMode：是否集群。</p><h4 id="3添加配置"><a href="#3添加配置" class="headerlink" title="3添加配置"></a>3添加配置</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">datasource</span><span class="token punctuation">:</span><span class="token key atrule">ds1</span><span class="token punctuation">:</span> <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">dataId</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service            <span class="token key atrule">groupId</span><span class="token punctuation">:</span> DEFAULT_GROUP            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9010</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment">#默认8719,如被占用，加1直至可以使用</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">ds1</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">dataId</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service            <span class="token key atrule">groupId</span><span class="token punctuation">:</span> DEFAULT_GROUP            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-分布式事务解决-Seata"><a href="#3-分布式事务解决-Seata" class="headerlink" title="3.分布式事务解决 - Seata"></a>3.分布式事务解决 - Seata</h2><p><a href="http://seata.io/zh-cn/docs/overview/what-is-seata.html">官方文档</a></p><h3 id="1-简介-5"><a href="#1-简介-5" class="headerlink" title="1.简介"></a>1.简介</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.概述"></a>1.概述</h4><p>​        Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h4 id="2-术语"><a href="#2-术语" class="headerlink" title="2.术语"></a>2.术语</h4><p><strong>TC (Transaction Coordinator) - 事务协调者</strong></p><p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><p><strong>TM (Transaction Manager) - 事务管理器</strong></p><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><p><strong>RM (Resource Manager) - 资源管理器</strong></p><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><h4 id="3-流程-1"><a href="#3-流程-1" class="headerlink" title="3.流程"></a>3.流程</h4><p>1.TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的ⅪD<br>2.ⅪD在微服务调用链路的上下文中传播；<br>3.RM向TC注册分支事务，将其纳入ⅪD对应全局事务的管辖；<br>4.TM向TC发起针对XD的全局提交或回滚决议；<br>5.TC调度ⅪD下管辖的全部分支事务完成提交或回滚请求。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/seata%E6%B5%81%E7%A8%8B1.png"></p><p><strong>示例</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/seata%E6%B5%81%E7%A8%8B.png"></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><h4 id="1-下载-2"><a href="#1-下载-2" class="headerlink" title="1.下载"></a>1.下载</h4><p><a href="http://seata.io/zh-cn/blog/download.html">下载地址</a></p><h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h4><h5 id="1-file-conf"><a href="#1-file-conf" class="headerlink" title="1.file.conf"></a>1.file.conf</h5><h6 id="1-自定义事务组名称"><a href="#1-自定义事务组名称" class="headerlink" title="1.自定义事务组名称"></a>1.自定义事务组名称</h6><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">vgroup_mapping.my_test_tx_group &#x3D; &quot;jxy_tx_group&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="2-设置事务存储模式为db"><a href="#2-设置事务存储模式为db" class="headerlink" title="2.设置事务存储模式为db"></a>2.设置事务存储模式为db</h6><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">store &#123;  ## store mode: file、db  #设置事务存储模式为db  mode &#x3D; &quot;db&quot;  ## file store property  file &#123;    ## store location dir    dir &#x3D; &quot;sessionStore&quot;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-配置数据库信息"><a href="#3-配置数据库信息" class="headerlink" title="3.配置数据库信息"></a>3.配置数据库信息</h6><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata&quot;user &#x3D; &quot;root&quot;password &#x3D; &quot;0829&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="4-完整示例"><a href="#4-完整示例" class="headerlink" title="4.完整示例"></a>4.完整示例</h6><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">service &#123;  #transaction service group mapping  #自定义事务组名称  #vgroup_mapping.my_test_tx_group &#x3D; &quot;default&quot;  vgroup_mapping.my_test_tx_group &#x3D; &quot;jxy_tx_group&quot;  #only support when registry.type&#x3D;file, please don&#39;t set multiple addresses  default.grouplist &#x3D; &quot;127.0.0.1:8091&quot;  #disable seata  disableGlobalTransaction &#x3D; false&#125;## transaction log store, only used in seata-serverstore &#123;  ## store mode: file、db  #设置事务存储模式为db  mode &#x3D; &quot;db&quot;  ## file store property  file &#123;    ## store location dir    dir &#x3D; &quot;sessionStore&quot;  &#125;  ## database store property  #配置数据库信息  db &#123;    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)&#x2F;BasicDataSource(dbcp) etc.    datasource &#x3D; &quot;dbcp&quot;    ## mysql&#x2F;oracle&#x2F;h2&#x2F;oceanbase etc.    db-type &#x3D; &quot;mysql&quot;    driver-class-name &#x3D; &quot;com.mysql.jdbc.Driver&quot;    url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata&quot;    user &#x3D; &quot;root&quot;    password &#x3D; &quot;0829&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-新建设置的数据库及表"><a href="#5-新建设置的数据库及表" class="headerlink" title="5.新建设置的数据库及表"></a>5.新建设置的数据库及表</h6><p>新建数据库</p><p>github上文件所在位置script/server/db</p><p>执行db_store.sql/mysql.sql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- -------------------------------- The script used when storeMode is 'db' --------------------------------</span><span class="token comment">-- the table to store GlobalSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>                       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>            <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>                    <span class="token keyword">TINYINT</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span>                   <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span>                <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>                <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>              <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment">-- the table to store BranchSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>         <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>               <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>    <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>            <span class="token keyword">TINYINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span>         <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>        <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>      <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment">-- the table to store lock data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span>        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>      <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pk<span class="token punctuation">`</span>             <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>     <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_branch_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-register-conf"><a href="#2-register-conf" class="headerlink" title="2.register.conf"></a>2.register.conf</h5><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">registry &#123;  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  #*******修改**********  type &#x3D; &quot;nacos&quot;  nacos &#123;  #*******修改**********    serverAddr &#x3D; &quot;localhost:8848&quot;    namespace &#x3D; &quot;&quot;    cluster &#x3D; &quot;default&quot;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h4><p>需要先启动Nacos</p><p>执行bin目录下的seata-server.bat</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="2020/09/18/SpringBoot/"/>
      <url>2020/09/18/SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>​        spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><a id="more"></a><h1 id="1-SpringBoot入门"><a href="#1-SpringBoot入门" class="headerlink" title="1.SpringBoot入门"></a>1.SpringBoot入门</h1><h2 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1.SpringBoot简介"></a>1.SpringBoot简介</h2><h3 id="1-设计目的"><a href="#1-设计目的" class="headerlink" title="1.设计目的"></a>1.设计目的</h3><p>​        通过约定优于配置的理念，进一步简化了Spring应用的整个搭建和开发过程。避免了大量的XML配置。</p><p>​        SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。</p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><p>（1）可以创建独立的Spring应用程序，并且基于其Maven或Gradle插件，可以创建可执行的jar和war包；</p><p>（2）内嵌Tomcat或Jetty等Servlet容器；</p><p>（3）提供自动配置的“starter”项目对象模型（POMS）以简化Maven配置；</p><p>（4）尽可能自动配置Spring容器；</p><p>（5）提供准备好的特性，如指标、健康检查和外部化配置；</p><p>（6）绝对没有代码生成，不需要XML配置</p><h3 id="3-要求"><a href="#3-要求" class="headerlink" title="3.要求"></a>3.要求</h3><p>JDK8以上，JDK8以下会出现编译错误</p><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><p><strong>SpringBoot可以使用 properties 与 yaml 两种配置文件格式</strong></p><p><strong>properties与yaml文件共存产生冲突时properties文件优先级更高</strong></p><h3 id="1-yml配置文件"><a href="#1-yml配置文件" class="headerlink" title="1.yml配置文件"></a>1.yml配置文件</h3><p>yml文件书写更方便，使用更简单，功能更强大。</p><h4 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>k: (空格)v：表示一对键值对（<strong>空格必须有</strong>）</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的，所以yml文件对缩进有着严格的要求</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>属性和值也是大小写敏感；</p><h4 id="2-语法对比"><a href="#2-语法对比" class="headerlink" title="2.语法对比"></a>2.语法对比</h4><h5 id="1-yml"><a href="#1-yml" class="headerlink" title="1.yml"></a>1.yml</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">path</span><span class="token punctuation">:</span> /<span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-properties"><a href="#2-properties" class="headerlink" title="2.properties"></a>2.properties</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">server.path</span><span class="token punctuation">=</span><span class="token attr-value">/...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-xml"><a href="#3-xml" class="headerlink" title="3.xml"></a>3.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-赋值"><a href="#3-赋值" class="headerlink" title="3.赋值"></a>3.赋值</h4><h5 id="1-简单类型"><a href="#1-简单类型" class="headerlink" title="1.简单类型"></a>1.简单类型</h5><p>8个基本类型加String</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">k</span><span class="token punctuation">:</span> v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.字符串默认不用加上单引号或者双引号；</p><p>2.<code>&quot;&quot;</code>：双引号中特殊字符会作为本身想表示的意思</p><p>​          例：name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>3.<code>&#39;&#39;</code>：单引号中所有字符会原样输出</p><p>​          例:name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h5 id="2-对象类型"><a href="#2-对象类型" class="headerlink" title="2.对象类型"></a>2.对象类型</h5><p><strong>1.普通方式</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">对象名</span><span class="token punctuation">:</span><span class="token key atrule">属性名</span><span class="token punctuation">:</span> 属性值<span class="token key atrule">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.行内写法</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">对象名</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">,</span><span class="token key atrule">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-Map类型"><a href="#3-Map类型" class="headerlink" title="3.Map类型"></a>3.Map类型</h5><p><strong>1.普通方式</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">Map名</span><span class="token punctuation">:</span><span class="token key atrule">k</span><span class="token punctuation">:</span> v<span class="token key atrule">k</span><span class="token punctuation">:</span> v<span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.行内写法</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">Map名</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">k</span><span class="token punctuation">:</span> v<span class="token punctuation">,</span><span class="token key atrule">k</span><span class="token punctuation">:</span> v<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-数组、List集合"><a href="#4-数组、List集合" class="headerlink" title="4.数组、List集合"></a>4.数组、List集合</h5><p><strong>1.普通方式</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">数组、集合名</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> 值1 <span class="token punctuation">-</span> 值2 <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.行内写法</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">数组、集合名</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>值1<span class="token punctuation">,</span>值2<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-值注入"><a href="#2-值注入" class="headerlink" title="2.值注入"></a>2.值注入</h3><p>我们可以导入配置文件处理器，配置文件进行绑定就会有提示</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-ConfigurationProperties"><a href="#1-ConfigurationProperties" class="headerlink" title="1.@ConfigurationProperties"></a>1.@ConfigurationProperties</h4><p>加载配置文件中指定的数据</p><h5 id="1-yml-1"><a href="#1-yml-1" class="headerlink" title="1.yml"></a>1.yml</h5><p>配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">111</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> 靳新宇  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">22</span>  <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 1998/08/29  <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>      <span class="token comment">#行内写法</span>  <span class="token key atrule">list</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> code                 <span class="token comment">#普通写法</span>    <span class="token punctuation">-</span> play    <span class="token punctuation">-</span> study  <span class="token key atrule">student</span><span class="token punctuation">:</span>                 <span class="token comment">#对象中的对象</span>    <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">11</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> jxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>javaBean：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； * */</span><span class="token class-name">Person</span><span class="token punctuation">.</span>java<span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token comment">//连接yml文件中的配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Studnet</span><span class="token punctuation">.</span>java<span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span>          <span class="token comment">//可以使用普通方式给bean注入属性值:Value("...")</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"jxy"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-properties-1"><a href="#2-properties-1" class="headerlink" title="2.properties"></a>2.properties</h5><p>idea中默认utf-8可能会乱码，properties配置文件需要转换为ascil码</p><p><strong>调整setting-Editor-File Encodings</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/properties%E7%BC%96%E7%A0%81.png"></p><p>properties形式赋值</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">person.1ast-name</span><span class="token punctuation">=</span><span class="token attr-value">张</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">18</span><span class="token attr-name">person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2017/12/15</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">person.maps.kl</span><span class="token punctuation">=</span><span class="token attr-value">v1</span><span class="token attr-name">person.maps.k2</span><span class="token punctuation">=</span><span class="token attr-value">14</span><span class="token attr-name">person.lists</span><span class="token punctuation">=</span><span class="token attr-value">a, b,</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； * prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； * @ConfigurationProperties(prefix = "person")默认从全局配置文件中获取值； */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span> <span class="token comment">//仍需要本注解去指定对象值</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:person.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样可以使用@ConfigurationProperties(prefix = “person”)注解在Bean中获取</p><h4 id="2-Value"><a href="#2-Value" class="headerlink" title="2.@Value"></a>2.@Value</h4><p>通过@Value赋值为某一属性赋值</p><p><strong>@Value获取值和@ConfigurationProperties获取值比较</strong></p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持(@mail…)</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>松散绑定：</strong>忽略命名方式，只要名字一样，驼峰命名方式和下划线形式可以混用</p><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3-PropertySource-amp-ImportResource"><a href="#3-PropertySource-amp-ImportResource" class="headerlink" title="3.@PropertySource&amp;@ImportResource"></a>3.@PropertySource&amp;@ImportResource</h4><p>@PropertySource</p><p>加载指定的配置文件</p><p>@PropertySource（value={“…”}）</p><p>@ImportResource</p><p>加载spring配置文件，添加在主配置类上</p><p>@ImportResource(location={“…”})</p><h3 id="3-配置文件占位符"><a href="#3-配置文件占位符" class="headerlink" title="3.配置文件占位符"></a>3.配置文件占位符</h3><h4 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span>、$<span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">&#125;</span>、$<span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>、$<span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、占位符"><a href="#2、占位符" class="headerlink" title="2、占位符"></a>2、占位符</h5><p>使用占位符获取之前配置的值，如果没有可以是用  :  指默认值</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">张三$&#123;random.uuid&#125;</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;random.int&#125;</span><span class="token attr-name">person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2017/12/15</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">person.maps.k1</span><span class="token punctuation">=</span><span class="token attr-value">v1</span><span class="token attr-name">person.maps.k2</span><span class="token punctuation">=</span><span class="token attr-value">14</span><span class="token attr-name">person.lists</span><span class="token punctuation">=</span><span class="token attr-value">a,b,c</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;person.hello:hello&#125;_dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang$<span class="token punctuation">&#123;</span>random.uuid<span class="token punctuation">&#125;</span> <span class="token comment"># 随机uuid</span>    <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int<span class="token punctuation">&#125;</span>  <span class="token comment"># 随机int</span>    <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/01/01    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">&#125;</span>    <span class="token key atrule">lists</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> code      <span class="token punctuation">-</span> girl      <span class="token punctuation">-</span> music    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>person.hello<span class="token punctuation">:</span>定义值<span class="token punctuation">&#125;</span>123   <span class="token comment">#如果有person中有hello属性，name值为：hello值+123</span>                                       <span class="token comment">#如果没有person中有hello属性，name值为：定义值+123</span>      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-多环境切换"><a href="#4-多环境切换" class="headerlink" title="4.多环境切换"></a>4.多环境切换</h3><h4 id="1-配置多个配置文件"><a href="#1-配置多个配置文件" class="headerlink" title="1.配置多个配置文件"></a>1.配置多个配置文件</h4><p>编写多个配置文件，命名方式为application-环境名.yml/properties</p><p>如</p><p>application-dev.properties</p><p>application-test.properties</p><p>默认使用application.yml/properties</p><p>可以在主配置文件中配置哪个生效</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">环境名</span><span class="token comment"># springboot2.4之后改为</span><span class="token attr-name">spring.config.activate.on-profile</span><span class="token punctuation">=</span><span class="token attr-value">环境名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> 环境名<span class="token comment"># springboot2.4之后改为</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> 环境名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定启动环境</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar myapp.jar -Dspring.profiles.active&#x3D;dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>spring.profiles.active</code>写入yaml配置中,可以指定默认使用某一个环境的配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token string">"dev"</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> <span class="token string">"dev"</span><span class="token key atrule">name</span><span class="token punctuation">:</span> dev.didispace.com<span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token key atrule">name</span><span class="token punctuation">:</span> test.didispace.com<span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> <span class="token string">"prod"</span><span class="token key atrule">name</span><span class="token punctuation">:</span> prod.didispace.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-yml代码块"><a href="#2-yml代码块" class="headerlink" title="2.yml代码块"></a>2.yml代码块</h4><p>在一个配置文件中配置</p><p>多个环境，中间以—分割</p><p>使用spring.profiles设置环境名</p><p>1.如都未配置环境名，默认最后一个配置生效</p><p>2.如都配置环境名，但未指定哪个环境生效，则都不生效</p><p>3.使用spring.profiles.active: 环境名指定哪个环境生效</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8085</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> test<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> go  端口8085生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-命令行方式选择环境"><a href="#3-命令行方式选择环境" class="headerlink" title="3.命令行方式选择环境"></a>3.命令行方式选择环境</h4><p>在使用命令java -jar时，使用参数–spring.profiles.active=..选择环境</p><pre class="line-numbers language-none"><code class="language-none">java -jar jar包名 --spring.profiles.active&#x3D;..<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-配置文件加载位置"><a href="#5-配置文件加载位置" class="headerlink" title="5.配置文件加载位置"></a>5.配置文件加载位置</h3><p>properties和yml中的配置，相互补充；如果冲突，则properties优先级高。</p><p>spring boot默认能够读取的application.properties/application.yml，这2个文件 可以存在于以下4个地方：</p><p>file:项目根目录/config         </p><p>file:项目根目录            </p><p>classpath:项目根目录/config</p><p>classpath:项目根目录    </p><p>多个环境互补使用，如果某项配置冲突，则优先级从上往下</p><p>官网对多配置时的顺序说明：<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config">https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config</a></p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p><code>java -jar jar包名 --spring.config.location=配置文件位置</code></p><h3 id="6-外部配置加载顺序"><a href="#6-外部配置加载顺序" class="headerlink" title="6.外部配置加载顺序"></a>6.外部配置加载顺序</h3><p>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p><code>java -jar jar包名 --server.port=8087  --server.context-path=/abc</code></p><p><code> --配置项=值</code>，多个配置用空格分开；</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>由jar包外向jar包内进行寻找；</p><p><strong>优先加载带profile</strong></p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>再来加载不带profile</strong></p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p><h2 id="3-Web开发"><a href="#3-Web开发" class="headerlink" title="3.Web开发"></a>3.Web开发</h2><h3 id="1-静态资源"><a href="#1-静态资源" class="headerlink" title="1.静态资源"></a>1.静态资源</h3><h4 id="1-静态资源文件夹"><a href="#1-静态资源文件夹" class="headerlink" title="1.静态资源文件夹"></a>1.静态资源文件夹</h4><p>SpringBoot中默认的静态资源文件夹</p><p><code>classpath:/META-INF/resources/</code><br>“classpath:/resources/“,<br>“classpath:/static/“,<br>“classpath:/public/“<br>“/“：当前项目的根路径</p><p>放在静态资源文件夹可以通过/  直接访问</p><p><strong>自定义静态资源文件夹</strong></p><p>自定义之后，默认的静态资源文件夹就会失效</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token string">"classpath:/文件夹名/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.resources.static-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/文件夹名/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-静态资源映射"><a href="#2-静态资源映射" class="headerlink" title="2.静态资源映射"></a>2.静态资源映射</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Duration</span> cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CacheControl</span> cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-模板引擎"><a href="#2-模板引擎" class="headerlink" title="2.模板引擎"></a>2.模板引擎</h3><h4 id="1-常见模板引擎"><a href="#1-常见模板引擎" class="headerlink" title="1.常见模板引擎"></a>1.常见模板引擎</h4><p>JSP、Velocity、Freemarker、Thymeleaf（SpringBoot推荐）</p><p><a href="https://www.thymeleaf.org/">thymeleaf官网</a></p><p><a href="https://github.com/thymeleaf/thymeleaf/releases">thymeleaf的Github网址</a></p><h4 id="2-引入Thymeleaf"><a href="#2-引入Thymeleaf" class="headerlink" title="2.引入Thymeleaf"></a>2.引入Thymeleaf</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将其替换为新版本</p><p>在pom.xml文件的properties标签中添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf.version</span><span class="token punctuation">></span></span>3.0.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --></span><span class="token comment">&lt;!-- thymeleaf2   layout1--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-使用Thymeleaf"><a href="#3-使用Thymeleaf" class="headerlink" title="3.使用Thymeleaf"></a>3.使用Thymeleaf</h4><p>只需将html页面放入templates文件夹，即可自动渲染</p><p>1.导入命名空间可以不导入，但导入会有语法提示</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.使用</p><p><strong>实例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/success"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;success&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-语法规则"><a href="#4-语法规则" class="headerlink" title="4.语法规则"></a>4.语法规则</h4><p>1.th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p>如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;***&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;***&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>th中的值就会代替原生html的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/2018-02-04_123955.png"></p><p>2.表达式？</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">Simple</span> <span class="token attr-value">expressions:（表达式语法）</span><span class="token attr-name">Variable</span> <span class="token attr-value">Expressions: $&#123;...&#125;：获取变量值；OGNL；</span>1.获取对象的属性、调用方法2.使用内置的基本对象：<span class="token comment"> #ctx : the context object.</span><span class="token comment"> #vars: the context variables.</span><span class="token comment"> #locale : the context locale.</span><span class="token comment"> #request : (only in Web Contexts) the HttpServletRequest object.</span><span class="token comment"> #response : (only in Web Contexts) the HttpServletResponse object.</span><span class="token comment"> #session : (only in Web Contexts) the HttpSession object.</span><span class="token comment"> #servletContext : (only in Web Contexts) the ServletContext object.</span> $&#123;session.foo&#125;3.内置的一些工具对象：<span class="token comment">#execInfo : information about the template being processed.</span><span class="token comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><span class="token comment">#uris : methods for escaping parts of URLs/URIs</span><span class="token comment">#conversions : methods for executing the configured conversion service (if any).</span><span class="token comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><span class="token comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><span class="token comment">#numbers : methods for formatting numeric objects.</span><span class="token comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><span class="token comment">#objects : methods for objects in general.</span><span class="token comment">#bools : methods for boolean evaluation.</span><span class="token comment">#arrays : methods for arrays.</span><span class="token comment">#lists : methods for lists.</span><span class="token comment">#sets : methods for sets.</span><span class="token comment">#maps : methods for maps.</span><span class="token comment">#aggregates : methods for creating aggregates on arrays or collections.</span><span class="token comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><span class="token attr-name">Selection</span> <span class="token attr-value">Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><span class="token attr-name">补充：配合</span> <span class="token attr-value">th:object="$&#123;session.user&#125;：</span><span class="token attr-name">&lt;div</span> <span class="token attr-value">th:object="$&#123;session.user&#125;"></span><span class="token attr-name">    &lt;p>Name</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*&#123;firstName&#125;">Sebastian&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Surname</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*&#123;lastName&#125;">Pepper&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Nationality</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*&#123;nationality&#125;">Saturn&lt;/span>.&lt;/p></span>&lt;/div>        <span class="token attr-name">Message</span> <span class="token attr-value">Expressions: #&#123;...&#125;：获取国际化内容</span>            <span class="token attr-name">Link</span> <span class="token attr-value">URL Expressions: @&#123;...&#125;：定义URL；</span><span class="token attr-name">@&#123;/order/process(execId</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;execId&#125;,execType='FAST')&#125;</span>        <span class="token attr-name">Fragment</span> <span class="token attr-value">Expressions: ~&#123;...&#125;：片段引用表达式</span><span class="token attr-name">div</span> <span class="token attr-value">th:insert="~&#123;commons :: main&#125;">...&lt;/div></span>         Literals（字面量）<span class="token attr-name">      Text</span> <span class="token attr-value">literals: 'one text' , 'Another one!' ,…</span><span class="token attr-name">      Number</span> <span class="token attr-value">literals: 0 , 34 , 3.0 , 12.3 ,…</span><span class="token attr-name">      Boolean</span> <span class="token attr-value">literals: true , false</span><span class="token attr-name">      Null</span> <span class="token attr-value">literal: null</span><span class="token attr-name">      Literal</span> <span class="token attr-value">tokens: one , sometext , main ,…</span>      <span class="token attr-name">Text</span> <span class="token attr-value">operations:（文本操作）</span><span class="token attr-name">    String</span> <span class="token attr-value">concatenation: +</span><span class="token attr-name">    Literal</span> <span class="token attr-value">substitutions: |The name is $&#123;name&#125;|</span>    <span class="token attr-name">Arithmetic</span> <span class="token attr-value">operations:（数学运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: + , - , * , / , %</span><span class="token attr-name">    Minus</span> <span class="token attr-value">sign (unary operator): -</span>    <span class="token attr-name">Boolean</span> <span class="token attr-value">operations:（布尔运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: and , or</span><span class="token attr-name">    Boolean</span> <span class="token attr-value">negation (unary operator): ! , not</span>    <span class="token attr-name">Comparisons</span> <span class="token attr-value">and equality:（比较运算）</span><span class="token attr-name">    Comparators</span><span class="token punctuation">:</span> <span class="token attr-value">> , &lt; , >= , &lt;= ( gt , lt , ge , le )</span><span class="token attr-name">    Equality</span> <span class="token attr-value">operators: == , != ( eq , ne )</span>    <span class="token attr-name">Conditional</span> <span class="token attr-value">operators:条件运算（三元运算符）</span><span class="token attr-name">    If-then</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then)</span><span class="token attr-name">    If-then-else</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then) : (else)</span><span class="token attr-name">    Default</span><span class="token punctuation">:</span> <span class="token attr-value">(value) ?: (defaultvalue)</span>    <span class="token attr-name">Special</span> <span class="token attr-value">tokens:</span><span class="token attr-name">    No-Operation</span><span class="token punctuation">:</span> <span class="token attr-value">_ </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"&lt;h1>Hello SpringBoot&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;hello&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;hello&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list:$&#123;list&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;list&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list:$&#123;list&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>[[$&#123;list&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list:$&#123;list&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[$&#123;list&#125;]]     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/thymeleaf%E7%BB%93%E6%9E%9C.png"></p><h4 id="5-SpringBoot项目中定制错误页面"><a href="#5-SpringBoot项目中定制错误页面" class="headerlink" title="5.SpringBoot项目中定制错误页面"></a>5.SpringBoot项目中定制错误页面</h4><p>SpringBoot项目在使用thymleaf时可以在模板文件夹下添加error文件夹，在error文件夹中定制错误页面</p><p>在error文件夹中配置名字为错误状态码的页面。</p><p>也可以命名为4xx/5xx.html，那么以4/5开头的错误状态码就会进入这个错误页面。（精确页面优先级高）</p><p><strong>示例</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/error%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>status:[[$&#123;status&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;status&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>timestamp:[[$&#123;timestamp&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2.png"></p><h4 id="6-不使用模板引擎"><a href="#6-不使用模板引擎" class="headerlink" title="6.不使用模板引擎"></a>6.不使用模板引擎</h4><p>没有模板引擎时，在静态资源文件夹下添加error文件夹</p><p>在error文件夹中配置名字为错误状态码的页面。</p><p>也可以命名为4xx/5xx.html，那么以4/5开头的错误状态码就会进入这个错误页面。（精确页面优先级高）</p><h3 id="3-使用webjars"><a href="#3-使用webjars" class="headerlink" title="3.使用webjars"></a>3.使用webjars</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>webjars是将css,js等静态资源以jar包的形式引入到 J2 EE项目中</p><h4 id="2-资源"><a href="#2-资源" class="headerlink" title="2.资源"></a>2.资源</h4><p>可以通过<a href="https://www.webjars.org/">webjars官网</a>与<a href="https://mvnrepository.com/">maven仓库</a>中寻找资源</p><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h4><h5 id="1-pom引入"><a href="#1-pom引入" class="headerlink" title="1.pom引入"></a>1.pom引入</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-项目中引用"><a href="#2-项目中引用" class="headerlink" title="2.项目中引用"></a>2.项目中引用</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webjars/jquery/3.5.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webjars/vue/2.5.16/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-项目中使用测试"><a href="#3-项目中使用测试" class="headerlink" title="3.项目中使用测试"></a>3.项目中使用测试</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webjars/jquery/3.5.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webjars/vue/2.5.16/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    success页面    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;success&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;hello&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#btn1"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            hello<span class="token operator">:</span> <span class="token string">"hello webjars"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function-variable function">btn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-SpringBoot缓存"><a href="#4-SpringBoot缓存" class="headerlink" title="4.SpringBoot缓存"></a>4.SpringBoot缓存</h2><h3 id="1-缓存入门"><a href="#1-缓存入门" class="headerlink" title="1.缓存入门"></a>1.缓存入门</h3><h4 id="1-重要概念"><a href="#1-重要概念" class="headerlink" title="1.重要概念"></a>1.重要概念</h4><p>Cache：缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、 ConcurrentMapCache等</p><p>CacheManager ：缓存管理器，管理各种缓存（Cache）组件</p><h4 id="2-缓存注解"><a href="#2-缓存注解" class="headerlink" title="2.缓存注解"></a>2.缓存注解</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Cacheable</td><td>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td></tr><tr><td>@CacheEvict</td><td>清空缓存，通常添加在删除方法上，删除数据成功，会将缓存中对应的数据删除</td></tr><tr><td>@CachePut</td><td>更新缓存，用在更新方法上，修改数据成功时更新缓存</td></tr><tr><td>@EnableCaching</td><td>开启基于注解的缓存</td></tr></tbody></table><h4 id="3-注解中的属性"><a href="#3-注解中的属性" class="headerlink" title="3.注解中的属性"></a>3.注解中的属性</h4><table><thead><tr><th>属性</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>cacheNames/value</td><td>指定缓存组件的名字；将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存</td><td>@Cacheable(value=”mycache”) 或者 @Cacheable(value={”cache1”,”cache2”}</td></tr><tr><td>key</td><td>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的 所有参数进行组合</td><td>@Cacheable(value=”testcache”,key=”#userName”)</td></tr><tr><td>keyGenerator</td><td>key的生成器；可以自己指定key的生成器的组件id，key/ keyGeberator二选一使用</td><td>@Cacheable(cacheNames = {“stu”},keyGenerator = “myKeyGenerator”)</td></tr><tr><td>condition</td><td>缓存的条件，可以为空，使用 SpEL 编写，返 回 true 或者 false，只有为 true 才进行缓存/清 除缓存</td><td>@Cacheable(value=”testcache”,condition=”#userNam e.length()&gt;2”)</td></tr><tr><td>unless</td><td>否定緩存；当 unLess指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断</td><td></td></tr><tr><td>allEntries (@CacheEvict )</td><td>是否清空所有缓存内容，缺省为 false，如果指 定为 true，则方法调用后将立即清空所有缓存</td><td>@CachEvict(value=”testcache”,allEntries=true)</td></tr><tr><td>beforeInvocation (@CacheEvict)</td><td>是否在方法执行前就清空，缺省为 false，如果 指定为 true，则在方法还没有执行的时候就清 空缓</td><td>@CachEvict(value=”testcache”， beforeInvocation=true)</td></tr><tr><td>cacheManager</td><td>指定缓存管理器；或者 cacheResolver指定获取解析器</td><td></td></tr><tr><td>sync</td><td>是否使用异步模式</td><td></td></tr></tbody></table><p>key的SpEL</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/SpEL.png"></p><p>自定义keyGeberator</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"myKeyGenerator"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">KeyGenerator</span> <span class="token function">keyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                    params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回值为自定义的key</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"stu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>keyGenerator <span class="token operator">=</span> <span class="token string">"myKeyGenerator"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Debug模式在CacheAspectSupport.java可以查看key,在500行左右</span><span class="token class-name">Object</span> key <span class="token operator">=</span> <span class="token function">generateKey</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-缓存的自动配置"><a href="#2-缓存的自动配置" class="headerlink" title="2.缓存的自动配置"></a>2.缓存的自动配置</h3><p>类CacheAutoConfiguration</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">CacheAspectSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"cacheResolver"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">CouchbaseAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">HazelcastAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">HibernateJpaAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">CacheConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CacheManagerEntityManagerFactoryDependsOnPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheAutoConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中注解@Import({ CacheConfigurationImportSelector.class, CacheManagerEntityManagerFactoryDependsOnPostProcessor.class })中导入的组件CacheConfigurationImportSelector作用为为springboot项目注册缓存组件，共10个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfigurationImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CacheType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>types<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> types<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            imports<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">CacheConfigurations</span><span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span>types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> imports<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E7%BC%93%E5%AD%98%E7%BB%84%E4%BB%B6.png"></p><p>其中SimpleCacheConfiguration默认生效,它向容器中注册了一个组件ConcurrentMapCacheManager</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">CacheCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SimpleCacheConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token class-name">ConcurrentMapCacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">,</span><span class="token class-name">CacheManagerCustomizers</span> cacheManagerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ConcurrentMapCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentMapCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> cacheNames <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cacheManager<span class="token punctuation">.</span><span class="token function">setCacheNames</span><span class="token punctuation">(</span>cacheNames<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> cacheManagerCustomizers<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>cacheManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以获取和创建 ConcurrentMap Cache类型的缓存组件；它的作用将数据保存在 ConcurrentMap中；</p><h3 id="3-缓存的使用"><a href="#3-缓存的使用" class="headerlink" title="3.缓存的使用"></a>3.缓存的使用</h3><h4 id="1-Cacheable"><a href="#1-Cacheable" class="headerlink" title="1.@Cacheable"></a>1.@Cacheable</h4><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"students"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"allStudents"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> students<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行两次查询，根据日志可以发现只执行了一次sql,则第二次查询使用的是缓存中的数据</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E7%BC%93%E5%AD%98%E6%97%A5%E5%BF%97.png"></p><h4 id="2-CachePut"><a href="#2-CachePut" class="headerlink" title="2.CachePut"></a>2.CachePut</h4><p><strong>执行顺序</strong></p><p>先调用方法，再将目标方法的结果缓存起来</p><p>既调用方法，又更新缓存数据<br>修改了数据库的某个数据，同时更新缓存；</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#result.no"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    studentMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#no"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p>先查询两次，第二次使用了缓存，在进行修改，修改之后查询，发现未执行sql语句，且结果为修改后的数据，表明更新中使用了缓存将结果加入了缓存</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/CachePutTure.png"></p><p><strong>注意</strong></p><p>1.要想让缓存更新，查询（Cacheable）的key要与修改（CachePut）的key相同。否则就会出现以下情况，更改之后查询出来的结果为未更新的结果。</p><p>2.CachePut设置key时要使用result,需要在方法中将修改的数据返回（return student;）,且Cacheable不能使用result。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/CachePut.png"></p><h4 id="3-CacheEvict"><a href="#3-CacheEvict" class="headerlink" title="3.CacheEvict"></a>3.CacheEvict</h4><p><strong>属性</strong></p><p>1.allEntries =true</p><p>会删除所有缓存</p><p>2.beforeInvocation</p><p>设置缓存执行的时机，默认为false表示在方法执行之后执行，设置为true,表示在方法执行之前执行。</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#no"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    studentMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#no"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p>先查询两次，第二次使用了缓存，在进行修改，删除之后查询，发现执行了sql语句，但因数据已删除，所以为查找到结果，表明在删除数据时，@CacheEvict注解同时将对应的缓存删除了</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img1/CacheEvict.png"></p><h4 id="4-Caching"><a href="#4-Caching" class="headerlink" title="4.Caching"></a>4.Caching</h4><p>Caching由多个注解组成,可以指定多种规则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Caching</span> <span class="token punctuation">&#123;</span><span class="token class-name">Caceable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">cacheable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">CachePut</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">CacheEvict</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">evict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Caching</span>cacheable<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"***"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"***"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>put<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"***"</span><span class="token punctuation">,</span>key <span class="token operator">=</span><span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"***"</span><span class="token punctuation">,</span><span class="token punctuation">,</span>key <span class="token operator">=</span><span class="token string">"***"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-CacheConfig"><a href="#5-CacheConfig" class="headerlink" title="5.@CacheConfig"></a>5.@CacheConfig</h4><p>@CacheConfig(cacheNames=”***”)（不能使用value）</p><p>统一设置该类中的某些配置，如缓存名，缓存的key</p><h3 id="4-整合Redis作为缓存"><a href="#4-整合Redis作为缓存" class="headerlink" title="4.整合Redis作为缓存"></a>4.整合Redis作为缓存</h3><h4 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h4><h5 id="1-引入redis的starter"><a href="#1-引入redis的starter" class="headerlink" title="1.引入redis的starter"></a>1.引入redis的starter</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-配置redis"><a href="#2-配置redis" class="headerlink" title="2.配置redis"></a>2.配置redis</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.109.128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># Redis数据库索引（默认为0）</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment"># Redis服务器地址</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token comment"># Redis服务器连接端口</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment"># Redis服务器连接密码（默认为空）</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token comment"># 连接池最大连接数（使用负值表示没有限制）</span><span class="token attr-name">spring.redis.jedis.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><span class="token attr-name">spring.redis.jedis.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">-1</span><span class="token comment"># 连接池中的最大空闲连接</span><span class="token attr-name">spring.redis.jedis.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment"># 连接池中的最小空闲连接</span><span class="token attr-name">spring.redis.jedis.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment"># 连接超时时间（毫秒）</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-redis作为缓存"><a href="#2-redis作为缓存" class="headerlink" title="2.redis作为缓存"></a>2.redis作为缓存</h4><p>配置好环境，SpringBoot项目启动时会自动选择Redis作为缓存。</p><h2 id="5-SpringBoot任务"><a href="#5-SpringBoot任务" class="headerlink" title="5.SpringBoot任务"></a>5.SpringBoot任务</h2><h3 id="1-异步任务"><a href="#1-异步任务" class="headerlink" title="1.异步任务"></a>1.异步任务</h3><p>1.开启异步任务</p><p>在主启动类上添加注解@EnableAsync</p><p>2.在需要使用异步的方法上使用注解@Async</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TaskApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">TaskService</span> taskService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        taskService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p>未使用异步</p><p>访问请求时等待10秒才进行跳转，并在控制台上打印内容</p><p>使用异步</p><p>访问请求时直接进行跳转，并且等待10秒后，才在控制台上打印内容</p><h3 id="2-定时任务"><a href="#2-定时任务" class="headerlink" title="2.定时任务"></a>2.定时任务</h3><p>1.开启定时任务</p><p>在主启动类上添加注解@EnableScheduling</p><p>2.在需要使用定时任务的方法上添加注解@Scheduled</p><p>@Scheduled注解参数cron</p><p>共有6位，分别代表秒、分、时、日、月、周</p><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, *- /</td></tr><tr><td>分</td><td>0-59</td><td>, *- /</td></tr><tr><td>小时</td><td>0-23</td><td>, *- /</td></tr><tr><td>日期</td><td>1-31</td><td>, *- ? / L W C</td></tr><tr><td>月份</td><td>1-12</td><td>, *- /</td></tr><tr><td>星期</td><td>SUN-SAT/0-7</td><td>, *- ? / L C #</td></tr></tbody></table><p>星期中0、7、SUN都代表星期日</p><p><strong>特殊字符含义</strong></p><table><thead><tr><th>特殊字符</th><th>代表含义</th></tr></thead><tbody><tr><td>,</td><td>枚举</td></tr><tr><td>-</td><td>区间</td></tr><tr><td>*</td><td>任意</td></tr><tr><td>/</td><td>步长</td></tr><tr><td>?</td><td>日/星期冲突匹配</td></tr><tr><td>L</td><td>最后</td></tr><tr><td>W</td><td>工作日</td></tr><tr><td>C</td><td>和calendar联系后计算过的值</td></tr><tr><td>#</td><td>星期，4#2，第二个星期四</td></tr></tbody></table><p>示例</p><p>1 * * * * 0-6：星期日到星期六每分钟的第一秒</p><p>1 ，2，3，4，5* * * * 0-6：星期日到星期六每分钟的第一，二，三，四，五秒</p><p>1 -5* * * * 0-6：星期日到星期六每分钟的第一，二，三，四，五秒</p><p>0 0/5 14,18 * * ?：每天十四点整和十八点整，每隔五分钟执行一次</p><p>0 15 10 ？* 1-6：周一至周六10：15分执行一次</p><p>0 0 2 ？ 0 * 6 L：每月的最后一个周六凌晨两点执行一次</p><p>0 0 2 LW * ？：每月的最后一个工作日凌晨两点执行一次</p><p>0 0 2 4 ？ *1#1：每月的第一个周一凌晨两点到四点之间每个整点执行一次</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TaskApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron<span class="token operator">=</span><span class="token string">"1 * * * * 0-6"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"say hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p>每分钟的第一秒在控制台打印一次内容</p><h3 id="3-邮件任务"><a href="#3-邮件任务" class="headerlink" title="3.邮件任务"></a>3.邮件任务</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置配置文件"><a href="#2-配置配置文件" class="headerlink" title="2.配置配置文件"></a>2.配置配置文件</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span>  <span class="token comment">#发送邮件的账号</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> 1551903505@qq.com    <span class="token comment">#授权码，不是qq账号密码</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> qtg<span class="token important">*******ggjc</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送邮件的账号要开通服务</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/mail.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/mail2.png"></p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span></span><span class="token class-name">MailSender</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span></span><span class="token class-name">SimpleMailMessage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>javamail<span class="token punctuation">.</span></span><span class="token class-name">JavaMailSenderImpl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>javamail<span class="token punctuation">.</span></span><span class="token class-name">MimeMessageHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span></span><span class="token class-name">MessagingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span></span><span class="token class-name">MimeMessage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">TaskApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">JavaMailSenderImpl</span> javaMailSender<span class="token punctuation">;</span>    <span class="token comment">/**     * @description: 发送简单邮件     * @author 靳新宇     * @date 2020/7/19 18:12    */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置邮件标题</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置邮件内容</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"springboot_mail测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送给哪个账号</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2504574877@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置发件人（邮件中显示的）</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"1551903505@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送邮件</span>        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 发送复杂邮件     * @author 靳新宇     * @date 2020/7/19 18:12     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//发送复杂邮件</span>        <span class="token class-name">MimeMessage</span> mimeMessage <span class="token operator">=</span> javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//要发送文件，则设置第二个参数true，如不发送，不需要第二个参数</span>        <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置邮件标题</span>        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置邮件内容，可以设置html标签，如要显示html效果，设置第二个参数。设置为true</span>        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>springboot_mail测试&lt;/h1>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送给哪个账号</span>        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2504574877@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置发件人（邮件中显示的）</span>        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"1551903505@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送文件，第一个参数位文件名，第二个参数位文件路径</span>        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"H:\\图片\\QQ图片20200404124433.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-SpringBoot原理"><a href="#2-SpringBoot原理" class="headerlink" title="2.SpringBoot原理"></a>2.SpringBoot原理</h1><h2 id="1-Starter启动器"><a href="#1-Starter启动器" class="headerlink" title="1.Starter启动器"></a>1.Starter启动器</h2><h3 id="1-starter简介"><a href="#1-starter简介" class="headerlink" title="1.starter简介"></a>1.starter简介</h3><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。</p><p><strong>starter</strong>的出现解决了项目中依赖版本冲突的问题。</p><h3 id="2-Starter结构"><a href="#2-Starter结构" class="headerlink" title="2.Starter结构"></a>2.Starter结构</h3><p>启动器中可以分为三个部分</p><p>1.版本依赖库</p><p>2.依赖的其他启动器</p><p>3.依赖的jar包的依赖</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img5/%E5%90%AF%E5%8A%A8%E5%99%A8.png"></p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/using-spring-boot.html#using-boot-starter">Spring官网中所有启动器</a></p><h3 id="3-版本依赖库"><a href="#3-版本依赖库" class="headerlink" title="3.版本依赖库"></a>3.版本依赖库</h3><p>SpringBoot的pom.xml文件的父文件及其他启动器中都包含有一个版本依赖库spring-boot-dependencies</p><p>在这个版本依赖库中包含了许多依赖的版本,所以我们在添加相关依赖时可以省略版本号，如果添加依赖时，添加了版本号，则会根据添加的版本号导入。其解决了项目中依赖版本冲突的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img6/pom%E7%88%B6%E6%96%87%E4%BB%B6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img1/dependencies.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img5/%E7%89%88%E6%9C%AC%E4%BE%9D%E8%B5%96%E5%BA%93.png"></p><h2 id="2-主启动类"><a href="#2-主启动类" class="headerlink" title="2.主启动类"></a>2.主启动类</h2><p>SpringBoot的主启动类是SpringBoot项目的启动入口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//标注这个类是一个SpringBoot的应用</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用此方法启动SpringBoot程序</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>主启动类类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类中有一个名为<code>@SpringBootApplication</code>的注解这是一个复合注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有两个起主要作用的注解<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code></p><h3 id="1-SpringBootConfiguration"><a href="#1-SpringBootConfiguration" class="headerlink" title="1.@SpringBootConfiguration"></a>1.@SpringBootConfiguration</h3><p>作用：使某个类成为SprinfgBoot项目的配置类</p><p>它也是一个复合注解，其中包含一个注解Configuration</p><p>这是Spring中定义的注解，作用是将一个类转变为一个配置类。</p><h3 id="2-EnableAutoConfiguration"><a href="#2-EnableAutoConfiguration" class="headerlink" title="2.@EnableAutoConfiguration"></a>2.@EnableAutoConfiguration</h3><p>告诉SpringBoot开启自动配置功能；这样自动配置才能生效</p><p>它也是一个复合注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-AutoConfigurationPackage"><a href="#1-AutoConfigurationPackage" class="headerlink" title="1.@AutoConfigurationPackage"></a>1.@AutoConfigurationPackage</h4><p>​       将主启动类所在的包及其子包中所有的组件加载进Spring容器中，类似于Spring中开启组件扫描。因此所有需要加载进Spring容器中的类都需要写在这个范围中。</p><h4 id="2-Import-AutoConfigurationImportSelector-class"><a href="#2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="2.@Import(AutoConfigurationImportSelector.class)"></a>2.@Import(AutoConfigurationImportSelector.class)</h4><p>给容器中导入组件<code>AutoConfigurationImportSelector·</code></p><p><strong><code>AutoConfigurationImportSelector</code></strong></p><p>自动配置SpringBoot项目的组件</p><p>​        Spring Boot在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<code>EnableAutoConfiguration</code>指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；以前我们需要自己配置的东西，自动配置类都会我们；</p><p><strong>配置流程</strong></p><p>​         将项目环境中需要加载进Spring容器中的类的全类名都添加配置文件<code>META-INF/spring.factories</code>中。</p><p>​            项目启动时，通过启动类的注解获取到这个配置文件，读取配置文件中的内容，将其中的路径名对应的组件加载到容器中，从而实现自动配置。</p><p>@SpringBootApplication </p><p>→ @EnableAutoConfiguration </p><p>→ @Import({AutoConfigurationImportSelector.class}) </p><p>→ AutoConfigurationImportSelector </p><p>→ getCandidateConfigurations(annotationMetadata, attributes) </p><p>→ loadFactoryNames() </p><p>→ loadSpringFactories() </p><p>→ getResources（）</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/getCabdidateConfigurations.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/loadFactoryNames.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/FACTORIES_RESOURCE_LOCATION.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/zjpz.png"></p><h2 id="3-Redis缓存生效"><a href="#3-Redis缓存生效" class="headerlink" title="3.Redis缓存生效"></a>3.Redis缓存生效</h2><p>引入之后，容器中RedisCacheConfiguration就会生效，而SimpleCacheConfiguration就会失效</p><p>RedisAutoConfiguration就会在启动是自动配置</p><p>向像容器中添加了两个组件，用于操作redis</p><p>RedisTemplate</p><p>StringRedisTemplate：RedisTemplate简化出来用于操作字符串的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">LettuceConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JedisConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span><span class="token class-name">StringRedisTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-SpringMVC自动配置"><a href="#4-SpringMVC自动配置" class="headerlink" title="4.SpringMVC自动配置"></a>4.SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/spring-boot-features.html#boot-features-email">SpringBoot关于SpringMVC自动配置官方文档</a></p><h3 id="1-SpringBoot提供的自动配置"><a href="#1-SpringBoot提供的自动配置" class="headerlink" title="1.SpringBoot提供的自动配置"></a>1.SpringBoot提供的自动配置</h3><p>SpringBoot对SpringMVC的默认配置: WebMvcAutoConfiguration.java</p><p>1.包含 <code>ContentNegotiatingViewResolver</code> 和<code>BeanNameViewResolver</code> </p><p><strong>流程</strong></p><p>1.在程序启动时，SpringBoot会初始化所有自动配置包括WebMvcAutoConfiguration</p><p>2.在初始化WebMvcAutoConfiguration是，会创建ContentNegotiatingViewResolver对象，且将其添加为组件</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img1/ContextNegotiatingViewResolver.png"></p><p>3.这个组件会通过工具类获取所有的ViewResolver组件</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/initServletContext.png"></p><p>4.再将所有组件遍历，选择最合适的组件，将其返回</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/resolveViewName.png"></p><p>5.经过一系列选择，将最合适的视图解析器保存，在使用无参构造器创建对象，然后使用set方法为其赋值</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/ContextNegotiatingViewResolver.png"></p><p>所以，需要自定义视图解析器时，我们只需要创建这个组件即可，SpringBoot会将其自动添加，并选用。</p><h3 id="2-扩展SpringBoot的MVC功能"><a href="#2-扩展SpringBoot的MVC功能" class="headerlink" title="2.扩展SpringBoot的MVC功能"></a>2.扩展SpringBoot的MVC功能</h3><p>​        如果要在保留SpringBoot中MVC配置的情况下，自定义Web配置（拦截器，格式化程序，视图控制器和其他功能），可以通过创建一个<code>WebMvcConfigurer</code>的实现配置类，通过在其中重写对应的方法来配置。</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 视图跳转控制器     * 设置路径映射     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * Helps with configuring HandlerMappings path matching options such as trailing slash match, * suffix registration, path matcher and path helper. * Configured path matcher and path helper instances are shared for: */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure content negotiation options. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token class-name">ContentNegotiationConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure asynchronous request handling options. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configureAsyncSupport</span><span class="token punctuation">(</span><span class="token class-name">AsyncSupportConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure a handler to delegate unhandled requests by forwarding to the * Servlet container's "default" servlet. A common use case for this is when * the &#123;@link DispatcherServlet&#125; is mapped to "/" thus overriding the * Servlet container's default handling of static resources. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add &#123;@link Converter Converters&#125; and &#123;@link Formatter Formatters&#125; in addition to the ones * registered by default. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add Spring MVC lifecycle interceptors for pre- and post-processing of * controller method invocations and resource handler requests. * Interceptors can be registered to apply to all requests or be limited * to a subset of URL patterns. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add handlers to serve static resources such as images, js, and, css * files from specific locations under web application root, the classpath, * and others. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure cross origin requests processing. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure simple automated controllers pre-configured with the response * status code and/or a view to render the response body. This is useful in * cases where there is no need for custom controller logic -- e.g. render a * home page, perform simple site URL redirects, return a 404 status with * HTML content, a 204 with no content, and more. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure view resolvers to translate String-based view names returned from * controllers into concrete &#123;@link org.springframework.web.servlet.View&#125; * implementations to perform rendering with. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add resolvers to support custom controller method argument types. * &lt;p>This does not override the built-in support for resolving handler * method arguments. To customize the built-in support for argument * resolution, configure &#123;@link RequestMappingHandlerAdapter&#125; directly. * @param resolvers initially an empty list */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> resolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add handlers to support custom controller method return value types. * &lt;p>Using this option does not override the built-in support for handling * return values. To customize the built-in support for handling return * values, configure RequestMappingHandlerAdapter directly. * @param handlers initially an empty list */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">addReturnValueHandlers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodReturnValueHandler</span><span class="token punctuation">></span></span> handlers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure the &#123;@link HttpMessageConverter HttpMessageConverters&#125; to use for reading or writing * to the body of the request or response. If no converters are added, a * default list of converters is registered. * &lt;p>&lt;strong>Note&lt;/strong> that adding converters to the list, turns off * default converter registration. To simply add a converter without impacting * default registration, consider using the method * &#123;@link #extendMessageConverters(java.util.List)&#125; instead. * @param converters initially an empty list of converters */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * A hook for extending or modifying the list of converters after it has been * configured. This may be useful for example to allow default converters to * be registered and then insert a custom converter through this method. * @param converters the list of configured converters to extend. * @since 4.1.3 */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Configure exception resolvers. * &lt;p>The given list starts out empty. If it is left empty, the framework * configures a default set of resolvers, see * &#123;@link WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List, org.springframework.web.accept.ContentNegotiationManager)&#125;. * Or if any exception resolvers are added to the list, then the application * effectively takes over and must provide, fully initialized, exception * resolvers. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configureHandlerExceptionResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">></span></span> resolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Extending or modify the list of exception resolvers configured by default. * This can be useful for inserting a custom exception resolver without * interfering with default ones. */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">extendHandlerExceptionResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">></span></span> resolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Provide a custom &#123;@link Validator&#125; instead of the one created by default. * The default implementation, assuming JSR-303 is on the classpath, is: * &#123;@link org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean&#125;. * Leave the return value as &#123;@code null&#125; to keep the default. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">default</span> <span class="token class-name">Validator</span> <span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Provide a custom &#123;@link MessageCodesResolver&#125; for building message codes * from data binding and validation error codes. Leave the return value as * &#123;@code null&#125; to keep the default. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">default</span> <span class="token class-name">MessageCodesResolver</span> <span class="token function">getMessageCodesResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果要提供RequestMappingHandlerMapping，RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义实例，并且仍然保留SpringBoot MVC自定义，则可以声明WebMvcRegistrations类型的Bean，并使用它提供这些组件的自定义实例。</p><h3 id="3-全面接管SpringBoot的自动配置"><a href="#3-全面接管SpringBoot的自动配置" class="headerlink" title="3.全面接管SpringBoot的自动配置"></a>3.全面接管SpringBoot的自动配置</h3><p>​        如果放弃SpringBoot的MVC配置，完全自己配置，则可以在自定义的配置类上添加<code>@EnableWebMvc</code>注解，或者按照@EnableWebMvc的Javadoc中的说明添加自己的@Configuration注释的DelegatingWebMvcConfiguration。</p><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DelegatingWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//容器中没有这个组件的时候，这个自动配置类才生效</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">DispatcherServletAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5-错误处理机制"><a href="#5-错误处理机制" class="headerlink" title="5.错误处理机制"></a>5.错误处理机制</h2><h3 id="1-错误处理自动配置"><a href="#1-错误处理自动配置" class="headerlink" title="1.错误处理自动配置"></a>1.错误处理自动配置</h3><p>SpringBoot自动配值错误信息的类为ErrorMvcAutoConfiguration.java</p><p>其中有一下几个重要组件</p><p>1、DefaultErrorAttributes：获取错误信息</p><p>2、BasicErrorController：处理默认/error请求</p><p>3、ErrorPageCustomizer：选择处理方式</p><p>4、DefaultErrorViewResolver：视图解析，返回合适的视图</p><blockquote><p>页面能获取的信息；</p><p>timestamp：时间戳</p><p>status：状态码</p><p>error：错误提示</p><p>exception：异常对象</p><p>message：异常消息</p><p>errors：JSR303数据校验的错误都在这里</p></blockquote><h3 id="2-处理流程"><a href="#2-处理流程" class="headerlink" title="2.处理流程"></a>2.处理流程</h3><p>1.一但系统出现4xx或者5xx之类的错误；<strong>ErrorPageCustomizer</strong>就会生效（定制错误的响应规则）,就会来到/error请求.</p><ol><li><p>注册组件</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6.png"></p></li></ol><ol start="2"><li><p>获取路径</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E7%BB%84%E4%BB%B6.png"></p></li><li><p>路径为/error</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%B7%AF%E5%BE%84.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E9%94%99%E8%AF%AF%E8%B7%AF%E5%BE%84.png"></p></li></ol><p>2.来到/error请求后,就会被<strong>BasicErrorController</strong>处理；</p><ol><li><p>首先请求/error时，会被BasicErrorController处理</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%A4%84%E7%90%86error.png"></p></li><li><p>根据不同客户端，选择不同的处理方式</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%A4%B4%E4%BF%A1%E6%81%AF.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%86%E7%B1%BB%E5%A4%84%E7%90%86.png"></p></li><li><p>如果是浏览器，则调用getErrorAttributes()方法获取信息，调用resolverErrorView选择视图处理器</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/resolverErrorView.png"></p></li><li><p>调用getErrorAttributes()方法获取信息，getErrorAttributes()方法是ErrorAttributes接口中的方法，而DefaultErrorAttributes就是其实现类</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/getErrorAttributes1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/getErrorAttributes2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/getErrorAttributes3.png"></p></li><li><p>遍历所有错误处理视图解析器，获得合适的视图，如果没有,返回null</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E9%81%8D%E5%8E%86%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8.png"></p></li></ol><p>3.然后进行响应，响应页面是由<strong>DefaultErrorViewResolver</strong>解析得到的</p><ol><li><p>在ErrorMvcAutoConfiguration中有一个内部类DefaultErrorViewResolverConfiguration。其将DefaultErrorViewResolver注册为组件。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/DefaultErrorViewResolver.png"></p></li><li><p>通过解析获取页面</p><p>1.在resolveErrorView()方法中，根据状态码信息调用resolve()方法。</p><p>2.resolve()方法中，如果有模板引擎，由模板引擎进行解析。模板引擎解析之后，返回合适视图。</p><p>​    如果没有模板引擎，则调用resolveResource方法获取错误页面。</p><p>3.resolveResource()方法会遍历所有静态资源文件夹，在静态资源文件夹下找errorViewName对应的页面 。  error/404.html</p><p>​    静态资源文件夹中没有，则返回为空。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span> status<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> errorViewName <span class="token operator">=</span> <span class="token string">"error/"</span> <span class="token operator">+</span> viewName<span class="token punctuation">;</span>    <span class="token comment">//如果有模板引擎，由模板引擎进行解析</span>    <span class="token class-name">TemplateAvailabilityProvider</span> provider <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateAvailabilityProviders        <span class="token punctuation">.</span><span class="token function">getProvider</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//模板引擎解析之后，返回合适视图</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果没有模板引擎，则调用resolveResource方法获取错误页面</span>    <span class="token keyword">return</span> <span class="token function">resolveResource</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> location <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>            resource <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">createRelative</span><span class="token punctuation">(</span>viewName <span class="token operator">+</span> <span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlResourceView</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="6-数据库连接池"><a href="#6-数据库连接池" class="headerlink" title="6.数据库连接池"></a>6.数据库连接池</h2><h3 id="1-自动配置连接池"><a href="#1-自动配置连接池" class="headerlink" title="1.自动配置连接池"></a>1.自动配置连接池</h3><p>参考类DataSourceConfiguration</p><p>可知SpringBoot默认支持tomcat、Hikari、dbcp2数据源，根据导入的依赖选择使用哪个数据源（@ConditionalOnClass注解）</p><p>原理参考servlet容器自动配置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//tomcat的数据源</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"org.apache.tomcat.jdbc.pool.DataSource"</span><span class="token punctuation">,</span>matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Tomcat</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.tomcat"</span><span class="token punctuation">)</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DatabaseDriver</span> databaseDriver <span class="token operator">=</span> <span class="token class-name">DatabaseDriver</span><span class="token punctuation">.</span><span class="token function">fromJdbcUrl</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">determineUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> validationQuery <span class="token operator">=</span> databaseDriver<span class="token punctuation">.</span><span class="token function">getValidationQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>validationQuery <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dataSource<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setValidationQuery</span><span class="token punctuation">(</span>validationQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//默认使用Hikari数据源</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"com.zaxxer.hikari.HikariDataSource"</span><span class="token punctuation">,</span>matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Hikari</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.hikari"</span><span class="token punctuation">)</span><span class="token class-name">HikariDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HikariDataSource</span> dataSource <span class="token operator">=</span> <span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//dbcp2数据源</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbcp2<span class="token punctuation">.</span><span class="token class-name">BasicDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"org.apache.commons.dbcp2.BasicDataSource"</span><span class="token punctuation">,</span>matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dbcp2</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.dbcp2"</span><span class="token punctuation">)</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbcp2<span class="token punctuation">.</span><span class="token class-name">BasicDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbcp2<span class="token punctuation">.</span><span class="token class-name">BasicDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//自定义数据源</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义连接池"><a href="#2-自定义连接池" class="headerlink" title="2.自定义连接池"></a>2.自定义连接池</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自定义数据源</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>、<span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义数据源创建流程</strong></p><p><strong>使用建造者模式</strong></p><p>1.DataSourceProperties对象调用initializeDataSourceBuilder()方法获取DataSourceBuilder对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">DataSourceBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">driverClassName</span><span class="token punctuation">(</span><span class="token function">determineDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token function">determineUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token function">determineUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token function">determinePassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.DataSourceBuilder对象调用build()方法创建数据源</p><p>​    获取数据源类型，使用BeanUtils工具类调用instantiateClass()方法，根据反射创建相应数据源。并绑定相关属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取数据源类型</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource</span><span class="token punctuation">></span></span> type <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据数据源类型使用工具类创建数据源</span>    <span class="token class-name">DataSource</span> result <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">maybeGetDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//绑定相关属性</span>    <span class="token function">bind</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-内置Servlet容器"><a href="#7-内置Servlet容器" class="headerlink" title="7.内置Servlet容器"></a>7.内置Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><h3 id="1-定制和修改Servlet容器的相关配置"><a href="#1-定制和修改Servlet容器的相关配置" class="headerlink" title="1.定制和修改Servlet容器的相关配置"></a>1.定制和修改Servlet容器的相关配置</h3><h4 id="1-修改和server有关的配置"><a href="#1-修改和server有关的配置" class="headerlink" title="1.修改和server有关的配置"></a>1.修改和server有关的配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/crud</span><span class="token attr-name">server.tomcat.uri-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在配置类中注册组件"><a href="#2-在配置类中注册组件" class="headerlink" title="2.在配置类中注册组件"></a>2.在配置类中注册组件</h4><p>优先级比配置文件更高</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurableWebServerFactory</span><span class="token punctuation">></span></span> <span class="token function">webServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurableWebServerFactory</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebServerFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//使用factory设置相关属性</span>            factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-注册Servlet、Filter、Listener"><a href="#2-注册Servlet、Filter、Listener" class="headerlink" title="2.注册Servlet、Filter、Listener"></a>2.注册Servlet、Filter、Listener</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean、FilterRegistrationBean、ServletListenerRegistrationBean</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"web启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"web销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Servlet</span><span class="token punctuation">></span></span> servletRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">></span></span> filterFilterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/servlet"</span><span class="token punctuation">,</span><span class="token string">"/success"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> filterFilterRegistrationBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ServletListenerRegistrationBean</span> <span class="token function">listenerRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ServletListenerRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyListener</span><span class="token punctuation">></span></span> listenerRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> listenerRegistrationBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">dispatcherServletRegistration</span><span class="token punctuation">(</span>      <span class="token class-name">DispatcherServlet</span> dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">ServletRegistrationBean</span> registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>         dispatcherServlet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties<span class="token punctuation">.</span><span class="token function">getServletMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span>    <span class="token comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span>       registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>   registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      registration<span class="token punctuation">.</span><span class="token function">setMultipartConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> registration<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-其他Servlet容器"><a href="#3-其他Servlet容器" class="headerlink" title="3.其他Servlet容器"></a>3.其他Servlet容器</h3><p>Jetty：适合长链接（长时间链接），如聊天</p><p>Undertow：高性能非阻塞，但不支持jsp</p><p>默认支持：</p><p>Tomcat（默认使用）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Jetty</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引入web模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入其他的Servlet容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/Jetty.png"></p><p>Undertow</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引入web模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入其他的Servlet容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/Undertoe.png"></p><h3 id="4-嵌入式Servlet容器自动配置原理"><a href="#4-嵌入式Servlet容器自动配置原理" class="headerlink" title="4.嵌入式Servlet容器自动配置原理"></a>4.嵌入式Servlet容器自动配置原理</h3><h4 id="1-判断创建容器"><a href="#1-判断创建容器" class="headerlink" title="1.判断创建容器"></a>1.判断创建容器</h4><p>在org.springframework.boot.autoconfigure.web.embedded包下</p><p>@ConditionalOnClass注解判断当前有哪个servlet容器，然后创建组件</p><p>分别使用</p><p>TomcatWebServerFactoryCustomizer</p><p>JettyWebServerFactoryCustomizer</p><p>UndertowWebServerFactoryCustomizer</p><p>NettyWebServerFactoryCustomizer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ServerProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment">//判断当前是否引入了Tomcat依赖；</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">Tomcat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UpgradeProtocol</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TomcatWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TomcatWebServerFactoryCustomizer</span> <span class="token function">tomcatWebServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span><span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment">//判断当前是否引入了Jetty依赖；</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">Server</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Loader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebAppContext</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JettyWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">JettyWebServerFactoryCustomizer</span> <span class="token function">jettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span><span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment">//判断当前是否引入了Undertow依赖；</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">Undertow</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SslClientAuthMode</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UndertowWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">UndertowWebServerFactoryCustomizer</span> <span class="token function">undertowWebServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span><span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UndertowWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment">//判断当前是否引入了Netty依赖；</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NettyWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">NettyWebServerFactoryCustomizer</span> <span class="token function">nettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span><span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2.创建容器"></a>2.创建容器</h4><p>以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">EmbeddedServletContainer</span> <span class="token function">getEmbeddedServletContainer</span><span class="token punctuation">(</span>      <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个Tomcat</span>   <span class="token class-name">Tomcat</span> tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//配置Tomcat的基本环节</span>   <span class="token class-name">File</span> baseDir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory         <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setBaseDir</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Connector</span> connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">customizeConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">configureEngine</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Connector</span> additionalConnector <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalTomcatConnectors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>additionalConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span>   <span class="token keyword">return</span> <span class="token function">getTomcatEmbeddedServletContainer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-嵌入式容器的配置修改原理"><a href="#3-嵌入式容器的配置修改原理" class="headerlink" title="3.嵌入式容器的配置修改原理"></a>3.嵌入式容器的配置修改原理</h4><pre class="line-numbers language-none"><code class="language-none">ServerProperties、EmbeddedServletContainerCustomize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><p>容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//初始化之前</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableEmbeddedServletContainer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//</span>      <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEmbeddedServletContainer</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEmbeddedServletContainer</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EmbeddedServletContainerCustomizer</span> customizer <span class="token operator">:</span> <span class="token function">getCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EmbeddedServletContainerCustomizer</span><span class="token punctuation">></span></span> <span class="token function">getCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Look up does not include the parent context</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EmbeddedServletContainerCustomizer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory            <span class="token comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span>            <span class="token comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span>            <span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedServletContainerCustomizer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                            <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">,</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ServerProperties</span>也是定制器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><p>1.SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory<code>TomcatEmbeddedServletContainerFactory</code></p><p>2.容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p><p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p><p>3.后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p><h3 id="5-嵌入式Servlet容器启动原理"><a href="#5-嵌入式Servlet容器启动原理" class="headerlink" title="5.嵌入式Servlet容器启动原理"></a>5.嵌入式Servlet容器启动原理</h3><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p><p>获取嵌入式的Servlet容器工厂：</p><p>1.SpringBoot应用启动运行run方法</p><p>2.、refreshContext(context);SpringBoot刷新IOC容器<code>创建IOC容器对象，并初始化容器，创建容器中的每一个组件</code>；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p><p>3.refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Prepare this context for refreshing.</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Tell the subclass to refresh the internal bean factory.</span>      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Prepare the bean factory for use in this context.</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Allows post-processing of the bean factory in context subclasses.</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Invoke factory processors registered as beans in the context.</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Register bean processors that intercept bean creation.</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize message source for this context.</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize event multicaster for this context.</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize other special beans in specific context subclasses.</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Check for listener beans and register them.</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Last step: publish corresponding event.</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Propagate exception to caller.</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.onRefresh(); web的ioc容器重写了onRefresh方法</p><p>5.webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p><p><strong>6.获取嵌入式的Servlet容器工厂：</strong></p><p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p><p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><p>7.<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p><p>8.嵌入式的Servlet容器创建对象并启动Servlet容器；</p><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p><h3 id="6-使用外置的Servlet容器"><a href="#6-使用外置的Servlet容器" class="headerlink" title="6.使用外置的Servlet容器"></a>6.使用外置的Servlet容器</h3><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>​        优点：简单、便携；</p><p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器<code>ServerProperties、自定义EmbeddedServletContainerCustomizer</code>，自己编写嵌入式Servlet容器的创建工厂<code>EmbeddedServletContainerFactory</code>）；</p><p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.必须创建一个war项目；（利用idea创建好目录结构）</p><p>2.将嵌入式的Tomcat指定为provided；</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">SpringApplicationBuilder</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationBuilder</span> application<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//传入SpringBoot应用的主程序</span>      <span class="token keyword">return</span> application<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">SpringBoot04WebJspApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.启动服务器就可以使用；</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong><code>SpringBootServletInitializer</code>，启动ioc容器；</p><p>servlet3.0（Spring注解版）：</p><p>8.2.4 Shared libraries / runtimes pluggability：</p><p>规则：</p><p>​    1.服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p><p>​    2.ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p><p>​    3.还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p><p>流程：</p><p>1.启动Tomcat</p><p>2.org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p><p>3.SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p><p>4.每一个WebApplicationInitializer都调用自己的onStartup；</p><p>5.相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p><p>6.SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span>    <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1、创建SpringApplicationBuilder</span>    <span class="token class-name">SpringApplicationBuilder</span> builder <span class="token operator">=</span> <span class="token function">createSpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardServletEnvironment</span> environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardServletEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    environment<span class="token punctuation">.</span><span class="token function">initPropertySources</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApplicationContext</span> parent <span class="token operator">=</span> <span class="token function">getExistingRootWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root context already created (using as parent)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>            <span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParentContextApplicationContextInitializer</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">ServletContextApplicationContextInitializer</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">contextClass</span><span class="token punctuation">(</span><span class="token class-name">AnnotationConfigEmbeddedWebApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span>    builder <span class="token operator">=</span> <span class="token function">configure</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用builder创建一个Spring应用</span>    <span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">AnnotationUtils</span>        <span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token operator">!</span>application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token string">"No SpringApplication sources have been defined. Either override the "</span>                 <span class="token operator">+</span> <span class="token string">"configure method or add an @Configuration annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Ensure error pages are registered</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerErrorPageFilter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ErrorPageFilterConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//启动Spring应用</span>    <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.Spring的应用就启动并且创建IOC容器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token class-name">FailureAnalyzers</span> analyzers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>   listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>            args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span>            applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      analyzers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FailureAnalyzers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span>            printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//刷新IOC容器</span>      <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      listeners<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> context<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> analyzers<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动Servlet容器，再启动SpringBoot应用</strong></p><h1 id="3-SpringBoot整合"><a href="#3-SpringBoot整合" class="headerlink" title="3.SpringBoot整合"></a>3.SpringBoot整合</h1><h2 id="1-日志框架"><a href="#1-日志框架" class="headerlink" title="1.日志框架"></a>1.日志框架</h2><h3 id="1-框架选用"><a href="#1-框架选用" class="headerlink" title="1.框架选用"></a>1.框架选用</h3><p>SpringBoot选用<strong>SLF4j</strong>和<strong>logback</strong>日志框架</p><p>SLF4j为抽象框架，不提供具体功能，只对外提供接口</p><p>logback为具体实现框架，SpringBoot不直接使用，而是通过SLF4j进行调用</p><h3 id="2-SLF4j使用"><a href="#2-SLF4j使用" class="headerlink" title="2.SLF4j使用"></a>2.SLF4j使用</h3><p><a href="http://www.slf4j.org/">官方文档</a></p><p><strong>slf4j作用原理</strong></p><p>使用slf4j日志框架时，调用slf4j的api，slf4j再调用真正输出日志的框架</p><p>有些框架有直接与slf4j配合的api，而有些日志框架没有，则需要使用中间jar包进行配合。</p><p>slf4j只是作为一个接口，提供日志服务，真正输出日志的是实现日志框架，所以<strong>日志配置文件要配置实现日志框架的日志</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/slf4j.png"></p><p>所以，在使用slf4j日志框架时，我们至少要导入slf4j的jar包，以及日志实现框架的jar包，如果日志实现框架没有供slf4j调用的接口，则需要添加中间jar包。</p><p><strong>SpringBoot选用 SLF4j和logback</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/SpringBoot%E6%97%A5%E5%BF%97.png"></p><h3 id="3-日志框架统一"><a href="#3-日志框架统一" class="headerlink" title="3.日志框架统一"></a>3.日志框架统一</h3><p>每个框架都有自己的日志框架选择，如Spring使用commons-loging、MyBatis使用log4j2</p><p>为了统一管理，统一输出，在SpringBoot项目中一般统一使用SpringBoot默认的slf4j+logback。</p><h4 id="1-方法"><a href="#1-方法" class="headerlink" title="1.方法"></a>1.方法</h4><p>在导入jar包时，我们不选择原本应导入的jar包，而是选择进行转换操作的替换jar包</p><h4 id="2-替换jar包"><a href="#2-替换jar包" class="headerlink" title="2.替换jar包"></a>2.替换jar包</h4><table><thead><tr><th>原jar包</th><th>替换(转化)jar包</th></tr></thead><tbody><tr><td>commons-logging.jar</td><td>jcl-over-slf4j.jar</td></tr><tr><td>log4j.jar</td><td>log4j-over-slf4j.jar</td></tr><tr><td>java.util.logging.jar</td><td>jul-to-slf4j.jar</td></tr></tbody></table><h4 id="3-工作机制"><a href="#3-工作机制" class="headerlink" title="3.工作机制"></a>3.工作机制</h4><p>​        使用替换jar包之后，在调用其他日志框架时，调用对应api时，替换jar包中有完整的api，但调用这些api并不是调用原本的日志框架，而是经过造作转换到slf4j，再经过slf4j调度之后，使用实现框架进行输出。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%97%A5%E5%BF%97%E8%BD%AC%E6%8D%A2jar4.png"></p><h3 id="4-日志使用"><a href="#4-日志使用" class="headerlink" title="4.日志使用"></a>4.日志使用</h3><h4 id="1-调整日志级别"><a href="#1-调整日志级别" class="headerlink" title="1.调整日志级别"></a>1.调整日志级别</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>  <span class="token key atrule">包名</span><span class="token punctuation">:</span> 级别<span class="token comment"># 设置对应目录下的日志输出级别</span><span class="token comment"># 不能直接在level处设置级别</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有以下几个级别</p><p>1.trace   2.debug   3.error   4.fatal   5.info    6.off   7.warn</p><h4 id="2-指定日志文件保存路径"><a href="#2-指定日志文件保存路径" class="headerlink" title="2.指定日志文件保存路径"></a>2.指定日志文件保存路径</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">file</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/spring<span class="token comment"># D:/spring:在D盘下生成spring文件夹，将日志文件保存在此文件夹下</span><span class="token comment"># /spring:在当前项目所在磁盘根目录下生成spring文件夹，将日志文件保存在此文件夹下</span><span class="token comment"># /***.log:在当前项目所在磁盘根目录下生成log格式文件，用于保存日志信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-设置日志输出格式"><a href="#3-设置日志输出格式" class="headerlink" title="3.设置日志输出格式"></a>3.设置日志输出格式</h4><p>日志输出格式：<br>%d：表示日期时间，<br>%thread：表示线程名，<br>%-5level：级别从左显示5个字符宽度<br>%logger{50} ：表示logger名字最长50个字符，否则按照句点分割。<br>%msg：日志消息，<br>%n：是换行符<br>–&gt;<br>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">pattern</span><span class="token punctuation">:</span>        <span class="token comment">#在控制台输出的日志的格式</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span> <span class="token string">"%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span>        <span class="token comment"># 指定文件中日志输出的格式</span>    <span class="token key atrule">file</span><span class="token punctuation">:</span> <span class="token string">"%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n"</span>        <span class="token comment">#ym文件中在控制台输出的日志的格式、指定文件中日志输出的格式需要使用引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-指定配置"><a href="#5-指定配置" class="headerlink" title="5.指定配置"></a>5.指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- configuration to be enabled when the "staging" profile is active --></span>  可以指定某段配置只在某个环境下生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        日志输出格式：   %d表示日期时间，   %thread表示线程名，   %-5level：级别从左显示5个字符宽度   %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。    %msg：日志消息，   %n是换行符        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----> [%thread] ---> %-5level %logger&#123;50&#125; - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h3 id="6-切换日志框架"><a href="#6-切换日志框架" class="headerlink" title="6.切换日志框架"></a>6.切换日志框架</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换为log4j2</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2.数据库操作"></a>2.数据库操作</h2><h3 id="1-数据库连接池"><a href="#1-数据库连接池" class="headerlink" title="1.数据库连接池"></a>1.数据库连接池</h3><p>SpringBoot 1.x版本默认使用的数据源是tomcat的dbcp数据源</p><p>SpringBoot 2.x版本默认使用的数据源为HikariDataSource数据源</p><p><strong>整合druid连接池</strong></p><p><strong>1.导入druid依赖</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.在配置文件中指定数据源类型</strong> </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>druid数据源配置信息</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span><span class="token comment">#   数据源基本配置</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0829"</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource<span class="token comment">#   数据源其他配置,默认不起作用需要手动配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#    #配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>slf4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.将Druid添加为组件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取配置文件中的配置信息</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置Druid的监控</span>    <span class="token comment">//1、配置一个管理后台的Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//登录后台时用的用户名，用户密码</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//默认就是允许所有访问，设置为localhost就是允许本地访问</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//拒绝谁访问</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span><span class="token string">"192.168.15.21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2、配置一个web监控的filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//排除哪些请求</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置拦截所有请求</span>        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-整合MyBatis"><a href="#2-整合MyBatis" class="headerlink" title="2.整合MyBatis"></a>2.整合MyBatis</h3><h4 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h4><p>1.添加启动器，及数据库依赖等（可以省略添加jdbc启动器）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置配置文件</p><p>参考druid配置</p><p>3.使用</p><p><strong>注解形式</strong></p><p>编写mapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Mapper指定此类是一个指定数据库操作的mapper */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StuMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select*from stu where no=#&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Stu</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from stu where no=#&#123;no&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果主键自增，返回值需要进行回调时，加如@options注解keyProperty值为bean中对应主键的属性名</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into stu values(#&#123;no&#125;,#&#123;name&#125;,#&#123;age&#125;,#&#123;address&#125;)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Stu</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置文件形式</strong></p><p>1.编写全局配置文件</p><p>2.编写映射文件</p><p>3.编写配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml 指定全局配置文件的位置  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/<span class="token important">*.xml</span>  指定sql映射文件的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-驼峰命名转换"><a href="#2-驼峰命名转换" class="headerlink" title="2.驼峰命名转换"></a>2.驼峰命名转换</h4><p>方法一：在配置文件中配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法二：自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span><span class="token class-name">Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurationCustomizer</span> <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//开启驼峰命名发映射规则</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                configuration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-将mapper接口加入容器"><a href="#3-将mapper接口加入容器" class="headerlink" title="3.将mapper接口加入容器"></a>3.将mapper接口加入容器</h4><p>1.在每个mapper接口上添加mapper接口</p><p>2.使用MapperScan批量扫描所有的Mapper接口；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.jxy.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBoot06DataMybatisApplication</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBoot06DataMybatisApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多使用参照<a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">MyBatis官方文档</a></p><h3 id="3-整合MyBatis-Plus"><a href="#3-整合MyBatis-Plus" class="headerlink" title="3.整合MyBatis-Plus"></a>3.整合MyBatis-Plus</h3><p>1.将MyBatis启动器替换为MyBatis-Plus启动器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1.tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置数据库及数据源相关配置</p><p>参考Druid数据源配置</p><p>3.创建mapper包保存mapper接口</p><p>4.在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.jxy.mapper"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.编写数据库对应的javaBean(使用lambok更高效简洁)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.编写mapper接口继承BaseMapper&lt;对应实体类&gt;类</p><p>7.配置别名</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.jxy.pojo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.编写三层结构使用</p><h3 id="4-整合SpringData-jpa"><a href="#4-整合SpringData-jpa" class="headerlink" title="4.整合SpringData jpa"></a>4.整合SpringData jpa</h3><p>1.配置数据库环境，参连接池配置</p><p>2.创建实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-11 11:34 */</span><span class="token annotation punctuation">@Data</span><span class="token comment">//告诉jpa这是一个与数据库表进行映射的实体类</span><span class="token annotation punctuation">@Entity</span><span class="token comment">//指定与哪个表进行映射</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"teacher"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"hibernateLazyInitializer"</span><span class="token punctuation">,</span> <span class="token string">"handler"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置主键自增</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.创建Repository接口，作为dao层，不用添加@Repository注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-11 11:45 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TeacherRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.在配置文件中配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token comment">#设置项目启动时更新或者创建数据表结构</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update    <span class="token comment">#设置运行时，在日志中输出sql语句</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.测试</p><p>简单测试，直接在controller层中调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-11 11:58 */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">TeacherRepository</span> teacherRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Teacher</span> save <span class="token operator">=</span> teacherRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> save<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> teacherRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> all<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/one"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span> <span class="token function">queryOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Teacher</span> one <span class="token operator">=</span> teacherRepository<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> one<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-整合SpringData-Redis"><a href="#5-整合SpringData-Redis" class="headerlink" title="5.整合SpringData Redis"></a>5.整合SpringData Redis</h3><h4 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置文件-1"><a href="#2-配置文件-1" class="headerlink" title="2.配置文件"></a>2.配置文件</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">30</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-配置RedisTemplate"><a href="#3-配置RedisTemplate" class="headerlink" title="3.配置RedisTemplate"></a>3.配置RedisTemplate</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Json序列化配置</span>    <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect</span><span class="token punctuation">.</span><span class="token class-name">Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper</span><span class="token punctuation">.</span><span class="token class-name">DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// String 的序列化</span>    <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// key采用String的序列化方式</span>    template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hash的key也采用String的序列化方式</span>    template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// value序列化方式采用jackson</span>    template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hash的value序列化方式采用jackson</span>    template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ValueOperations</span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>operations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-整合Shiro"><a href="#3-整合Shiro" class="headerlink" title="3.整合Shiro"></a>3.整合Shiro</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--shiro-spring--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--shiro-Thymeleaf--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义Realm"><a href="#2-自定义Realm" class="headerlink" title="2.自定义Realm"></a>2.自定义Realm</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义Realm * @author : 靳新宇 * @date : 2020-07-15 08:42 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token comment">/**     * @description: 授权     * @author 靳新宇     * @date 2020/7/15 8:59    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principalCollection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        String username = (String) principalCollection.getPrimaryPrincipal();</span><span class="token comment">//        Set&lt;String> roles = roleService.queryRoleNameByUsername(username);</span><span class="token comment">//        Set&lt;String> permissions = permissionService.queryPermissionNameByUsername(username);</span><span class="token comment">//        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo(roles);</span><span class="token comment">//        simpleAuthorizationInfo.setStringPermissions(permissions);</span><span class="token comment">//        return simpleAuthorizationInfo;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 登录     * @author 靳新宇     * @date 2020/7/15 8:59    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取用户登录时，使用的用户名</span>        <span class="token class-name">UsernamePasswordToken</span> token<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">)</span>authenticationToken<span class="token punctuation">;</span>        <span class="token class-name">User</span> user<span class="token operator">=</span>userService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否存在该用户，不存在，返回空，之后会抛出UnkonwAccountException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将用户信息封装在SimpleAuthenticationInfo中</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*ByteSource.Util.bytes(user.getSalt()), */</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写shiro配置类"><a href="#3-编写shiro配置类" class="headerlink" title="3.编写shiro配置类"></a>3.编写shiro配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * shiro配置类 * 添加shiro三大组件：ShiroFilterFactoryBean、DefaultWebSecurityManager以及自定义Realm * * @author : 靳新宇 * @date : 2020-07-15 08:27 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @description: ShiroFilterFactoryBean     * @author 靳新宇     * @date 2020/7/15 8:41     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ShiroFilterFactoryBean</span> <span class="token function">shiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"defaultWebSecurityManager"</span><span class="token punctuation">)</span> <span class="token class-name">DefaultWebSecurityManager</span> defaultWebSecurityManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ShiroFilterFactoryBean</span> shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置安全管理器</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加shiro内置过滤器</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置跳转登录</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: DefaultWebSecurityManager     * @author 靳新宇     * @date 2020/7/15 9:00     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DefaultWebSecurityManager</span> <span class="token function">defaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"myRealm"</span><span class="token punctuation">)</span> <span class="token class-name">MyRealm</span> myRealm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultWebSecurityManager</span> defaultWebSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>myRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultWebSecurityManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 自定义Realm     * @author 靳新宇     * @date 2020/7/15 8:41     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MyRealm</span> <span class="token function">myRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: Thymeleaf整合shiro     * @author 靳新宇     * @date 2020/7/15 11:16    */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ShiroDialect</span> <span class="token function">shiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置异常拦截器"><a href="#4-配置异常拦截器" class="headerlink" title="4.配置异常拦截器"></a>4.配置异常拦截器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 异常拦截器 * @author : 靳新宇 * @date : 2020-07-15 09:57 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.jxy.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionHandleController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @description: shiro处理账号或密码错去     * @author 靳新宇     * @date 2020/7/15 10:00    */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">UnknownAccountException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">IncorrectCredentialsException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"账号或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Thymeleaf中使用shiro标签"><a href="#5-Thymeleaf中使用shiro标签" class="headerlink" title="5.Thymeleaf中使用shiro标签"></a>5.Thymeleaf中使用shiro标签</h3><h5 id="1-导入命名空间"><a href="#1-导入命名空间" class="headerlink" title="1.导入命名空间"></a>1.导入命名空间</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAnyRoles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro</title>
      <link href="2020/09/18/Shiro/"/>
      <url>2020/09/18/Shiro/</url>
      
        <content type="html"><![CDATA[<p>​        Apache Shiro（读作“sheeroh”，即日语“<a href="https://baike.baidu.com/item/%E5%9F%8E">城</a>”）是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90">开源</a>安全框架，提供<a href="https://baike.baidu.com/item/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">身份验证</a>、<a href="https://baike.baidu.com/item/%E6%8E%88%E6%9D%83">授权</a>、<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6">密码学</a>和<a href="https://baike.baidu.com/item/%E4%BC%9A%E8%AF%9D">会话</a>管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><a id="more"></a><h1 id="1-Shiro入门"><a href="#1-Shiro入门" class="headerlink" title="1.Shiro入门"></a>1.Shiro入门</h1><h2 id="1-shiro简介"><a href="#1-shiro简介" class="headerlink" title="1.shiro简介"></a>1.shiro简介</h2><p>​        Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p><p>​        Shiro 可以⾮常容易的开发出⾜够好的应⽤，其不仅可以⽤在JavaSE 环境，也可以⽤在 JavaEE 环境。功能强⼤且易⽤，可以快速轻松地保护任何应⽤程序 ( 从最⼩的移动应⽤程序到最⼤的Web和企业应⽤程序)。</p><p>​        ⽅便的与Web 集成和搭建缓存。</p><h2 id="2-功能简介"><a href="#2-功能简介" class="headerlink" title="2.功能简介"></a>2.功能简介</h2><ul><li>Authentication：身份认证/登录，验证⽤户是不是拥有相应的身份；</li><li>Authorization：授权，即权限验证，验证某个已认证的⽤户是否拥有某个权限；即判断⽤户是否能进⾏什么操作。如：验证某个⽤户是否拥有某个⻆⾊。或者细粒度的验证某个⽤户对某个资源是否具有某个权限；</li><li>Session Manager：会话管理，即⽤户登录后就是⼀次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境，也可以是 Web 环境的；</li><li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，⽽不是明⽂存储；</li><li>Web Support：Web ⽀持，可以⾮常容易的集成到Web 环境；</li><li>Caching：缓存，⽐如⽤户登录后，其⽤户信息、拥有的⻆⾊/权限不必每次去查，这样可以提⾼效率；</li><li>Remember Me：记住我，这个是⾮常常⻅的功能，即⼀次登录后，下次再来的话可以⽴即知道你是哪个⽤户</li></ul><h2 id="3-三个核心组件"><a href="#3-三个核心组件" class="headerlink" title="3.三个核心组件"></a>3.三个核心组件</h2><p>Subject, SecurityManager 和 Realms.</p><h3 id="1-Subject"><a href="#1-Subject" class="headerlink" title="1.Subject"></a>1.Subject</h3><p>​        即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。</p><h3 id="2-SecurityManager"><a href="#2-SecurityManager" class="headerlink" title="2.SecurityManager"></a>2.SecurityManager</h3><p>　　Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。<br>　　SecurityManager：它是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</p><h3 id="3-Realm"><a href="#3-Realm" class="headerlink" title="3.Realm"></a>3.Realm</h3><p>​        Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。<br>　　从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。<br>　　Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果缺省的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。</p><h2 id="4-数据库相关"><a href="#4-数据库相关" class="headerlink" title="4.数据库相关"></a>4.数据库相关</h2><p>一般分别为五张表</p><p>用户表</p><p>角色表</p><p>用户角色表</p><p>权限表</p><p>角色权限表</p><h2 id="5-入门示例"><a href="#5-入门示例" class="headerlink" title="5.入门示例"></a>5.入门示例</h2><h3 id="1-依赖jar包"><a href="#1-依赖jar包" class="headerlink" title="1.依赖jar包"></a>1.依赖jar包</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><p>IDEA需要下载一个插件Ini来识别ini格式文件ini文件中没有标签但分区域，用中括号分开‘</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#定义⽤户信息</span><span class="token comment">#格式：⽤户名=密码,⻆⾊1,⻆⾊2,....</span><span class="token selector">[users]</span><span class="token constant">zhangsan</span><span class="token attr-value"><span class="token punctuation">=</span>123,admin</span><span class="token constant">lisi</span><span class="token attr-value"><span class="token punctuation">=</span>456,manager,seller</span><span class="token constant">wangwu</span><span class="token attr-value"><span class="token punctuation">=</span>789,clerk</span><span class="token comment"># -----------------------------------------------------------------------------</span><span class="token comment"># ⻆⾊及其权限信息</span><span class="token comment"># 预定权限：user:query</span><span class="token comment"># user:detail:query</span><span class="token comment"># user:update</span><span class="token comment"># user:delete</span><span class="token comment"># user:insert</span><span class="token comment"># order:update</span><span class="token comment"># ....</span><span class="token selector">[roles]</span><span class="token comment"># admin 拥有所有权限,⽤*表示</span><span class="token constant">admin</span><span class="token attr-value"><span class="token punctuation">=</span>*</span><span class="token comment"># clerk 只有查询权限</span><span class="token constant">clerk</span><span class="token attr-value"><span class="token punctuation">=</span>user:query,user:detail:query</span><span class="token comment"># manager 有 user 的所有权限</span><span class="token constant">manager</span><span class="token attr-value"><span class="token punctuation">=</span>user:*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>权限规则</p><p>最常⽤的权限标识：【资源 ：操作】</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">1> user:query , user:insert , order:delete , menu:show【:】 作为内部分隔符，分隔资源和操作 【资源:操作]【,】 作为分隔，分隔多个权限【权限1,权限2,权限3】2> user:* , *:query【*】 作为通配符，代表所有操作、资源【user:* 即user的所有操作】【*:query 即所有资源的查询操作】3> *<span class="token constant">【代表⼀切资源的⼀切权限</span> <span class="token attr-value"><span class="token punctuation">=</span> 最⾼权限】</span>4> 细节：1)【user:* 可以匹配 user:xx, user:xx:xxx】【*:query 只可以匹配 xx:query,不能匹配 xx:xx:query. 除⾮ *:*:query】2)【user:update,user:insert】 可以用双引号包住，简写为 【"user:update,insert"】<span class="token selector">[roles]</span><span class="token constant">manager1</span><span class="token attr-value"><span class="token punctuation">=</span>user:query,user:update,user:insert</span><span class="token constant">manager2</span><span class="token attr-value"><span class="token punctuation">=</span>"user:query,update,insert" #注意要加引号</span><span class="token comment">#如上manager1和manager2权限等价</span><span class="token comment">#subject.isPermittedAll("user:update","user:insert","user:query")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例级权限标识：【资源 ：操作 ：实例】，粒度细化到具体某个资源实例，例如针对某个用户，而不是全体用户</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">1> user:update:1 , user:delete:1<span class="token comment"># 对⽤户1可以update,对⽤户1可以delete</span>2> "user:update,delete:1" #和上⾯等价<span class="token comment"># subject.isPermittedAll("user:update,delete:1","user:update:1","user:delete:1")</span>3> user:*:1 , user:update:* , user:*:*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-测试程序"><a href="#3-测试程序" class="headerlink" title="3.测试程序"></a>3.测试程序</h3><p><strong>测试</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//IniSecurityManagerFactory已过时，使用DefaultSecurityManager</span>    <span class="token class-name">DefaultSecurityManager</span> securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IniRealm</span> iniRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniRealm</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>iniRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将SecurityManager托管到SecurityUtils⼯具类中(ops:之后可以不必关⼼SecurityManager)</span>    <span class="token comment">//因为直接操作SecurityManager太复杂、易出错。</span>    <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*获得Subject，通过subject可以执⾏shiro的相关功能操作(身份认证或权限校验等)几乎所有操作，除了加密，因为加密是其他模块，可以在架构图看到。每次创建了subject都会从session中同步一下信息。直接由用户使用，调用功能简单，其底层调用Securitymanager的相关流程*/</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//登录成功后，用户信息会存放在Subject对象中</span>    <span class="token comment">//查看是否登录</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//getPrincipal()获取用户凭证，用户名</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//检测身份</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查看权限</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"a:b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"user:insert"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//退出登录，消除所有登录信息</span>    subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-none"><code class="language-none">log4j:WARN No appenders could be found for logger (org.apache.shiro.io.ResourceUtils).log4j:WARN Please initialize the log4j system properly.log4j:WARN See http:&#x2F;&#x2F;logging.apache.org&#x2F;log4j&#x2F;1.2&#x2F;faq.html#noconfig for more info.falsetrue张三truetruetruelog4j:WARN No appenders could be found for logger (org.apache.shiro.io.ResourceUtils).log4j:WARN Please initialize the log4j system properly.log4j:WARN See http:&#x2F;&#x2F;logging.apache.org&#x2F;log4j&#x2F;1.2&#x2F;faq.html#noconfig for more info.falsetrue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>账号出错UnknownAccountException</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%B4%A6%E5%8F%B7%E5%BC%82%E5%B8%B8.png"></p><p>密码出错IncorrectCredentialsException</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%AF%86%E7%A0%81%E5%BC%82%E5%B8%B8.png"></p><h1 id="2-Shiro-Web项目"><a href="#2-Shiro-Web项目" class="headerlink" title="2.Shiro_Web项目"></a>2.Shiro_Web项目</h1><h2 id="1-shiro-ini配置文件"><a href="#1-shiro-ini配置文件" class="headerlink" title="1.shiro.ini配置文件"></a>1.shiro.ini配置文件</h2><p>连接数据库后[users]和[roles]可以省略，身份信息，权限信息直接从数据库中获取。</p><p><strong>[users]：</strong>用户信息</p><p>用户名=密码，身份</p><p><strong>[roles]：</strong>身份拥有的权限</p><p>身份=权限</p><p><code>x.*</code>表示x:开头的所有权限</p><p><strong>[main]：</strong></p><p>身份验证操作</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">shiro.loginUrl</span> <span class="token attr-value"><span class="token punctuation">=</span>（url）：没有身份认证时，跳转到..</span><span class="token constant">shiro.unauthorizedUrl</span><span class="token attr-value"><span class="token punctuation">=</span>（url）：⻆⾊或权限校验不通过时，跳转到..</span><span class="token constant">shiro.redirectUrl</span><span class="token attr-value"><span class="token punctuation">=</span>（url）：登出后的跳转地址,回到..</span><span class="token constant">shiro.postOnlyLogout</span><span class="token attr-value"><span class="token punctuation">=</span>true</span>此处实在安装⾃定义Realm 指定realm<span class="token constant">声明Realm名称</span> <span class="token attr-value"><span class="token punctuation">=</span> Realm类路径</span><span class="token comment">#安装Reaml关联到SecurityManager</span><span class="token constant">securityManager.realms</span><span class="token attr-value"><span class="token punctuation">=</span>$Realm名称1,$Realm名称2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>[urls]：</strong>访问某页面所需要的权限</p><p>页面=条件1，条件2</p><table><thead><tr><th><strong>条件</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>anon</td><td>不需要身份认证</td></tr><tr><td>authc</td><td>会验证是否已经认证身份，登录之后才能访问，没有身份认证时跳转到shiro.loginUrl</td></tr><tr><td>logout</td><td>访问指定的路径，可以登出,不⽤定义handler</td></tr><tr><td>authcBasic</td><td>通过HttpBasic验证，未通过则跳转到登录页面</td></tr><tr><td>noSessionCreation</td><td>组织请求期间创建新的会话，以保证无状态的体验</td></tr><tr><td>perms</td><td>参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割。当有多个参数时必须每个参数都通过才通过，想当于 is PermitedAJIO方法。</td></tr><tr><td>rest</td><td>根据请求的方法</td></tr><tr><td>roles</td><td>角色过滤器，判断当前用户是否指定角色。参数可以写多个，多个时必须加上引号，并且参数之间用逗号分隔，当有多个参数时，每个参数通过才算通过，相当于 hasAlIRoleso方法</td></tr><tr><td>ssl</td><td>安全的url请求，协议为https</td></tr><tr><td>users</td><td>存在用户</td></tr></tbody></table><p>roles[“身份1”,”身份2”] ： 指定路径的访问需要登录角色要有这些身份。</p><p>perms[“权限1”,”权限2”]：指定路径的访问需要有这些权限。</p><p><strong>通配符</strong></p><p>/x/*:代表x下还有⼀级任意路径</p><p>/x/** 代表/user后还有任意多级任意路径注意url的匹配，是从上到下匹配，⼀旦找到可以匹配的则停⽌，所以，通配范围⼤的url要往后放</p><p>如”/user/delete” 和 “/user/**”</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[users]</span><span class="token constant">用户名</span><span class="token attr-value"><span class="token punctuation">=</span>密码，身份</span><span class="token selector">[roles]</span><span class="token constant">身份</span><span class="token attr-value"><span class="token punctuation">=</span>权限</span><span class="token selector">[main]</span><span class="token comment">#没有身份认证时，跳转地址</span><span class="token constant">shiro.loginUrl</span> <span class="token attr-value"><span class="token punctuation">=</span> ...</span><span class="token comment">#⻆⾊或权限校验不通过时，跳转地址</span><span class="token constant">shiro.unauthorizedUrl</span><span class="token attr-value"><span class="token punctuation">=</span>...</span><span class="token comment">#登出后的跳转地址,回⾸⻚</span><span class="token constant">shiro.redirectUrl</span><span class="token attr-value"><span class="token punctuation">=</span>...</span><span class="token selector">[urls]</span>路径：条件<span class="token comment">#其余路径都需要身份认证【⽤此路径需谨慎】</span><span class="token constant">/**</span> <span class="token attr-value"><span class="token punctuation">=</span> authc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-web-xml"><a href="#2-web-xml" class="headerlink" title="2.web.xml"></a>2.web.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.apache.shiro.web.servlet.ShiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 在项⽬启动时，加载web-info 或 classpath下的 shiro.ini ，并构建WebSecurityManager。构建所有配置中使⽤的过滤器链(anon,authc等)，ShiroFilter会获取此过滤器链--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.apache.shiro.web.env.EnvironmentLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>shiro配置文件默认名为shiro.ini，如果需要指定名字，可在web.xml文件中进行配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>shiroConfigLocations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:文件名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-自定义Realm"><a href="#3-自定义Realm" class="headerlink" title="3.自定义Realm"></a>3.自定义Realm</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @author : 靳新宇* @date : 2020-07-13 15:08*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*** @description: 查询权限信息* 何时触发：需要使用权限时* 查询方式：通过用户名查询用户 权限/角色 信息* @author 靳新宇* @date 2020/7/13 15:08*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principalCollection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RoleService</span> roleService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"roleServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">RoleServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PermissionService</span> permissionService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"permissionServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">PermissionServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> roles <span class="token operator">=</span> roleService<span class="token punctuation">.</span><span class="token function">queryRoleNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">queryPermissionNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*** @description:查询身份信息.并返回集合，不用比对 查询方式：通过用户名查询用户信息* 触发时机：subject.login(token)* @author 靳新宇* @date 2020/7/13 15:09*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取用户登录时，使用的用户名</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用service层查询用户信息</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否存在该用户，不存在，返回空，之后会抛出UnkonwAccountException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将用户信息封装在SimpleAuthenticationInfo中</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.将自定义的Realm配置带ini配置文件中</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#注意：此处实在安装⾃定义Realm 指定realm</span><span class="token comment">#声明Realm 名称 = Realm类路径</span><span class="token constant">realm1</span> <span class="token attr-value"><span class="token punctuation">=</span> com.jxy.realm.MyRealm</span><span class="token comment">#安装Reaml 关联到SecurityManager</span><span class="token constant">securityManager.realms</span><span class="token attr-value"><span class="token punctuation">=</span>$realm1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-异常处理器"><a href="#4-异常处理器" class="headerlink" title="4.异常处理器"></a>4.异常处理器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-13 08:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">IncorrectCredentialsException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ⻆⾊不⾜</span>            <span class="token comment">//跳转权限不⾜的⻚⾯</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/perms/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">UnauthenticatedException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//没有登录 没有合法身份</span>            <span class="token comment">//跳转登录⻚⾯，重新登录</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入IOC容器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.resolver.MyExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-shiro标签"><a href="#5-shiro标签" class="headerlink" title="5.shiro标签"></a>5.shiro标签</h2><p>1.guest标签</p><p>用户没有身份验证时显示相应信息，即游客访问信息。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>guest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>guest</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.user标签</p><p>用户已经身份验证/记住我登录后显示相应的信息。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.authenticated标签</p><p>用户已经身份验证通过，即Subject.login登录成功，不是记住我登录的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>authenticated</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>authenticated</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.notAuthenticated标签</p><p>用户已经身份验证通过，即没有调用Subject.login进行登录，包括记住我自动登录的也属于未进行身份验证。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>notAuthenticated</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>notAuthenticated</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.principal标签</p><p>相当于((User)Subject.getPrincipals()).getUsername()。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span></span> <span class="token attr-name">principal</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>principal</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.lacksPermission标签</p><p>如果当前Subject没有权限将显示body体内容。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>lacksPermission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org:create<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>lacksPermission</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.hasRole标签</p><p>如果当前Subject有角色将显示body体内容。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasRole</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasRole</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.hasAnyRoles标签</p><p>如果当前Subject有任意一个角色（或的关系）将显示body体内容。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasAnyRoles</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin,user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasAnyRoles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.lacksRole标签</p><p>如果当前Subject没有角色将显示body体内容。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>lacksRole</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>lacksRole</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.hasPermission标签</p><p>如果当前Subject有权限将显示body体内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasPermission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:create<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasPermission</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-加密"><a href="#3-加密" class="headerlink" title="3.加密"></a>3.加密</h1><h2 id="1-Shiro加密简介"><a href="#1-Shiro加密简介" class="headerlink" title="1.Shiro加密简介"></a>1.Shiro加密简介</h2><p>⽤户的密码是不允许明⽂存储的，因为⼀旦数据泄露，⽤户的隐私信息会完全暴露。 密码必须结果加密，⽣成密⽂，然后数据库中只存储⽤户的密码的密⽂。</p><p>在加密过程中需要使⽤到⼀些”不可逆加密”，如 md5,sha等</p><p>shiro⽀持hash(散列)加密，常见的如 md5, sha等</p><p>基本加密过程：md5(明⽂)，sha(明⽂) 得到明⽂的密⽂，但明⽂可能⽐较简单，导致密⽂容易被破解。</p><p>加盐加密过程：系统⽣成⼀个随机salt=”xxxxxx”, md5(明⽂+salt) ,sha(明⽂+salt)，则提升了密⽂的复杂度。</p><p>加盐多次迭代加密过程：如果迭代次数为2，则加密2次： md5(明⽂+salt)=密⽂a ， md5(密⽂a+salt)=最终密⽂</p><p>sha(明⽂+salt)=密⽂a ， sha(密⽂a+salt)=最终密⽂ 则进⼀步提升了密⽂的复杂度，和被破解的难度。加密过程中建议使⽤salt，并指定迭代次数，迭代次数的建议值1000+</p><p>实例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> password<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//密码明⽂</span><span class="token class-name">String</span> salt<span class="token operator">=</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//盐</span><span class="token class-name">Integer</span> iter <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//迭代次数</span><span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Md5Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span>iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//md5加密</span><span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Md5Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//加密后转base64</span><span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sha256Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sha256加密</span><span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sha256Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加密后转base64</span><span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sha512Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sha256加密</span><span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sha512Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//加密后转base64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Shiro加密流程"><a href="#2-Shiro加密流程" class="headerlink" title="2.Shiro加密流程"></a>2.Shiro加密流程</h2><h3 id="1-注册加密信息"><a href="#1-注册加密信息" class="headerlink" title="1.注册加密信息"></a>1.注册加密信息</h3><p>注册时使用加密，保存加密后的密码，如果使用加盐加密，同时要将“盐”保存在数据库中，一遍登陆时使用。</p><p>通常注册加密写在service层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//随机生成“盐”</span>    <span class="token class-name">String</span> salt <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用sha加密密码</span>    <span class="token class-name">String</span> base64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sha256Hash</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> salt<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保存加密后的密码</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保存随机生成的盐</span>    user<span class="token punctuation">.</span><span class="token function">setSalt</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">;</span>    userDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-登录密码比对"><a href="#2-登录密码比对" class="headerlink" title="2.登录密码比对"></a>2.登录密码比对</h3><h4 id="1-指定比对器"><a href="#1-指定比对器" class="headerlink" title="1.指定比对器"></a>1.指定比对器</h4><p>声明在shiro.ini配置文件中的[main]标签中</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[main]</span><span class="token comment">#没有身份认证时，跳转地址</span><span class="token constant">shiro.loginUrl</span> <span class="token attr-value"><span class="token punctuation">=</span> /user/login</span><span class="token comment">#⻆⾊或权限校验不通过时，跳转地址</span><span class="token constant">shiro.unauthorizedUrl</span> <span class="token attr-value"><span class="token punctuation">=</span> /fail.jsp</span><span class="token comment">#登出后的跳转地址,回⾸⻚</span><span class="token constant">shiro.redirectUrl</span> <span class="token attr-value"><span class="token punctuation">=</span> /</span><span class="token constant">shiro.postOnlyLogout</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token comment">#注意：此处实在安装⾃定义Realm 指定realm</span><span class="token comment">#声明Realm 名称 = Realm类路径</span><span class="token constant">realm1</span> <span class="token attr-value"><span class="token punctuation">=</span> com.jxy.realm.MyRealm</span><span class="token comment">#声明密码⽐对器</span><span class="token constant">credentialsMatcher</span><span class="token attr-value"><span class="token punctuation">=</span>org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><span class="token comment">#声明加密算法</span><span class="token constant">credentialsMatcher.hashAlgorithmName</span><span class="token attr-value"><span class="token punctuation">=</span>sha-256</span><span class="token comment">#声明迭代次数</span><span class="token constant">credentialsMatcher.hashIterations</span><span class="token attr-value"><span class="token punctuation">=</span>10000</span><span class="token comment">#true=hex格式 false=base64格式</span><span class="token constant">credentialsMatcher.storedCredentialsHexEncoded</span><span class="token attr-value"><span class="token punctuation">=</span>false</span><span class="token comment">#将密码比对器注册在realm中</span><span class="token constant">realm1.credentialsMatcher</span><span class="token attr-value"><span class="token punctuation">=</span>$credentialsMatcher</span><span class="token comment">#安装Reaml 关联到SecurityManager</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在realm中加入”盐“</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ByteSource</span><span class="token punctuation">.</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @author : 靳新宇* @date : 2020-07-13 15:08*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span><span class="token comment">/*** @description: 查询权限信息* 何时触发：需要使用权限时* 查询方式：通过用户名查询用户 权限/角色 信息* @author 靳新宇* @date 2020/7/13 15:08*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principalCollection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RoleService</span> roleService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"roleServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">RoleServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PermissionService</span> permissionService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"permissionServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">PermissionServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> roles <span class="token operator">=</span> roleService<span class="token punctuation">.</span><span class="token function">queryRoleNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">queryPermissionNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*** @description:查询身份信息.并返回集合，不用比对 查询方式：通过用户名查询用户信息* 触发时机：subject.login(token)* @author 靳新宇* @date 2020/7/13 15:09*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取用户登录时，使用的用户名</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用service层查询用户信息</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否存在该用户，不存在，返回空，之后会抛出UnkonwAccountException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将用户信息封装在SimpleAuthenticationInfo中</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ByteSource</span><span class="token punctuation">.</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此时再去登录时shiro会自动将输入的明文密码转换为密文密码，在于保存到密码进行比对。</strong></p><h1 id="4-Spring整合Shiro"><a href="#4-Spring整合Shiro" class="headerlink" title="4.Spring整合Shiro"></a>4.Spring整合Shiro</h1><h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置spring配置文件"><a href="#2-配置spring配置文件" class="headerlink" title="2.配置spring配置文件"></a>2.配置spring配置文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--=========================导入自定义realm========================--></span><span class="token comment">&lt;!--密码比对器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.authc.credential.HashedCredentialsMatcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashAlgorithmName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SHA-256<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>storedCredentialsHexEncoded<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashIterations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.realm.MyRealm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--service对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>permissionService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>permissionServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--对比器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=========================SecurityManager========================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=========================shiroFilter========================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入核心对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unauthorizedUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/fail.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterChainDefinitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>            /user/login= anon            /user/login = anon            /user/query = authc            /user/update = authc,roles["monitor","student"]            /user/delete = authc            /user/logout=logout        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-配置web-xml"><a href="#3-配置web-xml" class="headerlink" title="3.配置web.xml"></a>3.配置web.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--=================================spring配置文件======================================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--================================springMVC配置文件====================================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=================================shiro配置文件======================================--></span><span class="token comment">&lt;!--要与spring配置文件中的bean id相同--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>targetFilterLifecycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-配置自定义realm"><a href="#4-配置自定义realm" class="headerlink" title="4.配置自定义realm"></a>4.配置自定义realm</h2><p>使用spring注入方式替代getbean()方法。</p><p>以下的就可以被替换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RoleService</span> roleService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"roleServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">RoleServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PermissionService</span> permissionService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"permissionServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">PermissionServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userServiceImpl"</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用set注入也可以使用自动注入，但由于spring配置文件中还要配置对比器，所以set注入更合适。</p><p>@Setter为lomok注解，作用为本类中所有属性添加set方法。</p><p><strong>整合之后的自定义realm</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @author : 靳新宇* @date : 2020-07-13 15:08*/</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">RoleService</span> roleService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PermissionService</span> permissionService<span class="token punctuation">;</span>    <span class="token comment">/*** @description: 查询权限信息* 何时触发：需要使用权限时* 查询方式：通过用户名查询用户 权限/角色 信息* @author 靳新宇* @date 2020/7/13 15:08*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principalCollection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> roles <span class="token operator">=</span> roleService<span class="token punctuation">.</span><span class="token function">queryRoleNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">queryPermissionNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*** @description:查询身份信息.并返回集合，不用比对 查询方式：通过用户名查询用户信息* 触发时机：subject.login(token)* @author 靳新宇* @date 2020/7/13 15:09*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取用户登录时，使用的用户名</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用service层查询用户信息</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否存在该用户，不存在，返回空，之后会抛出UnkonwAccountException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将用户信息封装在SimpleAuthenticationInfo中</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ByteSource</span><span class="token punctuation">.</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-完整配置"><a href="#5-完整配置" class="headerlink" title="5.完整配置"></a>5.完整配置</h2><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--==============shiro===============--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--==============Spring===============--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--=================mybatis==================--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--=================数据库==================--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--=================日志==================--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showDeprecation</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showDeprecation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-web-xml-1"><a href="#2-web-xml-1" class="headerlink" title="2.web.xml"></a>2.web.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--要与spring配置文件中的bean id相同--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>targetFilterLifecycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-spring配置文件"><a href="#3-spring配置文件" class="headerlink" title="3.spring配置文件"></a>3.spring配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Spring配置文件扫描除Controller注解的所有的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--==================================数据源配置======================================--></span><span class="token comment">&lt;!--加载数据库配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置Druid数据源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/shiro?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0829<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--==================================spring-mybatis整合配置================================--></span><span class="token comment">&lt;!--配置MyBatis整合--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定mybatis全局配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定mapper配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/jxy/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--将mybatis接口加入到ioc容器中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--加载shiro的配置文件，可放在一起，也可单独写在一个配置文件中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:shiro_applicationContext.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-springmvc配置文件"><a href="#4-springmvc配置文件" class="headerlink" title="4.springmvc配置文件"></a>4.springmvc配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置视图解析器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给返回值加前缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给返回值加后缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.resolver.MyExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-shiro配置文件"><a href="#5-shiro配置文件" class="headerlink" title="5.shiro配置文件"></a>5.shiro配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--=========================导入自定义realm========================--></span><span class="token comment">&lt;!--密码比对器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.authc.credential.HashedCredentialsMatcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashAlgorithmName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SHA-256<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>storedCredentialsHexEncoded<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashIterations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.realm.MyRealm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--service对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>permissionService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>permissionServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--对比器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=========================SecurityManager========================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=========================shiroFilter========================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入核心对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unauthorizedUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/fail.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterChainDefinitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>            /user/login= anon            /user/login = anon            /user/query = authc            /user/update = authc,roles["monitor","student"]            /user/delete = authc            /user/logout=logout        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-自定义Realm"><a href="#6-自定义Realm" class="headerlink" title="6.自定义Realm"></a>6.自定义Realm</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-13 15:08 */</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">RoleService</span> roleService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PermissionService</span> permissionService<span class="token punctuation">;</span>    <span class="token comment">/**     * @description: 查询权限信息     * 何时触发：需要使用权限时     * 查询方式：通过用户名查询用户 权限/角色 信息     * @author 靳新宇     * @date 2020/7/13 15:08     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principalCollection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> roles <span class="token operator">=</span> roleService<span class="token punctuation">.</span><span class="token function">queryRoleNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">queryPermissionNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description:查询身份信息.并返回集合，不用比对 查询方式：通过用户名查询用户信息     * 触发时机：subject.login(token)     * @author 靳新宇     * @date 2020/7/13 15:09     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取用户登录时，使用的用户名</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否存在该用户，不存在，返回空，之后会抛出UnkonwAccountException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将用户信息封装在SimpleAuthenticationInfo中</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ByteSource</span><span class="token punctuation">.</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-异常处理器"><a href="#7-异常处理器" class="headerlink" title="7.异常处理器"></a>7.异常处理器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-13 08:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">IncorrectCredentialsException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ⻆⾊不⾜</span>            <span class="token comment">//跳转权限不⾜的⻚⾯</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/perms/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">UnauthenticatedException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//没有登录 没有合法身份</span>            <span class="token comment">//跳转登录⻚⾯，重新登录</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入IOC容器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.resolver.MyExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-Session管理"><a href="#5-Session管理" class="headerlink" title="5.Session管理"></a>5.Session管理</h1><p>shiro作为⼀款安全管理框架，对状态保持有很强的需要。<br>⽐如最常⽤的⽤户认证，就必需状态的保持，以及其他的⼀些功能实现的需要。<br>【shiro需要：认证中的 记住我中的⽤户名 正式登陆的⽤户名 】</p><p>【 开发者需要：其他功能中需要存⼊session的值 】</p><p>shiro提供了⼀整套session管理⽅案.</p><p><strong>1. shiro的session⽅案和任何<code>容器⽆关</code>(如servlet容器)；</strong><br><strong>2. javaSE也可以使⽤；相关组件都是pojo对ioc极其友好(⽅便的管理对象和满⾜依赖关系，定制参数)</strong><br><strong>3. 可以⽅便的扩展定制存储位置(<code>内存，缓存，数据库</code>等)</strong><br><strong>4. 对<code>web透明</code>⽀持：⽤了shiro的session后，项⽬中关于session的代码完全不⽤任何改动</strong><br><strong>5. 提供了全⾯的session<code>监听</code>机制，和session<code>检测</code>机制，对session可以细粒度操作</strong></p><p>即，使⽤了shiro后，采⽤shiro的session⽅案是最优的⽅案。</p><h2 id="1-javaSE环境-（了解）"><a href="#1-javaSE环境-（了解）" class="headerlink" title="1. javaSE环境 （了解）"></a>1. javaSE环境 （了解）</h2><p>shiro 的session管理⽅案，可以在javaSE中使⽤，实⽤价值不⼤。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取session</span><span class="token class-name">Session</span> session <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//session超时时间，单位：毫秒；0，⻢上过期；正数，则空闲对应毫秒后过期；负数，则不会过期</span>session<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//session存、取值</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取sessionID</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 销 毁 session session.stop();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">原理，核⼼对象：1.SimpleSessionSession的实现类，完成session基本功能。2.SimpleSessionFactory⽣产SimpleSession3.SessionDAO默认的实现类：MemorySessionDAO，由SessionManager创建，负责存储所有session对象，存储位置：内存4.DefaultSessionManager由SecurityManager创建，负责创建、管理SessionFactory和SessionDAO。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//核⼼类演示： （ ops:实际开发不⽤⼿动创建，shiro会初始化 ）</span><span class="token comment">//通过SecurityManager 获得 SessionManager</span><span class="token class-name">DefaultSessionManager</span> sessionManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultSessionManager</span><span class="token punctuation">)</span>securityManager<span class="token punctuation">.</span><span class="token function">getSessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过SessionManager获得SessionFactory</span><span class="token class-name">SimpleSessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SimpleSessionFactory</span><span class="token punctuation">)</span> sessionManager<span class="token punctuation">.</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过SessionManager获得SessionDAO</span><span class="token class-name">MemorySessionDAO</span> sessionDAO <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MemorySessionDAO</span><span class="token punctuation">)</span>sessionManager<span class="token punctuation">.</span><span class="token function">getSessionDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过SessionFactory获得Session</span><span class="token class-name">SimpleSession</span> session1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SimpleSession</span><span class="token punctuation">)</span> sessionFactory<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过Session做具体操作session1.setAttribute("name","zhangsan"); System.out.println(session1.getAttribute("name"));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-javaEE环境"><a href="#2-javaEE环境" class="headerlink" title="2.javaEE环境"></a>2.javaEE环境</h2><p>applicationContext.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 增加session管理相关配置 --></span><span class="token comment">&lt;!-- 会话Cookie模板 默认可省--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionIdCookie<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.servlet.SimpleCookie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- cookie的 key="sid" --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JSESSIONID<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 只允许http请求访问cookie --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>httpOnly<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- cookie过期时间，-1:存活⼀个会话 ,单位:秒 ，默认为-1--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxAge<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.session.mgt.DefaultWebSessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 默认值和配置中给出的⼀致，所bean:sessionIdCookie 可以省略 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionIdCookie<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionIdCookie<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- session全局超时时间, 单位:毫秒 ，30分钟 默认值为1800000--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>globalSessionTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1800000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 将sessionManager关联到SecurityManager --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 增加配置sessionManager --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Session监听"><a href="#3-Session监听" class="headerlink" title="3. Session监听"></a>3. Session监听</h2><p>session有三个核⼼过程：创建、过期、停⽌</p><p><strong>过期：</strong>session的默认过期时间为30分钟。通过⽐对最近⼀次使⽤时间和当前使⽤时间判断  session不会⾃动报告过期，需检测器检测时，或再次访问时，才可以识别是否过期并移除。</p><p><strong>停⽌：</strong>⽤户主动<code>logout</code>；主动调⽤<code>session.stop()</code>; 两种情况会将session标志为停⽌状态。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义监听类 exentends SessionListenerAdapter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySessionListener</span> <span class="token keyword">extends</span> <span class="token class-name">SessionListenerAdapter</span><span class="token punctuation">&#123;</span>    <span class="token comment">//当有session创建时 触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session:"</span><span class="token operator">+</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当有session停⽌时 触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session:"</span><span class="token operator">+</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" stop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当有session过期时 触发</span>    <span class="token comment">// 但不会主动触发，需要再次访问时，即⼜要使⽤session时才会发现session过期，并触发。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onExpiration</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session:"</span><span class="token operator">+</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" expired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置监听类，关联给SessionManager</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.session.mgt.DefaultWebSessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionListeners<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zhj.listener.MySessionListener<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Session检测"><a href="#4-Session检测" class="headerlink" title="4.Session检测"></a>4.Session检测</h2><p>⽤户如果没有主动退出登录，只是关闭浏览器，则session是否过期⽆法获知，也就不能停⽌session。  为此，shiro提供了session的检测机制，可以定时发起检测，识别session过期 并停⽌session。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- sessionManager默认开启session检测机制 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.session.mgt.DefaultWebSessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 开启检测器，默认开启 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionValidationSchedulerEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--- 检测器运⾏间隔，单位：毫秒默认1⼩时//检测到过期后，会直接将session删除protected void afterExpired(Session session) &#123; if (isDeleteInvalidSessions()) &#123;delete(session);&#125;&#125;--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionValidationInterval<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3600000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，通过检测器，定时的检测session，并及时移除⽆效session，释放资源。</p><h1 id="6-注解"><a href="#6-注解" class="headerlink" title="6.注解"></a>6.注解</h1><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h2><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>...RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在springmvc中配置文件中配置"><a href="#2-在springmvc中配置文件中配置" class="headerlink" title="2.在springmvc中配置文件中配置"></a>2.在springmvc中配置文件中配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- enable shiro's annotation--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lifecycleBeanPostProcessor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.LifecycleBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- ⾃动代理⽣成器，等价于aop:config;aop:config 或 AutoProxyCreator两者选其⼀，spring官⽅提醒千万不要同时使⽤。&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 在 此 bean 的 构 建 过 程 中 ， 初 始 化 了 ⼀ 些 额 外 功 能 和 piontcut interceptors.add(new RoleAnnotationMethodInterceptor(resolver));interceptors.add(new PermissionAnnotationMethodInterceptor(resolver)); interceptors.add(new AuthenticatedAnnotationMethodInterceptor(resolver)); interceptors.add(new UserAnnotationMethodInterceptor(resolver)); interceptors.add(new GuestAnnotationMethodInterceptor(resolver));--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修改原有shiro配置文件中的配置"><a href="#3-修改原有shiro配置文件中的配置" class="headerlink" title="3.修改原有shiro配置文件中的配置"></a>3.修改原有shiro配置文件中的配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--=========================shiroFilter========================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入核心对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--        &lt;property name="loginUrl" value="/login.jsp"/>--></span>    <span class="token comment">&lt;!--        &lt;property name="unauthorizedUrl" value="/fail.jsp"/>--></span>    <span class="token comment">&lt;!--        &lt;property name="filterChainDefinitions">--></span>    <span class="token comment">&lt;!--            &lt;value>--></span>    <span class="token comment">&lt;!--                /user/login= anon--></span>    <span class="token comment">&lt;!--                /user/login = anon--></span>    <span class="token comment">&lt;!--                /user/query = authc--></span>    <span class="token comment">&lt;!--                /user/update = authc,roles["monitor","student"]--></span>    <span class="token comment">&lt;!--                /user/delete = authc--></span>    <span class="token comment">&lt;!--                /user/logout=logout--></span>    <span class="token comment">&lt;!--            &lt;/value>--></span>    <span class="token comment">&lt;!--        &lt;/property>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-注解"><a href="#2-注解" class="headerlink" title="2.注解"></a>2.注解</h2><p>都可添加在类或方法上</p><p><strong>1.@RequiresAuthentication</strong></p><p><strong>2.@RequiresRoles</strong></p><p><strong>3.@RequiresPermissions</strong></p><p><strong>属性</strong></p><p>logical</p><p>值：Logical.OR/Logical.AND  符合一个/都要符合</p><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-13 09:03 */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token comment">//所有方法都需要登录</span><span class="token annotation punctuation">@RequiresAuthentication</span><span class="token comment">//类中的所有⽅法都需要⻆⾊,"或"</span><span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"manager"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>logical<span class="token operator">=</span> <span class="token class-name">Logical</span><span class="token punctuation">.</span>OR<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"student"</span><span class="token punctuation">,</span><span class="token string">"monitor"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user:query”,“user:delete"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-注解完整配置"><a href="#3-注解完整配置" class="headerlink" title="3.注解完整配置"></a>3.注解完整配置</h2><h3 id="1-pom-xml-1"><a href="#1-pom-xml-1" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">dependencies><span class="token comment">&lt;!--==============shiro===============--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--==============Spring===============--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=================mybatis==================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=================数据库==================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=================日志==================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showDeprecation</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showDeprecation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-web-xml-2"><a href="#2-web-xml-2" class="headerlink" title="2.web.xml"></a>2.web.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--====================================spring=========================================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--====================================springmvc=========================================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--====================================shiro=========================================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>targetFilterLifecycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-shiro配置文件"><a href="#3-shiro配置文件" class="headerlink" title="3.shiro配置文件"></a>3.shiro配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--=========================导入自定义realm========================--></span><span class="token comment">&lt;!--密码比对器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.authc.credential.HashedCredentialsMatcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashAlgorithmName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SHA-256<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>storedCredentialsHexEncoded<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashIterations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.realm.MyRealm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--service对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>permissionService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>permissionServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--对比器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>credentialsMatcher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=========================SecurityManager========================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--=========================shiroFilter========================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入核心对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-spring配置文件"><a href="#4-spring配置文件" class="headerlink" title="4.spring配置文件"></a>4.spring配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Spring配置文件扫描除Controller注解的所有的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--==================================数据源配置======================================--></span><span class="token comment">&lt;!--加载数据库配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置Druid数据源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/shiro?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0829<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--==================================spring-mybatis整合配置================================--></span><span class="token comment">&lt;!--配置MyBatis整合--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定mybatis全局配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定mapper配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/jxy/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--将mybatis接口加入到ioc容器中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--加载shiro的配置文件，可放在一起，也可单独写在一个配置文件中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:shiro_applicationContext.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-springmvc配置文件"><a href="#5-springmvc配置文件" class="headerlink" title="5.springmvc配置文件"></a>5.springmvc配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置视图解析器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给返回值加前缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--给返回值加后缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--==================shiro注解=================--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lifecycleBeanPostProcessor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.LifecycleBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.resolver.MyExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-自定义Realm-1"><a href="#6-自定义Realm-1" class="headerlink" title="6.自定义Realm"></a>6.自定义Realm</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-13 15:08 */</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">RoleService</span> roleService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PermissionService</span> permissionService<span class="token punctuation">;</span>    <span class="token comment">/**     * @description: 查询权限信息     * 何时触发：需要使用权限时     * 查询方式：通过用户名查询用户 权限/角色 信息     * @author 靳新宇     * @date 2020/7/13 15:08     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principalCollection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> roles <span class="token operator">=</span> roleService<span class="token punctuation">.</span><span class="token function">queryRoleNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">queryPermissionNameByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description:查询身份信息.并返回集合，不用比对 查询方式：通过用户名查询用户信息     * 触发时机：subject.login(token)     * @author 靳新宇     * @date 2020/7/13 15:09     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取用户登录时，使用的用户名</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否存在该用户，不存在，返回空，之后会抛出UnkonwAccountException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将用户信息封装在SimpleAuthenticationInfo中</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ByteSource</span><span class="token punctuation">.</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-异常处理器-1"><a href="#7-异常处理器-1" class="headerlink" title="7.异常处理器"></a>7.异常处理器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author : 靳新宇 * @date : 2020-07-13 08:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">IncorrectCredentialsException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ⻆⾊不⾜</span>            <span class="token comment">//跳转权限不⾜的⻚⾯</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/perms/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">UnauthenticatedException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//没有登录 没有合法身份</span>            <span class="token comment">//跳转登录⻚⾯，重新登录</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入IOC容器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.resolver.MyExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Shiro </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="2020/09/18/Redis/"/>
      <url>2020/09/18/Redis/</url>
      
        <content type="html"><![CDATA[<p>​        Redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><a id="more"></a><h1 id="1-Redis入门"><a href="#1-Redis入门" class="headerlink" title="1.Redis入门"></a>1.Redis入门</h1><p><strong>Redis是NoSQL的一种是实现</strong></p><h2 id="1-NoSQL"><a href="#1-NoSQL" class="headerlink" title="1.NoSQL"></a>1.NoSQL</h2><p>Not-Only SQL 非关系型数据库，作为关系型数据库的补充</p><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>应对基于海量数据和海量用户前提下的数据处理问题</p><h3 id="2-特征"><a href="#2-特征" class="headerlink" title="2.特征"></a>2.特征</h3><ol><li>可扩容，可伸缩</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li></ol><h3 id="3-常见NoSQL数据库"><a href="#3-常见NoSQL数据库" class="headerlink" title="3.常见NoSQL数据库"></a>3.常见NoSQL数据库</h3><ol><li>Redis</li><li>memcache</li><li>HBase</li><li>MongoDB</li></ol><h3 id="4-各种数据库应用场景"><a href="#4-各种数据库应用场景" class="headerlink" title="4.各种数据库应用场景"></a>4.各种数据库应用场景</h3><h4 id="1-MySQL"><a href="#1-MySQL" class="headerlink" title="1.MySQL"></a>1.MySQL</h4><p>基本信息</p><p>例：名称、价格、厂商</p><h4 id="2-MongoDB"><a href="#2-MongoDB" class="headerlink" title="2.MongoDB"></a>2.MongoDB</h4><p>附加信息</p><p>例：评价、描述、详情</p><h4 id="3-分布式文件系统"><a href="#3-分布式文件系统" class="headerlink" title="3.分布式文件系统"></a>3.分布式文件系统</h4><p>图片信息</p><h4 id="4-ES、Lucence、solr"><a href="#4-ES、Lucence、solr" class="headerlink" title="4.ES、Lucence、solr"></a>4.ES、Lucence、solr</h4><p>搜索关键字</p><h4 id="5-Redis、memcache、tair"><a href="#5-Redis、memcache、tair" class="headerlink" title="5.Redis、memcache、tair"></a>5.Redis、memcache、tair</h4><p>热点信息（可能是以上四种的任何一种）</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt="各种数据库应用场景"></p><h2 id="2-Redis概念"><a href="#2-Redis概念" class="headerlink" title="2.Redis概念"></a>2.Redis概念</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><h2 id="3-Redis特征"><a href="#3-Redis特征" class="headerlink" title="3.Redis特征"></a>3.Redis特征</h2><ol><li>数据间没有必然的关联关系</li><li>内部采用单线程机制进行工作</li><li>高性能：官方提供测试数据，50个并发执行100000个请求读的速度是110000次/s写的速度是81000次/s.</li><li>多数据类型支持</li><li>持久化支持。可以进行数据灾难恢复</li></ol><h2 id="4-Redis应用"><a href="#4-Redis应用" class="headerlink" title="4.Redis应用"></a>4.Redis应用</h2><ol><li>为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li><li>任务队列，如秒杀、抢购、购票排队等</li><li>即时信息查询，如各位排行榜、各类网站访可统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等</li><li>时效性信息控制，如验证码控制、投票控制等</li><li>分布式数据共享，如分布式集群架构中的 session分离</li><li>消息队列</li><li>分布式锁</li></ol><h1 id="2-基本数据类型"><a href="#2-基本数据类型" class="headerlink" title="2.基本数据类型"></a>2.基本数据类型</h1><table><thead><tr><th>数据类型</th><th>数据类型</th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td></tr><tr><td>列表类型</td><td>list</td></tr><tr><td>散列类型</td><td>hash</td></tr><tr><td>集合类型</td><td>set</td></tr><tr><td>有序类型</td><td>sorted_set</td></tr></tbody></table><h2 id="1-String"><a href="#1-String" class="headerlink" title="1.String"></a>1.String</h2><h3 id="1-存储的数据"><a href="#1-存储的数据" class="headerlink" title="1.存储的数据"></a>1.存储的数据</h3><p>单个数据，最简单的数据存储类型，也是最常用的数据存储类型</p><h3 id="2-存储数据的格式"><a href="#2-存储数据的格式" class="headerlink" title="2.存储数据的格式"></a>2.存储数据的格式</h3><p>一个存储空间保存一个数据</p><h3 id="3-存储内容"><a href="#3-存储内容" class="headerlink" title="3.存储内容"></a>3.存储内容</h3><p>通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用</p><h3 id="4-指令操作"><a href="#4-指令操作" class="headerlink" title="4.指令操作"></a>4.指令操作</h3><ol><li><p>添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">set key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-none"><code class="language-none">get key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-none"><code class="language-none">del key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">set key1 value1 key2 value2...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-none"><code class="language-none">get key1 key2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据字符个数（字符串长度）</p><pre class="line-numbers language-none"><code class="language-none">strlen key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</p><pre class="line-numbers language-none"><code class="language-none">append key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置数值数据增加指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">incr key                             一次加1incrby key increment                 一次加指定值incrbyfloat key increment            一次加指定小数值数值可为正可谓负<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置数值数据减少指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">decr key                             一次减1decrby key increment                 一次减指定值数值可为正可谓负<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置数据具有指定的生命周期（存活时间）</p><pre class="line-numbers language-none"><code class="language-none">setex key seconds value               设置秒psetex key milliseconds value         设置毫秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="5-string作为数值操作"><a href="#5-string作为数值操作" class="headerlink" title="5.string作为数值操作"></a>5.string作为数值操作</h3><p>string在 redis内部存储默认就是—个字符串，当遇到増减类操作incr，decr时会转成数值型进行计算。</p><p>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。</p><p>注意：按数值迸行操作的数据，如果原始数据不能转成数值，或超越了 redis数值上限范围，将报错<br>9223372036854775807（java中long型数据最大值， Long. MAX VALUE）</p><h3 id="6-string类型数据操作的注意事项"><a href="#6-string类型数据操作的注意事项" class="headerlink" title="6.string类型数据操作的注意事项"></a>6.string类型数据操作的注意事项</h3><p>数据操作不成功的反馈与数据正常操作之间的差异<br>①表示运行结果是否成功<br>（integer）0→ false失败<br>（integer）1→true成功<br>②表示运行结果值<br>（integer）3→3   3个<br>（integer）1→1   1个<br>●数据未获取到<br>（nil）等同于null<br>●数据最大存储量<br>512MB<br>●数值计算最大范围（java中的long的最大值）<br>9223372036854775807</p><h3 id="7-Redis中key的，命名规范"><a href="#7-Redis中key的，命名规范" class="headerlink" title="7.Redis中key的，命名规范"></a>7.Redis中key的，命名规范</h3><p>表名：主键名：主键值：字段名</p><pre class="line-numbers language-none"><code class="language-none">user表  主键no  主键值123  字段名newskey : user:no:123:news<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-string类型应用场景"><a href="#8-string类型应用场景" class="headerlink" title="8.string类型应用场景"></a>8.string类型应用场景</h3><p>解决方案<br>1.在reds中为大用户设定用户信息，以用户主键和属性值作为key，后台设定定时刷新策略即可</p><pre class="line-numbers language-none"><code class="language-none">eg:user:id:3506728370:fans        →         12210947   user:id:3506728370:blogs       →         6164   user:id:3506728370:focuss      →         83<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.在redis中以son格式存储大V用户信息，定时刷新（也可以使用hash类型）</p><pre class="line-numbers language-none"><code class="language-none">eg:   user:id:3506728370      &#123;id:3506728370,name:春晚,fans:12210862,bogs:6164,focus:83&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Hash"><a href="#2-Hash" class="headerlink" title="2.Hash"></a>2.Hash</h2><h3 id="1-出现原因"><a href="#1-出现原因" class="headerlink" title="1.出现原因"></a>1.出现原因</h3><h5 id="新的存储需求"><a href="#新的存储需求" class="headerlink" title="新的存储需求"></a>新的存储需求</h5><p>对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</p><h5 id="需要的存储结构"><a href="#需要的存储结构" class="headerlink" title="需要的存储结构"></a>需要的存储结构</h5><p>一个存储空间保存多个键值对数据</p><h3 id="2-结构"><a href="#2-结构" class="headerlink" title="2.结构"></a>2.结构</h3><p>1.key</p><p>2.value</p><ol><li>field1   value1</li><li>field2   value2</li><li>…</li></ol><p>​    …..</p><h3 id="3-指令操作"><a href="#3-指令操作" class="headerlink" title="3.指令操作"></a>3.指令操作</h3><p>1.添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">hset key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.获取数据</p><pre class="line-numbers language-none"><code class="language-none">hget key fieldhgetall key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.删除数据</p><pre class="line-numbers language-none"><code class="language-none">hdel key fieldl [field2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.添加/修改多个数据</p><pre class="line-numbers language-none"><code class="language-none">hmset key fieldl valuel field2 value2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 5.获取多个数据</p><pre class="line-numbers language-none"><code class="language-none">hmget key fieldl field2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 6.获取哈希表中字段的数量</p><pre class="line-numbers language-none"><code class="language-none">hlen key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.获取哈希表中是否存在指定的字段</p><pre class="line-numbers language-none"><code class="language-none">hexists key field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.获取哈希表中所有的字段名或字段值</p><pre class="line-numbers language-none"><code class="language-none">hkeys keyhvals key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9.设置指定字段的数值数据増加指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">hincrby key field incrementhincrbyfloat key field increment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>10.判断时候有改内容，没有则可以新增，有则失败，不会对已有的进行修改，要修改时使用hset指令</p><pre class="line-numbers language-none"><code class="language-none">hsetnx key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-hash类型数据操作的注意事项"><a href="#3-hash类型数据操作的注意事项" class="headerlink" title="3.hash类型数据操作的注意事项"></a>3.hash类型数据操作的注意事项</h3><p>1.hash类型下的 value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，<br>对应的值为（nil）</p><p>2.每个hash可以存储2^32-1个键值对</p><p>3.hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但hash设计初衷不是为了存<br>储大量对象而设计的，切记不可滥用，更不可以将hash作为对象列表使用</p><p>4.hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问 瓶颈</p><h2 id="3-list"><a href="#3-list" class="headerlink" title="3.list"></a>3.list</h2><h3 id="1-数据存储需求"><a href="#1-数据存储需求" class="headerlink" title="1.数据存储需求"></a>1.数据存储需求</h3><p>存储多个数据，并对数据进入存储空间的顺序进行区分</p><h3 id="2-需要的存储结构"><a href="#2-需要的存储结构" class="headerlink" title="2.需要的存储结构"></a>2.需要的存储结构</h3><p>一个存储空间保存多个数据，且通过数据可以体现进入顺序 </p><h3 id="3-list类型"><a href="#3-list类型" class="headerlink" title="3.list类型"></a>3.list类型</h3><p>保存多个数据，底层使用双向链表存储结构实现</p><h3 id="4-list操作"><a href="#4-list操作" class="headerlink" title="4.list操作"></a>4.list操作</h3><h4 id="1-添加-修改数据"><a href="#1-添加-修改数据" class="headerlink" title="1.添加/修改数据"></a>1.添加/修改数据</h4><pre class="line-numbers language-none"><code class="language-none">从左边插入lpush key value1 [value2]...从右边插入rpush key value1 [value2]...例lpush num 1 2 3    结果为3 2 1rpush num 1 2 3    结果为1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-获取数据"><a href="#2-获取数据" class="headerlink" title="2.获取数据"></a>2.获取数据</h4><pre class="line-numbers language-none"><code class="language-none">获取数据 start开始 stop结束，在不知道长度的情况下，可以使用0 -1，负数表示从左向左第几个lrange key start stop获取第几个数据lindex key index获取长度llen key例rpush num 1 2 3 4 5 6lrange num 0 -1       结果：1 2 3 4 5 6lindex num 3          结果：4llen num              结果：6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-获取并移除数据"><a href="#3-获取并移除数据" class="headerlink" title="3.获取并移除数据"></a>3.获取并移除数据</h4><pre class="line-numbers language-none"><code class="language-none">lpop keyrpop key例rpush num 1 2 3 4 5 6lpop num           结果：1rpop num           结果：6lrange num 0 -1    结果：2 3 4 5 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-规定时间内获取并移除数据"><a href="#4-规定时间内获取并移除数据" class="headerlink" title="4.规定时间内获取并移除数据"></a>4.规定时间内获取并移除数据</h4><pre class="line-numbers language-none"><code class="language-none">如果有，取出，没有等待，指定时间类，添加进去，获取，超出指定时间，返回nilblpop key1 [key2] timeoutbrpop key1 [key2] timeoutbrpoplpush source destination timeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-移除指定数据"><a href="#5-移除指定数据" class="headerlink" title="5.移除指定数据"></a>5.移除指定数据</h4><pre class="line-numbers language-none"><code class="language-none">lrem key count(数量) value例rpush num 1 2 3 4 5 6 1 2 3 1 5 9lrange num 0 -1            结果：1 2 3 4 5 6 1 2 3 1 5 9lrem num 2 1               lrange num 0 -1            结果：2 3 4 5 6 2 3 1 5 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-list-类型数据操作注意事项"><a href="#5-list-类型数据操作注意事项" class="headerlink" title="5.list 类型数据操作注意事项"></a>5.list 类型数据操作注意事项</h3><ol><li>list中保存的数据都是string类型的，数据总容量是有限的，最多2 32 - 1 个元素 (4294967295)。 </li><li>list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作 </li><li>获取全部数据操作结束索引设置为-1 </li><li>list可以对数据进行分页操作，通常第一页的信息来自于list，第2页及更多的信息通过数据库的形式加载</li></ol><h2 id="4-set"><a href="#4-set" class="headerlink" title="4.set"></a>4.set</h2><h3 id="1-存储需求"><a href="#1-存储需求" class="headerlink" title="1.存储需求"></a>1.存储需求</h3><p>存储大量的数据，在查询方面提供更高的效率 </p><p>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</p><p>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），<strong>并且值是不允许重复的。</strong> </p><h3 id="2-set操作"><a href="#2-set操作" class="headerlink" title="2.set操作"></a>2.set操作</h3><p>1.添加数据</p><pre class="line-numbers language-none"><code class="language-none">saddd key member1 [member2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.获取全部数据</p><pre class="line-numbers language-none"><code class="language-none">smembers key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.删除数据</p><pre class="line-numbers language-none"><code class="language-none">srem key member1 [member2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.获取数据总量</p><pre class="line-numbers language-none"><code class="language-none">scard key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.判断集合中是否包含指定数据</p><pre class="line-numbers language-none"><code class="language-none">sismember key member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.随机获取集合中指定数量的数据</p><pre class="line-numbers language-none"><code class="language-none">srandmember key [count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.随机获取集合中的某个数据并将该数据移出集合</p><pre class="line-numbers language-none"><code class="language-none">spop key [count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.求两个集合的交、并、差集</p><pre class="line-numbers language-none"><code class="language-none">sinter key1 [key2]sunion key1 [key2]sdiff key1 [key2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>9.求两个集合的交、并、差集并存储到指定集合中</p><pre class="line-numbers language-none"><code class="language-none">sinterstore destination key1 [key2]sunionstore destination key1 [key2]sdiffstore destination key1 [key2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>10.将指定数据从原始集合中移动到目标集合中</p><pre class="line-numbers language-none"><code class="language-none">smove source destination member <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-sorted-set"><a href="#5-sorted-set" class="headerlink" title="5.sorted_set"></a>5.sorted_set</h2><h3 id="1-新的存储需求"><a href="#1-新的存储需求" class="headerlink" title="1.新的存储需求"></a><strong>1.新的存储需求</strong></h3><p>数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</p><h3 id="2-需要的存储结构-1"><a href="#2-需要的存储结构-1" class="headerlink" title="2.需要的存储结构"></a>2.需要的存储结构</h3><p>新的存储模型，可以保存可排序的数据 </p><h3 id="3-sorted-set类型"><a href="#3-sorted-set类型" class="headerlink" title="3.sorted_set类型"></a>3.sorted_set类型</h3><p>在set的存储结构基础上添加可排序字段</p><h3 id="4-sorted-set操作"><a href="#4-sorted-set操作" class="headerlink" title="4.sorted_set操作"></a>4.sorted_set操作</h3><p>1.添加数据</p><pre class="line-numbers language-none"><code class="language-none">zadd key score1 member1 [score2 member2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.获取全部数据</p><pre class="line-numbers language-none"><code class="language-none">由小到大zrange key start stop [WITHSCORES]由大到小zrevrange key start stop [WITHSCORES]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.删除数据</p><pre class="line-numbers language-none"><code class="language-none">zrem key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例</p><pre class="line-numbers language-none"><code class="language-none">zadd student 02 lszadd student 03 ww 04 mzzadd student 01 zs 05 xqzrange student 0 -1              结果：1)“zs”， 2)“ls”， 3)“ww”， 4)“mz”， 5)“xq”zrange student 0 -1 withscores   结果：1)“zs”, 2)&quot;1&quot;， 3)“ls”, 4)&quot;2&quot;， 5)“ww”, 6)&quot;3&quot;， 7)“mz”, 8)&quot;4&quot;， 9)“xq” 10)&quot;5&quot;zrevrange student 0 -1           结果：1)“xq”， 2)“mz”， 3)“ww”， 4)“ls”， 5)“zs”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.按条件获取数据</p><pre class="line-numbers language-none"><code class="language-none">zrangebyscore key min max [WITHSCORES] [LIMIT]zrevrangebyscore key max min [WITHSCORES]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.条件删除数据</p><pre class="line-numbers language-none"><code class="language-none">zremrangebyrank key start stopzremrangebyscore key min max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>min与max用于限定搜索查询的条件 </li><li>start与stop用于限定查询范围，作用于索引，表示开始和结束索引 </li><li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li></ol><p>6.获取集合数据总量</p><pre class="line-numbers language-none"><code class="language-none">zcard keyzcount key min max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7.集合交、并操作</p><pre class="line-numbers language-none"><code class="language-none">zinterstore destination numkeys key [key ...]zunionstore destination numkeys key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.获取数据对应的索引（排名）</p><pre class="line-numbers language-none"><code class="language-none">zrank key memberzrevrank key member<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9.score值获取与修改</p><pre class="line-numbers language-none"><code class="language-none">zscore key memberzincrby key increment member<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><p>1.score保存的数据存储空间是64位，如果是整数范围是-9007199254740992~9007199254740992 </p><p>2.score保存的数据也可以是一个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时 候要慎重 </p><p>3.sorted_set 底层存储还是基于set结构的，因此数据不能重复，如果重复添加相同的数据，score值将被反 复覆盖，保留最后一次修改的结果</p><h1 id="3-高级数据类型"><a href="#3-高级数据类型" class="headerlink" title="3.高级数据类型"></a>3.高级数据类型</h1><p><strong>为解决某一单一功能</strong></p><h2 id="1-Bitmaps"><a href="#1-Bitmaps" class="headerlink" title="1.Bitmaps"></a>1.Bitmaps</h2><p><strong>redis 应用于信息状态统计</strong></p><p><strong>1.操作</strong></p><p>1.获取指定key对应偏移量上的bit值</p><pre class="line-numbers language-none"><code class="language-none">getbit key offset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.设置指定key对应偏移量上的bit值，value只能是1或0</p><pre class="line-numbers language-none"><code class="language-none">setbit key offset value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中</p><pre class="line-numbers language-none"><code class="language-none">bitop op destKey key1 [key2...]op:and：交、or：并、not：非、xor：异或<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.统计指定key中1的数量</p><pre class="line-numbers language-none"><code class="language-none">bitcount key [start end]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; setbit 0101 0 1(integer) 0127.0.0.1:6379&gt; setbit 0101 1 1(integer) 0127.0.0.1:6379&gt; setbit 0101 2 1(integer) 0127.0.0.1:6379&gt; setbit 0101 4 1(integer) 0127.0.0.1:6379&gt; setbit 0101 5 1(integer) 0127.0.0.1:6379&gt; setbit 0102 1 1(integer) 0127.0.0.1:6379&gt; setbit 0102 3 1(integer) 0127.0.0.1:6379&gt; setbit 0102 5 1(integer) 0127.0.0.1:6379&gt; getbit 0101 5(integer) 1127.0.0.1:6379&gt; bitop and all 0101 0102(integer) 1127.0.0.1:6379&gt; getbit all 0(integer) 0127.0.0.1:6379&gt; getbit all 1(integer) 1127.0.0.1:6379&gt; getbit all 2(integer) 0127.0.0.1:6379&gt; getbit all 3(integer) 0127.0.0.1:6379&gt; getbit all 4(integer) 0127.0.0.1:6379&gt; getbit all 5(integer) 1127.0.0.1:6379&gt; bitop or other 0101 0102(integer) 1127.0.0.1:6379&gt; getbit other 0(integer) 1127.0.0.1:6379&gt; getbit other 1(integer) 1127.0.0.1:6379&gt; getbit other 2(integer) 1127.0.0.1:6379&gt; getbit other 3(integer) 1127.0.0.1:6379&gt; getbit other 4(integer) 1127.0.0.1:6379&gt; getbit other 5(integer) 1127.0.0.1:6379&gt; bitcount all(integer) 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-HyperLogLog"><a href="#2-HyperLogLog" class="headerlink" title="2.HyperLogLog"></a>2.HyperLogLog</h2><p><strong>同级不重复数据数量</strong></p><p><strong>操作</strong></p><p>1.添加数据</p><pre class="line-numbers language-none"><code class="language-none">pfadd key element [element ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.统计数据</p><pre class="line-numbers language-none"><code class="language-none">pfcount key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.合并数据</p><pre class="line-numbers language-none"><code class="language-none">pfmerge destkey sourcekey [sourcekey...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; pfadd id 01 02 03 04 01 03 05 06(integer) 1127.0.0.1:6379&gt; pfcount id(integer) 6127.0.0.1:6379&gt; pfadd no 01 03 05 07 09 10(integer) 1127.0.0.1:6379&gt; pfcount no(integer) 6127.0.0.1:6379&gt; pfmerge num id noOK127.0.0.1:6379&gt; pfcount num(integer) 9127.0.0.1:6379&gt; pfcount no id(integer) 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>相关说明</strong></p><ol><li>用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据 </li><li>核心是基数估算算法，最终数值存在一定误差</li><li>误差范围：基数估计的结果是一个带有 0.81% 标准错误的近似值 </li><li>耗空间极小，每个hyperloglog key占用了12K的内存用于标记基数</li><li>pfadd命令不是一次性分配12K内存使用，会随着基数的增加内存逐渐增大 </li><li>Pfmerge命令合并后占用的存储空间为12K，无论合并之前数据量多少</li></ol><h2 id="3-GEO"><a href="#3-GEO" class="headerlink" title="3.GEO"></a>3.GEO</h2><p>计算距离</p><p><strong>操作</strong></p><p>1.添加坐标点</p><pre class="line-numbers language-none"><code class="language-none">geoadd key longitude latitude member [longitude latitude member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.获取坐标点</p><pre class="line-numbers language-none"><code class="language-none">geopos key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.计算坐标距离</p><pre class="line-numbers language-none"><code class="language-none">geodist key member1 member2 [unit]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.根据坐标求范围内的数据</p><pre class="line-numbers language-none"><code class="language-none">georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.根据点求范围内数据</p><pre class="line-numbers language-none"><code class="language-none">georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.获取指定点对应的坐标hash值</p><pre class="line-numbers language-none"><code class="language-none">geohash key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; geoadd address 1 1 home(integer) 1127.0.0.1:6379&gt; geoadd address 2 2 school(integer) 1127.0.0.1:6379&gt; geoadd address 3 3 company(integer) 1127.0.0.1:6379&gt; geoadd address 1 2 a(integer) 1127.0.0.1:6379&gt; geoadd address 1 3 b(integer) 1127.0.0.1:6379&gt; geoadd address 2 1 c(integer) 1127.0.0.1:6379&gt; geoadd address 2 3 d(integer) 1127.0.0.1:6379&gt; geoadd address 3 1 e(integer) 1127.0.0.1:6379&gt; geoadd address 3 2 f(integer) 1127.0.0.1:6379&gt; geodist address home school&quot;157270.0561&quot;127.0.0.1:6379&gt; geodist address home company km&quot;314.4918&quot;127.0.0.1:6379&gt; georadiusbymember address home 180 km1) &quot;home&quot;2) &quot;c&quot;3) &quot;a&quot;4) &quot;school&quot;127.0.0.1:6379&gt; georadiusbymember address home 240 km1) &quot;home&quot;2) &quot;c&quot;3) &quot;a&quot;4) &quot;school&quot;5) &quot;e&quot;6) &quot;b&quot;127.0.0.1:6379&gt; georadius address 1.5 1.5 200 km1) &quot;home&quot;2) &quot;c&quot;3) &quot;a&quot;4) &quot;school&quot;5) &quot;e&quot;6) &quot;f&quot;7) &quot;b&quot;8) &quot;d&quot;127.0.0.1:6379&gt; georadius address 1.5 1.5 200 km withcoord1) 1) &quot;home&quot;   2) 1) &quot;0.99999994039535522&quot;      2) &quot;0.99999945914297683&quot;2) 1) &quot;c&quot;   2) 1) &quot;2.00000256299972534&quot;      2) &quot;0.99999945914297683&quot;3) 1) &quot;a&quot;   2) 1) &quot;0.99999994039535522&quot;      2) &quot;2.0000001856465488&quot;4) 1) &quot;school&quot;   2) 1) &quot;2.00000256299972534&quot;      2) &quot;2.0000001856465488&quot;5) 1) &quot;e&quot;   2) 1) &quot;2.99999982118606567&quot;      2) &quot;0.99999945914297683&quot;6) 1) &quot;f&quot;   2) 1) &quot;2.99999982118606567&quot;      2) &quot;2.0000001856465488&quot;7) 1) &quot;b&quot;   2) 1) &quot;0.99999994039535522&quot;      2) &quot;3.00000091215010656&quot;8) 1) &quot;d&quot;   2) 1) &quot;2.00000256299972534&quot;      2) &quot;3.00000091215010656&quot;127.0.0.1:6379&gt; georadius address 1.5 1.5 200 km withdist1) 1) &quot;home&quot;   2) &quot;78.6394&quot;2) 1) &quot;c&quot;   2) &quot;78.6396&quot;3) 1) &quot;a&quot;   2) &quot;78.6304&quot;4) 1) &quot;school&quot;   2) &quot;78.6306&quot;5) 1) &quot;e&quot;   2) &quot;175.8261&quot;6) 1) &quot;f&quot;   2) &quot;175.7899&quot;7) 1) &quot;b&quot;   2) &quot;175.8503&quot;8) 1) &quot;d&quot;   2) &quot;175.8504&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-通用命令"><a href="#4-通用命令" class="headerlink" title="4.通用命令"></a>4.通用命令</h1><h2 id="1-key的通用操作"><a href="#1-key的通用操作" class="headerlink" title="1.key的通用操作"></a>1.key的通用操作</h2><h3 id="1-删除指定key"><a href="#1-删除指定key" class="headerlink" title="1.删除指定key"></a>1.删除指定key</h3><pre class="line-numbers language-none"><code class="language-none">del key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-获取key是否存在"><a href="#2-获取key是否存在" class="headerlink" title="2.获取key是否存在"></a>2.获取key是否存在</h3><pre class="line-numbers language-none"><code class="language-none">exists key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-获取key的类型"><a href="#3-获取key的类型" class="headerlink" title="3.获取key的类型"></a>3.获取key的类型</h3><pre class="line-numbers language-none"><code class="language-none">type key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-为指定key设置有效期"><a href="#4-为指定key设置有效期" class="headerlink" title="4.为指定key设置有效期"></a>4.为指定key设置有效期</h3><pre class="line-numbers language-none"><code class="language-none">expire key secondspexpire key millisecondsexpireat key timestamppexpireat key milliseconds-timestamp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-获取key的有效时间"><a href="#5-获取key的有效时间" class="headerlink" title="5.获取key的有效时间"></a>5.获取key的有效时间</h3><pre class="line-numbers language-none"><code class="language-none">ttl key     秒pttl key    毫秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-切换key从时效性转换为永久性"><a href="#6-切换key从时效性转换为永久性" class="headerlink" title="6.切换key从时效性转换为永久性"></a>6.切换key从时效性转换为永久性</h3><pre class="line-numbers language-none"><code class="language-none">persist key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-查询key"><a href="#7-查询key" class="headerlink" title="7.查询key"></a>7.查询key</h3><pre class="line-numbers language-none"><code class="language-none">keys pattern<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查询模式规则</strong></p><p>*匹配任意数量的任意符号 </p><p>? 配合一个任意符号 </p><p>[] 匹配一个指定符号</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>keys *</td><td>查询所有</td></tr><tr><td>keys it*</td><td>查询所有以it开头</td></tr><tr><td>keys *heima</td><td>查询所有以heima结尾</td></tr><tr><td>keys ??heima</td><td>查询所有前面两个字符任意，后面以heima结尾</td></tr><tr><td>keys user:?</td><td>查询所有以user:开头，最后一个字符任意</td></tr><tr><td>keys u[st]er:1</td><td>查询所有以u开头，以er:1结尾，中间包含一个字母，s或t</td></tr></tbody></table><h3 id="8-为key改名"><a href="#8-为key改名" class="headerlink" title="8.为key改名"></a>8.为key改名</h3><pre class="line-numbers language-none"><code class="language-none">rename key newkeyrenamenx key newkey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-对所有key排序"><a href="#9-对所有key排序" class="headerlink" title="9.对所有key排序"></a>9.对所有key排序</h3><pre class="line-numbers language-none"><code class="language-none">sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-其他key通用操作"><a href="#10-其他key通用操作" class="headerlink" title="10.其他key通用操作"></a>10.其他key通用操作</h3><pre class="line-numbers language-none"><code class="language-none">help @generic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-数据库通用操作"><a href="#2-数据库通用操作" class="headerlink" title="2.数据库通用操作"></a>2.数据库通用操作</h2><h3 id="1-切换数据库"><a href="#1-切换数据库" class="headerlink" title="1.切换数据库"></a>1.切换数据库</h3><pre class="line-numbers language-none"><code class="language-none">select index          redis的数据库是根据索引区分的 如：selecct 1   、    select 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-其他操作"><a href="#2-其他操作" class="headerlink" title="2.其他操作"></a>2.其他操作</h3><pre class="line-numbers language-none"><code class="language-none">quit          退出ping          ping与服务器是否联通     ping 结果：PONG   ping abc 结果：“abc”echo message  向控制台打印数据 如：echo abc  结果：控制台输出abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-数据移动"><a href="#3-数据移动" class="headerlink" title="3.数据移动"></a>3.数据移动</h3><pre class="line-numbers language-none"><code class="language-none">move key db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须保证另一方没有本key</p><h3 id="4-数据清除"><a href="#4-数据清除" class="headerlink" title="4.数据清除"></a>4.数据清除</h3><pre class="line-numbers language-none"><code class="language-none">dbsize        看本数据库数据总量flushdb       清除本数据库flushall      清除所有数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-清屏指令clear"><a href="#3-清屏指令clear" class="headerlink" title="3.清屏指令clear"></a>3.清屏指令clear</h2><p>清除屏幕中的信息</p><h2 id="4-常用指令"><a href="#4-常用指令" class="headerlink" title="4.常用指令"></a>4.常用指令</h2><p>1.ps -ef | grep redis-</p><p>查看当前redis相关进程</p><p>2.redis-server 配置文件路径</p><p>根据某配置文件启动redis</p><h1 id="5-Jedis"><a href="#5-Jedis" class="headerlink" title="5.Jedis"></a>5.Jedis</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>jedis是 Java语言连接redis服务的一种是实现</p><p>其他的实现还有SpringData Redis、Lettuce等</p><h2 id="2-第一个Jedis程序"><a href="#2-第一个Jedis程序" class="headerlink" title="2.第一个Jedis程序"></a>2.第一个Jedis程序</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span>jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstJedis</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//6</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[3, 2, 1, a, b, c]</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"jxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"HeNan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">hlen</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> hash1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hash1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;name=jxy, age=22, address=HeNan&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-案例不同用户等级下载限制"><a href="#3-案例不同用户等级下载限制" class="headerlink" title="3.案例不同用户等级下载限制"></a>3.案例不同用户等级下载限制</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span>jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">JedisDataException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"compid:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判定是否具有调用计数控制，利用异常进行控制处理</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//没有控制，创建控制计数器</span>                jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"compid:"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//有控制，自增，并调用业务</span>                <span class="token class-name">Long</span> val <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">"compid:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">business</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> num <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JedisDataException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//调用次数溢出，弹出提示</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户："</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"使用次数已达到上限，请稍后再试，或升级VIP会员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">business</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">long</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"发起业务调用，当前第"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Service</span> sc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sc<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//模拟调用间隔，设定为1.x秒</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jedis2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"初级用户"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"高级用户"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-连接池"><a href="#4-连接池" class="headerlink" title="4.连接池"></a>4.连接池</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">jedis.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token attr-name">jedis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">jedis.maxTotal</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span class="token attr-name">jedis.maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-连接池"><a href="#2-连接池" class="headerlink" title="2.连接池"></a>2.连接池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span>jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPoolConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ResourceBundle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JedisPool</span> jp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxTotal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//读取配置文件 获得参数值</span>        <span class="token class-name">ResourceBundle</span> rb <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"jedis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jedis.host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jedis.port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxTotal <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jedis.maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxIdle <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jedis.maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JedisPoolConfig</span> jpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        jp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jpc<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-Linux安装Redis环境"><a href="#6-Linux安装Redis环境" class="headerlink" title="6.Linux安装Redis环境"></a>6.Linux安装Redis环境</h1><h2 id="1-安装Redis"><a href="#1-安装Redis" class="headerlink" title="1.安装Redis"></a>1.安装Redis</h2><p>1.下载Linux版本redis安装</p><ol><li>官网下载</li></ol><p><img src="http://a1.qpic.cn/psc?/V12N9rQx0MYPHF/5Bi.o*a6jL6BabQv6p6D*3nCtjFzB.dQIfxzi0P1Xf6CTWolDin5p4tk0GJm63HdfRvtKyjsI.yEoDHSHx7mig!!/c&ek=1&kp=1&pt=0&bo=YARKA2AESgMRADc!&tl=1&tm=1592017200&sce=0-12-12&rf=0-18" alt="img"></p><ol><li><p>命令行下载</p><pre class="line-numbers language-none"><code class="language-none">wget http:&#x2F;&#x2F;download.redis.io&#x2F;redis-stable.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>2.上传至linux系统（共享文件夹或远程服务）</p><p>3.移动到合适文件夹，解压</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf redis-6.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.编译,移动至解压好的文件夹中，使用make指令编译</p><p>5.使用make install安装。</p><h2 id="2-启动redis"><a href="#2-启动redis" class="headerlink" title="2.启动redis"></a>2.启动redis</h2><h3 id="1-默认启动"><a href="#1-默认启动" class="headerlink" title="1.默认启动"></a>1.默认启动</h3><p>安装redis指令，使用redis-server指令启动服务。</p><p>未安装时ke0移动至redis安装目录下的src目录，使用./redis-server指令启动。</p><h3 id="2-指定端口启动"><a href="#2-指定端口启动" class="headerlink" title="2.指定端口启动"></a>2.指定端口启动</h3><pre class="line-numbers language-none"><code class="language-none">redis-server –-port 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-指定配置文件启动"><a href="#3-指定配置文件启动" class="headerlink" title="3.指定配置文件启动"></a>3.指定配置文件启动</h3><p>1.配置配置文件</p><ol><li><p>安装目录下创建conf文件夹，在文件夹中创建配置文件</p><pre class="line-numbers language-none"><code class="language-none">port 6379                   &#x2F;&#x2F;配置端口号daemonize yes、、logfile &quot;6379.log&quot;dir &#x2F;opt&#x2F;redis&#x2F;datadbfilename dump-6379.rdbrdbcompression yesrdbchecksum yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用配置文件启动</p><pre class="line-numbers language-none"><code class="language-none">redis-server 配置文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-启动redis客户端"><a href="#3-启动redis客户端" class="headerlink" title="3.启动redis客户端"></a>3.启动redis客户端</h2><p>1.默认连接 </p><pre class="line-numbers language-none"><code class="language-none">redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.连接指定服务器</p><pre class="line-numbers language-none"><code class="language-none">redis-cli -h 127.0.0.1redis-cli –port 6379redis-cli -h 127.0.0.1 –port 6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-Redis基本配置"><a href="#4-Redis基本配置" class="headerlink" title="4.Redis基本配置"></a>4.Redis基本配置</h2><p>daemonize yes </p><p>以守护进程方式启动，使用本启动方式，redis将以服务的形式存在，日志将不再打印到命令窗口中 </p><p>port 6***</p><p>设定当前服务启动端口号 </p><p>dir “/自定义目录/redis/data“ </p><p>设定当前服务文件保存位置，包含日志文件、持久化文件（后面详细讲解）等 </p><p>logfile “6***.log“ </p><p>设定日志文件名，便于查阅</p><h1 id="7-持久化"><a href="#7-持久化" class="headerlink" title="7.持久化"></a>7.持久化</h1><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h2><h3 id="1-save指令"><a href="#1-save指令" class="headerlink" title="1.save指令"></a>1.save指令</h3><h4 id="1-指令"><a href="#1-指令" class="headerlink" title="1.指令"></a>1.指令</h4><pre class="line-numbers language-none"><code class="language-none">save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-形式"><a href="#2-形式" class="headerlink" title="2.形式"></a>2.形式</h4><p>执行一次，保存一次</p><h4 id="3-工作原理"><a href="#3-工作原理" class="headerlink" title="3.工作原理"></a>3.工作原理</h4><p>单线程执行，如果执行时间过长，会影响其他指令的操作，造成阻塞。</p><p><img src="http://a1.qpic.cn/psc?/V12N9rQx0MYPHF/5Bi.o*a6jL6BabQv6p6D*xau9BhaKz79MPotpVUPBIzVYmU8jHXkZ0S2ugH0mAcXrpuSYv7hYxSfFjGEFu.QWA!!/c&ek=1&kp=1&pt=0&bo=ywO6AcsDugERADc!&tl=1&tm=1592017200&sce=0-12-12&rf=0-18" alt="img"></p><h3 id="2-bgsava指令"><a href="#2-bgsava指令" class="headerlink" title="2.bgsava指令"></a>2.bgsava指令</h3><h4 id="1-指令-1"><a href="#1-指令-1" class="headerlink" title="1.指令"></a>1.指令</h4><pre class="line-numbers language-none"><code class="language-none">bgsave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-形式-1"><a href="#2-形式-1" class="headerlink" title="2.形式"></a>2.形式</h4><p>执行一次，保存一次</p><h4 id="3-工作原理-1"><a href="#3-工作原理-1" class="headerlink" title="3.工作原理"></a>3.工作原理</h4><p> bgsave命令是针对save阻塞问题做的优化。Redis内部所有涉及到RDB操作都采用bgsave的方式，save命令可以放弃使用。</p><p><img src="http://a1.qpic.cn/psc?/V12N9rQx0MYPHF/5Bi.o*a6jL6BabQv6p6D*wHh*nnxYdIdFoXdv4GPDFhh2fsj9cgVSXaNPmRxCmi8VjDssAKOVrvnwYtyYdqe8w!!/c&ek=1&kp=1&pt=0&bo=OgQ0AToENAERADc!&tl=1&tm=1592017200&sce=0-12-12&rf=0-18" alt="img"></p><h3 id="3-sava配置"><a href="#3-sava配置" class="headerlink" title="3.sava配置"></a>3.sava配置</h3><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h4><pre class="line-numbers language-none"><code class="language-none">save second changes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h4><p>满足限定时间范围内key的变化数量达到指定数量即进行持久化</p><h4 id="3-参数"><a href="#3-参数" class="headerlink" title="3.参数"></a>3.参数</h4><p>second：监控时间范围 changes：监控key的变化量 </p><h4 id="4-位置"><a href="#4-位置" class="headerlink" title="4.位置"></a>4.位置</h4><p>在conf文件中进行配置</p><h4 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h4><p> save配置要根据实际业务情况进行设置，频度过高或过低都会出现性能问题，结果可能是灾难性的 </p><p>save配置中对于second与changes设置通常具有互补对应关系，尽量不要设置成包含性关系 </p><p>save配置启动后执行的是bgsave操作</p><h4 id="6-例"><a href="#6-例" class="headerlink" title="6.例"></a>6.例</h4><pre class="line-numbers language-none"><code class="language-none">save 900 1save 300 10save 60 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-原理"><a href="#7-原理" class="headerlink" title="7.原理"></a>7.原理</h4><p><img src="http://a1.qpic.cn/psc?/V12N9rQx0MYPHF/5Bi.o*a6jL6BabQv6p6D*4Z*yMv1Y2aplYz6ytVBB3uc43rNVGl3*nxAG8mPOvwNXu0EDTI4su34.xfNWwvO3A!!/c&ek=1&kp=1&pt=0&bo=NgOaATYDmgERADc!&tl=1&tm=1592017200&sce=0-12-12&rf=0-18" alt="img"></p><h3 id="4-三种指令对比"><a href="#4-三种指令对比" class="headerlink" title="4.三种指令对比"></a>4.三种指令对比</h3><table><thead><tr><th align="center">方式</th><th align="center">sava指令</th><th align="center">bgsave指令</th><th align="center">save配置</th></tr></thead><tbody><tr><td align="center">读写</td><td align="center">同步</td><td align="center">异步</td><td align="center">异步</td></tr><tr><td align="center">阻塞客户端指令</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">额外内存消耗</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">启动新进程</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr></tbody></table><h3 id="5-RDB相关配置"><a href="#5-RDB相关配置" class="headerlink" title="5.RDB相关配置"></a>5.RDB相关配置</h3><p><strong>1.dbfilename dump.rdb</strong> </p><p>设置本地数据库文件名，默认值为 dump.rdb </p><p>通常设置为dump-端口号.rdb </p><p><strong>2.dir</strong> </p><p>设置存储.rdb文件的路径 </p><p>通常设置成存储空间较大的目录中，目录名称data </p><p><strong>3.rdbcompression yes</strong> </p><p>设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩 </p><p>通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</p><p><strong>4.rdbchecksum yes</strong> </p><p>设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行 </p><p>通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</p><p><strong>5.stop-writes-on-bgsave-error yes（bgsave）</strong></p><p>后台存储过程中如果出现错误现象，是否停止保存操作 </p><p>通常默认为开启状态</p><h3 id="6-RDB优缺点"><a href="#6-RDB优缺点" class="headerlink" title="6.RDB优缺点"></a>6.RDB优缺点</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1.优点"></a>1.优点</h4><ol><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景 </li><li>RDB恢复数据的速度要比AOF快很多 </li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li></ol><h4 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2.缺点"></a>2.缺点</h4><ol><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据 </li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能 </li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li><li>存储数据量较大，效率较低 基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低 </li><li>大数据量下的IO性能较低 </li><li>基于fork创建子进程，内存产生额外消耗</li><li>宕机带来的数据丢失风险</li></ol><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令 达到恢复数据的目的。与RDB相比可以简单描述为改记录数据为记录数据产生的过程</p><p>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</p><h3 id="2-三种策略"><a href="#2-三种策略" class="headerlink" title="2.三种策略"></a>2.三种策略</h3><p>always(每次） 每次写入操作均同步到AOF文件中，<strong>数据零误差，性能较低，不建议使用。</strong></p><p>everysec（每秒） 每秒将缓冲区中的指令同步到AOF文件中，<strong>数据准确性较高，性能较高，建议使用，也是默认配置</strong></p><p>在系统突然宕机的情况下丢失1秒内的数据</p><p>no（系统控制） 由操作系统控制每次同步到AOF文件的周期，整体过程不可控</p><h3 id="3-开启"><a href="#3-开启" class="headerlink" title="3.开启"></a>3.开启</h3><p>开启AOF持久化功能，默认为不开启状态</p><pre class="line-numbers language-none"><code class="language-none">appendonly yes|no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AOF写数据策略</p><pre class="line-numbers language-none"><code class="language-none">appendfsync always|everysec|no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改AOF持久化文件名，默认文件名未appendonly.aof，建议配置为appendonly-端口号.aof</p><pre class="line-numbers language-none"><code class="language-none">appendfilename filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AOF持久化文件保存路径，与RDB持久化文件保持一致即可</p><pre class="line-numbers language-none"><code class="language-none">dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-AOF重写"><a href="#4-AOF重写" class="headerlink" title="4.AOF重写"></a>4.AOF重写</h3><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重 写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干个条命令执行结 果转化成最终结果数据对应的指令进行记录。 </p><p><strong>AOF重写作用</strong></p><p>降低磁盘占用量，提高磁盘利用率 </p><p>提高持久化效率，降低持久化写时间，提高IO性能</p><p>降低数据恢复用时，提高数据恢复效率</p><p><strong>重写规则</strong> </p><p>进程内已超时的数据不再写入文件 </p><p>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令 如del key1、 hdel key2、srem key3、set key4 111、set key4 222等 </p><p>对同一数据的多条写命令合并为一条命令 如lpush list1 a、lpush list1 b、 lpush list1 c 可以转化为：lpush list1 a b c。 为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</p><p><strong>重写方式</strong> </p><p>手动重写</p><pre class="line-numbers language-none"><code class="language-none">bgrewriteaof<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自动重写 </p><pre class="line-numbers language-none"><code class="language-none">auto-aof-rewrite-min-size sizeauto-aof-rewrite-percentage percentage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-AOF工作原理"><a href="#5-AOF工作原理" class="headerlink" title="5.AOF工作原理"></a>5.AOF工作原理</h3><p><img src="http://a1.qpic.cn/psc?/V12N9rQx0MYPHF/5Bi.o*a6jL6BabQv6p6D*117mqV1IRWOzDdIqsvxbXJUo9jN1gZEGZaJZP0rNt8toYqUiuUZkmHqSaQB3ye.Bw!!/c&ek=1&kp=1&pt=0&bo=cgRzAXIEcwERADc!&tl=1&tm=1592118000&sce=0-12-12&rf=0-18" alt="img"></p><h3 id="6-自动重写方式"><a href="#6-自动重写方式" class="headerlink" title="6.自动重写方式"></a>6.自动重写方式</h3><p>自动重写触发条件设置</p><pre class="line-numbers language-none"><code class="language-none">auto-aof-rewrite-min-size sizeauto-aof-rewrite-percentage percent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动重写触发比对参数（ 运行指令info Persistence获取具体信息 ）</p><pre class="line-numbers language-none"><code class="language-none">aof_current_sizeaof_base_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动重写触发条件 </p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-RDB与AOF"><a href="#3-RDB与AOF" class="headerlink" title="3.RDB与AOF"></a>3.RDB与AOF</h2><table><thead><tr><th align="center">持久化方式</th><th align="center">RDB</th><th align="center">AOF</th></tr></thead><tbody><tr><td align="center">占用存储空间</td><td align="center">小（数据级：压缩）</td><td align="center">大（指令级：重写）</td></tr><tr><td align="center">存储速度</td><td align="center">慢</td><td align="center">快</td></tr><tr><td align="center">恢复速度</td><td align="center">快</td><td align="center">慢</td></tr><tr><td align="center">数据安全性</td><td align="center">会丢失数据</td><td align="center">依据策略决定</td></tr><tr><td align="center">资源消耗</td><td align="center">高/重量级</td><td align="center">低/轻量级</td></tr><tr><td align="center">启动优先级</td><td align="center">低</td><td align="center">高</td></tr></tbody></table><p><strong>二者选择策略</strong></p><p>对数据非常敏感，建议使用默认的AOF持久化方案</p><ol><li>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据。</li><li>注意：由于AOF文件存储体积较大，且恢复速度较慢 </li></ol><p>数据呈现阶段有效性，建议使用RDB持久化方案</p><ol><li><p>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段 点数据恢复通常采用RDB方案 </p></li><li><p>注意：利用RDB实现紧凑的数据持久化会使Redis降的很低</p></li></ol><p>综合比对</p><ol><li><p>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</p></li><li><p>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</p></li><li><p>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</p></li><li><p>灾难恢复选用RDB </p></li><li><p>双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</p></li></ol><h1 id="8-事务"><a href="#8-事务" class="headerlink" title="8.事务"></a>8.事务</h1><h2 id="1-事务的基本操作"><a href="#1-事务的基本操作" class="headerlink" title="1.事务的基本操作"></a>1.事务的基本操作</h2><h3 id="1-开启事务"><a href="#1-开启事务" class="headerlink" title="1.开启事务"></a>1.开启事务</h3><p>设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</p><pre class="line-numbers language-none"><code class="language-none">multi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-执行事务"><a href="#2-执行事务" class="headerlink" title="2.执行事务"></a>2.执行事务</h3><p>设定事务的结束位置，同时执行事务。与multi成对出现，成对使用</p><pre class="line-numbers language-none"><code class="language-none">exec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-取消事务"><a href="#3-取消事务" class="headerlink" title="3.取消事务"></a>3.取消事务</h3><p>终止当前事务的定义，发生在multi之后，exec之前</p><pre class="line-numbers language-none"><code class="language-none">discard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-例"><a href="#4-例" class="headerlink" title="4.例"></a>4.例</h3><pre class="line-numbers language-none"><code class="language-none">multiset name jinget nameset age 22get ageexec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-事务中出现错误操作"><a href="#2-事务中出现错误操作" class="headerlink" title="2.事务中出现错误操作"></a>2.事务中出现错误操作</h2><h3 id="1-语法错误"><a href="#1-语法错误" class="headerlink" title="1.语法错误"></a>1.语法错误</h3><p>指命令书写格式有误 </p><p>处理结果 </p><p>如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正确的命令。</p><h3 id="2-运行错误"><a href="#2-运行错误" class="headerlink" title="2.运行错误"></a>2.运行错误</h3><p>指命令格式正确，但是无法正确的执行。</p><p>例如对list进行incr操作</p><p>处理结果 能够正确运行的命令会执行，运行错误的命令不会被执行</p><h2 id="3-锁"><a href="#3-锁" class="headerlink" title="3.锁"></a>3.锁</h2><p>1.对 key 添加监视锁，在执行exec前如果key发生了变化，终止事务执行</p><pre class="line-numbers language-none"><code class="language-none">watch key1 [key2……]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.取消所有锁</p><pre class="line-numbers language-none"><code class="language-none">unwatch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例</p><pre class="line-numbers language-none"><code class="language-none">watch namemultiset name jinget nameexecunwach name执行时name如果发生改变,则执行失败，返回nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分布式锁</strong></p><p>使用 setnx 设置一个公共锁</p><pre class="line-numbers language-none"><code class="language-none">setnx lock-key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功 </p><ol><li><p>对于返回设置成功的，拥有控制权，进行下一步的具体业务操作 </p></li><li><p>对于返回设置失败的，不具有控制权，排队或等待 </p></li></ol><p>操作完毕通过del操作释放锁</p><pre class="line-numbers language-none"><code class="language-none">setnx lock-num 1set num 20del lock-num &#x2F;&#x2F;在del lock-num之前，其他客户端无法操作num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分布式锁改良</strong></p><p>使用 expire 为锁key添加时间限定，到时不释放，放弃锁</p><pre class="line-numbers language-none"><code class="language-none">expire lock-key secondpexpire lock-key milliseconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于操作通常都是微秒或毫秒级，因此该锁定时间不宜设置过大。具体时间需要业务测试后确认。</p><ol><li>例如：持有锁的操作最长执行时间127ms，最短执行时间7ms。</li><li>测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时 </li><li>锁时间设定推荐：最大耗时<em>120%+平均网络延迟</em>110%</li><li>如果业务最大耗时&lt;&lt;网络平均延迟，通常为2个数量级，取其中单个耗时较长即可</li></ol><pre class="line-numbers language-none"><code class="language-none">setnx lock-num 1expire lock-num 20set num 20del lock-num 在del lock-num之前，20秒内，其他其他客户端无法操作num，20秒内del lock-num，其他客户端可操作num。超过20秒，锁失效,其他客户端可操作num。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-删除策略"><a href="#9-删除策略" class="headerlink" title="9.删除策略"></a>9.删除策略</h1><h3 id="数据删除策略的目标"><a href="#数据删除策略的目标" class="headerlink" title="数据删除策略的目标"></a>数据删除策略的目标</h3><p>在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或 内存泄露</p><h2 id="1-定时删除"><a href="#1-定时删除" class="headerlink" title="1.定时删除"></a>1.定时删除</h2><h3 id="1-策略"><a href="#1-策略" class="headerlink" title="1.策略"></a>1.策略</h3><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</p><h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2.优点"></a>2.优点</h3><p>节约内存，到时就删除，快速释放掉不必要的内存占用</p><h3 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3.缺点"></a>3.缺点</h3><p>CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>用处理器性能换取存储空间（拿时间换空间）</p><h2 id="2-惰性删除"><a href="#2-惰性删除" class="headerlink" title="2.惰性删除"></a>2.惰性删除</h2><h3 id="1-策略-1"><a href="#1-策略-1" class="headerlink" title="1.策略"></a>1.策略</h3><p>数据到达过期时间，不做处理。等下次访问该数据时 </p><ol><li>如果未过期，返回数据 </li><li>发现已过期，删除，返回不存在</li></ol><h3 id="2-优点-1"><a href="#2-优点-1" class="headerlink" title="2.优点"></a>2.优点</h3><p>节约CPU性能，发现必须删除的时候才删除</p><h3 id="3-缺点-1"><a href="#3-缺点-1" class="headerlink" title="3.缺点"></a>3.缺点</h3><p>内存压力很大，出现长期占用内存的数据</p><h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><p>用存储空间换取处理器性能(拿时间换空间）</p><h2 id="3-定期删除"><a href="#3-定期删除" class="headerlink" title="3.定期删除"></a>3.定期删除</h2><h3 id="1-策略-2"><a href="#1-策略-2" class="headerlink" title="1.策略"></a>1.策略</h3><p>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><p>特点1：CPU性能占用设置有峰值，检测频度可自定义设置 </p><p>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</p><h3 id="4-总结-2"><a href="#4-总结-2" class="headerlink" title="4.总结"></a>4.总结</h3><p>周期性抽查存储空间（随机抽查，重点抽查）</p><h2 id="4-对比"><a href="#4-对比" class="headerlink" title="4.对比"></a>4.对比</h2><p>1.定时删除 </p><ol><li>节约内存，无占用</li><li>不分时段占用CPU资源，频度高.</li><li>拿时间换空间</li></ol><p>2.惰性删除 </p><ol><li>内存占用严重</li><li>延时执行，CPU利用率高</li><li>拿空间换时间</li></ol><p>3.定期删除 </p><ol><li>内存定期随机清理</li><li>每秒花费固定的CPU资源维护内存</li><li>随机抽查，重点抽查</li></ol><h2 id="5-逐出算法"><a href="#5-逐出算法" class="headerlink" title="5.逐出算法"></a>5.逐出算法</h2><p>配置</p><p>最大可使用内存</p><p>占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上</p><pre class="line-numbers language-none"><code class="language-none">maxmemory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每次选取待删除数据的个数</p><p>选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据</p><pre class="line-numbers language-none"><code class="language-none">maxmemory-samples<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 删除策略</p><p>达到最大内存后的，对被挑选出来的数据进行删除的策略</p><pre class="line-numbers language-none"><code class="language-none">maxmemory-policy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检测易失数据（可能会过期的数据集server.db[i].expires ） </p><p>① volatile-lru：挑选最近最少使用的数据淘汰 </p><p>② volatile-lfu：挑选最近使用次数最少的数据淘汰 </p><p>③ volatile-ttl：挑选将要过期的数据淘汰 </p><p>④ volatile-random：任意选择数据淘汰 </p><p>检测全库数据（所有数据集server.db[i].dict ） </p><p>⑤ allkeys-lru：挑选最近最少使用的数据淘汰 </p><p>⑥ allkeys-lfu：挑选最近使用次数最少的数据淘汰</p><p>⑦ allkeys-random：任意选择数据淘汰</p><p>放弃数据驱逐 </p><p>⑧ no-enviction（驱逐）：禁止驱逐数据（redis4.0中默认策略），会引发错误OOM（Out Of Memory）</p><h1 id="10-Redis集群"><a href="#10-Redis集群" class="headerlink" title="10.Redis集群"></a>10.Redis集群</h1><h2 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1.主从复制"></a>1.主从复制</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1.作用"></a>1.作用</h3><p>改善三高问题：高并发、高性能、高可用</p><p>为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服 务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续 提供服务，实现Redis的高可用，同时实现数据冗余备份。</p><h3 id="2-多台服务器连接方案"><a href="#2-多台服务器连接方案" class="headerlink" title="2.多台服务器连接方案"></a>2.多台服务器连接方案</h3><p>简述：由一台机器作为提供数据方：master(主服务器，主节点，主库 主客户端)，多台机器作为数据接收方slave(从服务器，从节点，从库 从客户端)，通过数据同步，即将master中的数据即时、有效的复制到slave中，一个master可以拥有多个slave，一个slave只对应一个master</p><h3 id="3-master与slave"><a href="#3-master与slave" class="headerlink" title="3.master与slave"></a>3.master与slave</h3><p>master</p><ol><li>写数据</li><li>执行写操作时，将出现变化的数据自动同步到slave </li><li>读数据（可忽略）</li></ol><p>slave</p><ol><li><p>读数据</p></li><li><p>写数据（禁止）</p><p>关闭写数据功能：在配置文件中配置：slave-serve-stale-data no</p></li></ol><h3 id="4-主从复制的作用"><a href="#4-主从复制的作用" class="headerlink" title="4.主从复制的作用"></a>4.主从复制的作用</h3><ol><li>读写分离：master写、slave读，提高服务器的读写负载能力 </li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数 量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复 </li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式 </li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ol><h3 id="5-主从复制过程"><a href="#5-主从复制过程" class="headerlink" title="5.主从复制过程"></a>5.主从复制过程</h3><h4 id="1-建立连接阶段"><a href="#1-建立连接阶段" class="headerlink" title="1.建立连接阶段"></a>1.建立连接阶段</h4><p>即准备阶段：建立slave到master的连接，使master能够识别slave，并保存slave端口</p><h5 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a><strong>1.步骤</strong></h5><p>1：设置master的地址和端口，保存master信息 </p><p>2：建立socket连接 </p><p>3：发送ping命令（定时器任务） </p><p>4：身份验证 </p><p>5：发送slave端口信息 </p><p>至此，主从连接成功！</p><p> 状态： slave： 保存master的地址与端口 </p><p>​             master： 保存slave的端口 </p><p>​             总体： 之间创建了连接的socket</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/1.png" alt="1"></p><h5 id="2-建立连接方式"><a href="#2-建立连接方式" class="headerlink" title="2.建立连接方式"></a>2.建立连接方式</h5><p>1.客户端发送命令</p><pre class="line-numbers language-none"><code class="language-none">slaveof &lt;masterip&gt; &lt;masterport&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.启动服务器参数</p><pre class="line-numbers language-none"><code class="language-none">redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.服务器配置</p><pre class="line-numbers language-none"><code class="language-none">slaveof &lt;masterip&gt; &lt;masterport&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-断开连接"><a href="#3-断开连接" class="headerlink" title="3.断开连接"></a>3.断开连接</h5><p>服务端发送指令</p><pre class="line-numbers language-none"><code class="language-none">slaveof no one<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>slave断开连接后，不会删除已有数据，只是不再接受master发送的数据</p><h5 id="4-授权访问"><a href="#4-授权访问" class="headerlink" title="4.授权访问"></a>4.授权访问</h5><p>1.master设置密码</p><ol><li><p>master客户端发送命令设置密码</p><pre class="line-numbers language-none"><code class="language-none">requirepass &lt;password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>master配置文件设置密码</p><pre class="line-numbers language-none"><code class="language-none">config set requirepass &lt;password&gt;config get requirepass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>2.slave输入密码获取权限</p><ol><li><p>slave客户端发送命令设置密码</p><pre class="line-numbers language-none"><code class="language-none">auth &lt;password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>slave配置文件设置密码</p><pre class="line-numbers language-none"><code class="language-none">masterauth &lt;password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>slave启动服务器设置密码</p><pre class="line-numbers language-none"><code class="language-none">redis-server –a &lt;password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="2-数据同步阶段"><a href="#2-数据同步阶段" class="headerlink" title="2.数据同步阶段"></a>2.数据同步阶段</h4><p>在slave初次连接master后，复制master中的所有数据到slave,将slave的数据库状态更新成master当前的数据库状态.</p><h5 id="1-数据同步阶段工作流程"><a href="#1-数据同步阶段工作流程" class="headerlink" title="1.数据同步阶段工作流程"></a><strong>1.数据同步阶段工作流程</strong></h5><p>步骤1：请求同步数据 </p><p>步骤2：创建RDB同步数据 </p><p>步骤3：恢复RDB同步数据 </p><p>步骤4：请求部分同步数据 </p><p>步骤5：恢复部分同步数据 </p><p>至此，数据同步工作完成！ </p><p><strong>状态</strong>：</p><p> slave： 具有master端全部数据，包含RDB过程接收的数据 </p><p>master： 保存slave当前数据同步的位置 </p><p>总体： 之间完成了数据克隆</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/2.png" alt="2"></p><p><strong>全量复制</strong></p><p>在建立好连接之后，master将现有的数据复制给slave</p><p><strong>部分复制</strong></p><p>在全量复制时，如果有数据操作，这部分操作会被放入缓存区，等待slave将全量复制的数据处理完成之后，将缓存区中的数据进行复制</p><p>至此主从复制完成，接下来又数据操作，master与slave进行数据复制。进入命令传播阶段。</p><h5 id="2-master说明"><a href="#2-master说明" class="headerlink" title="2.master说明"></a><strong>2.master说明</strong></h5><ol><li><p>如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行 </p></li><li><p>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已 经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。 </p><pre class="line-numbers language-none"><code class="language-none">repl-backlog-size 1mb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执 行bgsave命令和创建复制缓冲区</li></ol><h5 id="3-slave说明"><a href="#3-slave说明" class="headerlink" title="3.slave说明"></a>3.slave说明</h5><ol><li><p>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务 </p><pre class="line-numbers language-none"><code class="language-none">slave-serve-stale-data yes|no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送 命令</p></li><li><p>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果 master带宽不足，因此数据同步需要根据业务需求，适量错峰 </p></li><li><p>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是 slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟 较大，数据一致性变差，应谨慎选择</p></li></ol><h4 id="3-命令传播阶段"><a href="#3-命令传播阶段" class="headerlink" title="3.命令传播阶段"></a>3.命令传播阶段</h4><p>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的 状态，同步的动作称为命令传播， master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</p><p><strong>命令传播阶段出现了断网现象</strong></p><ol><li>网络闪断闪连                               忽略</li><li>短时间网络中断                           部分复制</li><li>长时间网络中断                           全量复制</li></ol><p><strong>部分复制的三个核心要素</strong> </p><ol><li><p>服务器的运行 id（run id）</p><p>服务器运行ID（runid）</p><ol><li>概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id </li><li>组成：运行id由40位字符组成，是一个随机的十六进制字符 例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce</li><li>作用：运行id被用于在服务器间进行传输，识别身份 如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别 </li><li>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发 送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid</li></ol></li><li><p>主服务器的复制积压缓冲区     </p><ol><li><p>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命 令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</p><p>复制缓冲区默认数据存储空间大小是1M，由于存储空间大小是固定的，当入队元素的数量大于队 列长度时，最先入队的元素会被弹出，而新元素会被放入队列 </p></li><li><p>由来：每台服务器启动时，如果开启有AOF或被连接成为master节点，即创建复制缓冲区</p></li><li><p>作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select）</p></li><li><p>数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</p></li></ol></li><li><p>主从服务器的复制偏移量 </p><ol><li><p>概念：一个数字，描述复制缓冲区中的指令字节位置 </p></li><li><p>分类</p><p>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</p><p>slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</p></li><li><p>数据来源： master端：发送一次记录一次 slave端：接收一次记录一次 </p></li><li><p>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</p></li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/3.png" alt="3"></p><h4 id="4-心跳机制"><a href="#4-心跳机制" class="headerlink" title="4.心跳机制"></a>4.心跳机制</h4><p>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p><p>master心跳：</p><ol><li><p>指令：PING </p></li><li><p>周期：由repl-ping-slave-period决定，默认10秒 </p></li><li><p>作用：判断slave是否在线 </p></li><li><p>查询：INFO replication </p><p>获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</p></li></ol><p>slave心跳任务</p><ol><li><p>指令：REPLCONF ACK {offset} </p></li><li><p>周期：1秒</p></li><li><p>作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令 </p></li><li><p>作用2：判断master是否在线 主从复制工作流程 </p></li></ol><h4 id="5-心跳阶段注意事项"><a href="#5-心跳阶段注意事项" class="headerlink" title="5.心跳阶段注意事项"></a>5.心跳阶段注意事项</h4><ol><li><p>当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作 </p><pre class="line-numbers language-none"><code class="language-none">min-slaves-to-write 2min-slaves-max-lag 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>   slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步 </p><ol start="2"><li><p>slave数量由slave发送REPLCONF ACK命令做确认 </p></li><li><p>slave延迟由slave发送REPLCONF ACK命令做确认</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/4.png" alt="4"></p><h2 id="2-哨兵模式"><a href="#2-哨兵模式" class="headerlink" title="2.哨兵模式"></a>2.哨兵模式</h2><h2 id="3-集群"><a href="#3-集群" class="headerlink" title="3.集群"></a>3.集群</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="2020/09/18/MySQL/"/>
      <url>2020/09/18/MySQL/</url>
      
        <content type="html"><![CDATA[<p>​        MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<br>​        MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><a id="more"></a><h1 id="1-MySQL入门"><a href="#1-MySQL入门" class="headerlink" title="1.MySQL入门"></a>1.MySQL入门</h1><p><a href="http://dev.mysql.com/downloads/mysql">下载地址</a></p><h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h2><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[client]</span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token selector">[mysql]</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>latin1</span><span class="token selector">[mysqld]</span><span class="token comment"># 端口号</span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token comment"># 安装目录</span><span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>"C:/Program Files (x86)/MySQL/MySQL Server 5.0/"</span><span class="token comment"># 文件目录</span><span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>"C:/Program Files (x86)/MySQL/MySQL Server 5.0/Data/"</span><span class="token comment"># 默认字符集</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token comment">#存储引擎</span><span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span><span class="token comment"># 语法模式</span><span class="token constant">sql-mode</span><span class="token attr-value"><span class="token punctuation">=</span>"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span><span class="token comment"># 最大连接数</span><span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>100</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-服务的启动与停止"><a href="#2-服务的启动与停止" class="headerlink" title="2.服务的启动与停止"></a>2.服务的启动与停止</h2><h3 id="1-服务中开启"><a href="#1-服务中开启" class="headerlink" title="1.服务中开启"></a>1.服务中开启</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/mysql%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%81%9C%E6%AD%A2.png"></p><h3 id="2-命令行开启关闭"><a href="#2-命令行开启关闭" class="headerlink" title="2.命令行开启关闭"></a>2.命令行开启关闭</h3><h4 id="1-开启"><a href="#1-开启" class="headerlink" title="1.开启"></a>1.开启</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net start mysql服务名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-关闭"><a href="#2-关闭" class="headerlink" title="2.关闭"></a>2.关闭</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net stop mysql服务名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-启动MySQL"><a href="#3-启动MySQL" class="headerlink" title="3.启动MySQL"></a>3.启动MySQL</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>使用MySQL的命令行工具，输入密码使用</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/mysql%E5%91%BD%E4%BB%A4%E8%A1%8C.png"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用命令打开</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -h localhost -P 3306 -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80.png"></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>常用客户端打开</p><p>如SQLyog等</p><h2 id="4-查询数据库版本"><a href="#4-查询数据库版本" class="headerlink" title="4.查询数据库版本"></a>4.查询数据库版本</h2><p>1.在命令行中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.mysql命令中</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select version();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-语法规范"><a href="#5-语法规范" class="headerlink" title="5.语法规范"></a>5.语法规范</h2><ol><li><p>不区分大小写</p></li><li><p>每句话用;或\g结尾 </p></li><li><p>各子句一般分行写 </p></li><li><p>关键字不能缩写也不能分行 </p></li><li><p>用缩进提高语句的可读性</p></li><li><p>注释</p><ol><li><p>单行注释</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 注释-- 注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ol><ol start="2"><li><p>多行注释</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*注释注释*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="6-SQL分类"><a href="#6-SQL分类" class="headerlink" title="6.SQL分类"></a>6.SQL分类</h2><p>1.DDL(Data Definition Language)数据定义语言</p><p>​    用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</p><p>2.DML(Data Manipulation Language)数据操作语言</p><p>​    用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</p><p>3.DQL(Data Query Language)数据查询语言</p><p>​    用来查询数据库中表的记录(数据)。关键字：select, where 等</p><p>4.DCL(Data Control Language)数据控制语言(了解)</p><p>​    用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</p><h1 id="2-DDL-数据定义语言"><a href="#2-DDL-数据定义语言" class="headerlink" title="2.DDL:数据定义语言"></a>2.DDL:数据定义语言</h1><h2 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a>1.数据库操作</h2><h3 id="1-C-Create-创建"><a href="#1-C-Create-创建" class="headerlink" title="1.C(Create):创建"></a>1.C(Create):创建</h3><p>1.创建数据库：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.创建数据库，判断不存在，再创建：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建数据库，并指定字符集</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> db4 <span class="token keyword">character</span> <span class="token keyword">set</span> gbk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-R-Retrieve-：查询"><a href="#2-R-Retrieve-：查询" class="headerlink" title="2.R(Retrieve)：查询"></a>2.R(Retrieve)：查询</h3><p>查询所有数据库的名称:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询某个数据库的字符集:查询某个数据库的创建语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-U-Update-修改"><a href="#3-U-Update-修改" class="headerlink" title="3.U(Update):修改"></a>3.U(Update):修改</h3><p>修改数据库的字符集</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span> 数据库名称 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-D-Delete-删除"><a href="#4-D-Delete-删除" class="headerlink" title="4.D(Delete):删除"></a>4.D(Delete):删除</h3><p> 删除数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断数据库存在，存在再删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-使用数据库"><a href="#5-使用数据库" class="headerlink" title="5.使用数据库"></a>5.使用数据库</h3><p> 查询当前正在使用的数据库名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select database();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-表操作"><a href="#2-表操作" class="headerlink" title="2.表操作"></a>2.表操作</h2><h3 id="1-C-Create-创建-1"><a href="#1-C-Create-创建-1" class="headerlink" title="1.C(Create):创建"></a>1.C(Create):创建</h3><p><strong>1. 语法：</strong></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    列名<span class="token number">1</span> 数据类型<span class="token number">1</span><span class="token punctuation">,</span>    列名<span class="token number">2</span> 数据类型<span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    列名n 数据类型n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：最后一列，不需要加逗号（,）</p><p><strong>数据库类型：</strong></p><p><strong>1.int：整数类型</strong></p><p><strong>2.double:小数类型</strong></p><p><strong>3.date:日期</strong>，只包含年月日，yyyy-MM-dd</p><p><strong>4.datetime:日期</strong>，包含年月日时分秒 yyyy-MM-dd HH:mm:ss</p><p><strong>5.timestamp:时间错类型</strong> 包含年月日时分秒   yyyy-MM-dd HH:mm:ss  </p><p> 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</p><p><strong>6.varchar：字符串</strong></p><p> name varchar(20):姓名最大20个字符</p><p> 例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token punctuation">,</span>    score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birthday <span class="token keyword">date</span><span class="token punctuation">,</span>    insert_time <span class="token keyword">timestamp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复制表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">reate <span class="token keyword">table</span> 表名 <span class="token operator">like</span> 被复制的表名<span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-R-Retrieve-：查询-1"><a href="#2-R-Retrieve-：查询-1" class="headerlink" title="2.R(Retrieve)：查询"></a>2.R(Retrieve)：查询</h3><p><strong>查询某个数据库中所有的表名称</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查询其他数据库中的所有表</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show tables from 库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查询表结构</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-U-Update-修改-1"><a href="#3-U-Update-修改-1" class="headerlink" title="3.U(Update):修改"></a>3.U(Update):修改</h3><p><strong>修改表名</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> <span class="token keyword">to</span> 新的表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改表的字符集</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>添加一列</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名 数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改列名称类型</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 列名 新列名 新数据类型<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 列名 新数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>删除列</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 列名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-D-Delete-删除-1"><a href="#4-D-Delete-删除-1" class="headerlink" title="4.D(Delete):删除"></a>4.D(Delete):删除</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 表名 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-常见约束"><a href="#3-常见约束" class="headerlink" title="3.常见约束"></a>3.常见约束</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>一种限制，用于限制数据库中表中行/列的数据</p><p><strong>1.主键约束(PRIMARY KEY)</strong></p><p>用于保证该字段非空且唯一</p><p><strong>2.外键约束(FOREIGN KEY)</strong></p><p>用于保证该字段的值必须来自主表的关联列的值</p><p>外键应该添加在从表中添加（被约束的表）</p><p><strong>3.非空约束(NOT NULL)</strong></p><p>保证该字段的值不能为空</p><p><strong>4.唯一约束(UNIQUE)</strong></p><p>保证该字段唯一，但可以为空</p><p><strong>5.默认约束(Default)</strong></p><p>用于保证该字段有默认值</p><p><strong>6.检查约束(check)</strong></p><p>MySQL不支持，但不报错</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="1-创建表时添加约束"><a href="#1-创建表时添加约束" class="headerlink" title="1.创建表时添加约束"></a>1.创建表时添加约束</h4><p><strong>列级约束形式</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table student(    no int primary key , #主键约束    name varchar(15) not null ,   #非空约束    gender char(1) check ( gender&#x3D;&#39;男&#39; or gender&#x3D;&#39;女&#39; ),   #检查约束    ID varchar(20) unique ,   #唯一约束    age int default 18,   #默认约束    major_id int references major(id)   #外键约束);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表级约束形式</strong></p><p>不支持非空约束及默认约束</p><p>constraint 约束名    可以省略</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table teacher(    t_no       int,    name     varchar(15),    gender   char(1),    ID       varchar(20),    age      int,    major_id int,    constraint pk primary key (id),    constraint uq unique (ID),    constraint ck check ( gender &#x3D; &#39;男&#39; or gender &#x3D; &#39;女&#39; ),    constraint fk_t_m foreign key (major_id) references major(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建表之后添加约束"><a href="#2-创建表之后添加约束" class="headerlink" title="2.创建表之后添加约束"></a>2.创建表之后添加约束</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#主键约束ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型 PRIMARY KEY;ALTER TABLE 表名 ADD PRIMARY KEY(列名);#唯一约束ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型 UNIQUE;ALTER TABLE 表名 ADD UNIQUE(列名);#非空约束ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型 NOT NULL;#默认约束ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型 DEFAULT 默认值;#外键约束ALTER TABLE 表名 ADD [CONSTRAINT] 外键名称 FOREIGN KEY (外键列名称) REFERENCES 主表名称(主表列名称);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除约束"><a href="#3-删除约束" class="headerlink" title="3.删除约束"></a>3.删除约束</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#主键约束ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型;ALTER TABLE 表名 DROP PRIMARY KEY;#唯一约束ALTER TABLE 表名 DROP INDEX(列名);#非空约束ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型;#默认约束ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型;#外键约束ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-标识列"><a href="#4-标识列" class="headerlink" title="4.标识列"></a>4.标识列</h3><p>自增</p><p><strong>创建表时添加</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名(    属性名 值 约束 auto_increment,    ...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建表后添加</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 modify column 属性名 属性值 已有约束 auto_increment;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>设置自增数值</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set auto_increment_increment &#x3D;值;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-DQL-查询语句"><a href="#3-DQL-查询语句" class="headerlink" title="3.DQL:查询语句"></a>3.DQL:查询语句</h1><p><strong>语句顺序</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from 表名列表 where 条件列表group by 分组字段having 分组之后的条件order by 排序limit 分页限定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1.基础查询"></a>1.基础查询</h2><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 查询列表 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查询列表</strong></p><p>1.表中字段、2.常量值、3.表达式、4.函数</p><p>2.常量值</p><p>3.表达式</p><p>4.函数</p><h3 id="1-查询单个字段"><a href="#1-查询单个字段" class="headerlink" title="1.查询单个字段"></a>1.查询单个字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段名 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-查询多个字段"><a href="#2-查询多个字段" class="headerlink" title="2.查询多个字段"></a>2.查询多个字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段名1,字段名2,..., from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查询所有字段"><a href="#3-查询所有字段" class="headerlink" title="3.查询所有字段"></a>3.查询所有字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-查询常量值"><a href="#4-查询常量值" class="headerlink" title="4.查询常量值"></a>4.查询常量值</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 常量值;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-查询表达式"><a href="#5-查询表达式" class="headerlink" title="5.查询表达式"></a>5.查询表达式</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 表达式;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-查询函数"><a href="#6-查询函数" class="headerlink" title="6.查询函数"></a>6.查询函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 函数;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>函数</strong></p><p>version()：查询版本号</p><h3 id="7-起别名"><a href="#7-起别名" class="headerlink" title="7.起别名"></a>7.起别名</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 列名 as 别名 ... from 表名;select 列名 别名 ... from 表名;#别名中有特殊字符，可以给别名添加&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-去重查询"><a href="#8-去重查询" class="headerlink" title="8.去重查询"></a>8.去重查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select distinct 列名 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9.+运算符"></a>9.+运算符</h3><p>只能用于计算，不能用于拼接</p><p>两个数值型直接计算</p><p>其中有一个null,结果为null</p><p>如果为其它类型，会尝试转换为数值型</p><p>转换成功，计算；转化失败，则查询失败</p><p>如果要使用拼接功能，则要使用concat()函数</p><h2 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2.条件查询"></a>2.条件查询</h2><p><strong>语法</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 列名 from 表名 where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-条件表达式筛选"><a href="#1-条件表达式筛选" class="headerlink" title="1.条件表达式筛选"></a>1.条件表达式筛选</h3><p>条件运算符：&gt;、&lt;、=、!=、&lt;&gt;(也是不等于)、&gt;=、&lt;=</p><h3 id="2-逻辑表达式筛选"><a href="#2-逻辑表达式筛选" class="headerlink" title="2.逻辑表达式筛选"></a>2.逻辑表达式筛选</h3><p>&amp;&amp;     ||     !</p><p>and    or   not</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#与select * from 表名 where 条件1 and 条件2;select * from 表名 where 条件1 &amp;&amp; 条件2;#或select * from 表名 where 条件1 or 条件2;select * from 表名 where 条件1 || 条件2;#非select * from 表名 where 条件1 not 条件2;select * from 表名 where 条件1 ! 条件2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3.模糊查询"></a>3.模糊查询</h3><h4 id="1-like"><a href="#1-like" class="headerlink" title="1.like"></a>1.like</h4><p>像</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where x like &#39;y&#39;;eg:select * from 表名 where name like &#39;靳%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中y通常使用通配符</p><p><strong>通配符</strong></p><p>%：任意多个字符</p><p>_：任意一个字符</p><p>如果条件中有通配符，可以通过/进行转义，也可以通过escape关键字指定</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#第二个字符为_select * from 表名 where name like &#39;_&#x2F;_%&#39;;select * from 表名 where name like &#39;_$_%&#39; escape &#39;$&#39;;($可以任意指定)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-between-…-and-…"><a href="#2-between-…-and-…" class="headerlink" title="2.between  … and …"></a>2.between  … and …</h4><p>在…与…之间</p><p>包含临界值</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where x between 条件1 and 条件2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-in"><a href="#3-in" class="headerlink" title="3.in"></a>3.in</h4><p>在…之中</p><p><strong>值类型必须统一</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where x in (... , ... ,...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-is-null"><a href="#4-is-null" class="headerlink" title="4.is null"></a>4.is null</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where x is null;select * from 表名 where x is not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-排序查询"><a href="#3-排序查询" class="headerlink" title="3.排序查询"></a>3.排序查询</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 (where ...) order by 列名&#x2F;表达式、别名 (asc&#x2F;desc);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>asc:升序</p><p>desc:降序</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名  order by 列名&#x2F;表达式、别名 asc;select * from 表名  order by 列名&#x2F;表达式、别名 desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="按多个字段排序"><a href="#按多个字段排序" class="headerlink" title="按多个字段排序"></a>按多个字段排序</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名  order by 列名&#x2F;表达式、别名 asc,;select * from 表名  order by 列名&#x2F;表达式、别名 desc,;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-分组函数"><a href="#4-分组函数" class="headerlink" title="4.分组函数"></a>4.分组函数</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">group</span> <span class="token keyword">by</span> 条件<span class="token number">1</span><span class="token punctuation">,</span>条件<span class="token number">2</span> <span class="token keyword">having</span> 分组后筛选条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">no</span><span class="token punctuation">)</span> <span class="token keyword">no</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex <span class="token keyword">from</span> student <span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong>每组只会显示一条数据</p><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2.png"></p><p><strong>查询每组个数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sex <span class="token keyword">from</span> student <span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%AF%8F%E7%BB%84%E4%B8%AA%E6%95%B0.png"></p><p><strong>查询组中人数大于3的</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(*), sex from student group by sex having count(*)&gt;3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>函数分组</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from student group by length(name) ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>多字段分组</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from student group by length(name),no;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-连接查询"><a href="#5-连接查询" class="headerlink" title="5.连接查询"></a>5.连接查询</h2><p>又叫多表查询 </p><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h3><p>当要同时查询多个表中的字段时</p><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p><strong>sq92</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 查询字段 from 表名1,表名2 where 连接条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>sq99</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... from 表一 join 表二 on 连接条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... from 表一 join 表二 on 连接条件 join 表三 on 连接条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>外连接</strong></p><p>查询主表中所有的数据，如从表中没有对应的数据，则显示null</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... from 表一 left&#x2F;right outer join 表二 on 连接条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>左外连接中left join左边的是主表</p><p>有外连接中right join右边的是主表</p><p><strong>非等值查询</strong></p><p>不仅可以进行等值查询，也可以一进行非等值查询，如…between ..and..</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 查询字段 from 表名1,表名2 where ... between ..and.. ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 查询字段 from 表名1 join 表名2 on ... between ..and.. ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>交叉连接</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ... from ... cross join ...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以进行自连接（一个字段连接另一个字段）</p><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select no,name,acc from user,account where user.no&#x3D;account.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.png"></p><p>如果多表中都有同一字段名，可以使用表名约束，可以使用别名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select no,u.name,a.acc from user u,account a where u.no&#x3D;a.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多张表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select no,user.name,acc,t.name from user inner join account on user.no&#x3D;account.id inner join teacher t on user.no &#x3D; t.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>左外连接</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select u.no,u.name,a.acc from user u left outer join account a on u.no&#x3D;a.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%B7%A6%E5%A4%96%E8%BF%9E%E6%8E%A5.png"></p><p>右外连接</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select u.no,u.name,a.acc from user u right outer join account a on u.no&#x3D;a.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%8F%B3%E5%A4%96%E8%BF%9E%E6%8E%A5.png"></p><p>交叉连接</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select u.*,t.* from user u cross join teacher t;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E4%BA%A4%E5%8F%89%E8%BF%9E%E6%8E%A5.png"></p><h2 id="6-子查询"><a href="#6-子查询" class="headerlink" title="6.子查询"></a>6.子查询</h2><p>又称为内查询</p><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><p>出现在其他语句中的查询语句</p><p>可以分为</p><p>1.标量子查询（结果集只有一行一列）</p><p>2.列子查询（结果集有一行多列）</p><p>3.行子查询（结果集有一行多列）</p><p>4.表子查询（结果集一般有多行多列）</p><p>可以放置在select/from/where/having/exists后面</p><p>select:只支持标量子查询</p><p>from:支持表子查询</p><p>where/having：支持标量子查询、列子查询、行子查询（较少使用）</p><p>exists：表子查询</p><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.示例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from user where no&gt;(select no from user where name&#x3D;&#39;李四&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-分页查询"><a href="#7-分页查询" class="headerlink" title="7.分页查询"></a>7.分页查询</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 limit 起始索引（从0开始）,查询条数;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-示例-1"><a href="#2-示例-1" class="headerlink" title="2.示例"></a>2.示例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from user limit 2,3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.png"></p><h2 id="8-联合查询union"><a href="#8-联合查询union" class="headerlink" title="8.联合查询union"></a>8.联合查询union</h2><h3 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h3><p>将多个查询语句的结果合并为一个结果</p><p>要求多条插叙语句的列数相同</p><p>最好查询结果顺序相同</p><p>会自动去重，如果不去重，使用union all</p><h3 id="2-语法-1"><a href="#2-语法-1" class="headerlink" title="2.语法"></a>2.语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">查询语句1 union 查询语句2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取两个查询结果的合集</p><h3 id="3-示例-1"><a href="#3-示例-1" class="headerlink" title="3.示例"></a>3.示例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from user where age&gt;21 union select * from user where no&gt;3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-常见函数"><a href="#9-常见函数" class="headerlink" title="9.常见函数"></a>9.常见函数</h2><p><strong>函数可以嵌套使用</strong></p><h3 id="1-单行函数"><a href="#1-单行函数" class="headerlink" title="1.单行函数"></a>1.单行函数</h3><h4 id="1-字符函数"><a href="#1-字符函数" class="headerlink" title="1.字符函数"></a>1.字符函数</h4><h5 id="1-length"><a href="#1-length" class="headerlink" title="1.length()"></a>1.length()</h5><p>计算传入参数的字节长度</p><p>utf-8中汉字占三个字节，字母占一个字节。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">length(...);eg:select length(name) from ...;select length(123) from ...;select length(&#39;safasd&#39;) from ...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-concat"><a href="#2-concat" class="headerlink" title="2.concat()"></a>2.concat()</h5><p>拼接函数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">concat(参数1，参数2，参数3)egselect length(name,&#39;-&#39;,age) from ...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-upper-、lower"><a href="#3-upper-、lower" class="headerlink" title="3.upper()、lower()"></a>3.upper()、lower()</h5><p>转换大小写</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select upper(&#39;asd&#39;);select lower(&#39;SDF&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-substr-、substring"><a href="#4-substr-、substring" class="headerlink" title="4.substr()、substring()"></a>4.substr()、substring()</h5><p>截取字符段</p><p>sql中索引是从1开始的。</p><h6 id="1-substr-内容-索引"><a href="#1-substr-内容-索引" class="headerlink" title="1.substr(内容,索引)"></a>1.substr(内容,索引)</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select substr(&#39;asdfgh&#39;,5);      #ghselect substring(&#39;asdfgh&#39;,5);   #gh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="2-substr-内容-索引-截取字符长度"><a href="#2-substr-内容-索引-截取字符长度" class="headerlink" title="2.substr(内容,索引,截取字符长度)"></a>2.substr(内容,索引,截取字符长度)</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select substr(&#39;asdfgsadadsash&#39;,3,3);  #dfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-instr"><a href="#5-instr" class="headerlink" title="5.instr()"></a>5.instr()</h5><p><strong>instr(内容1，内容2)</strong></p><p>返回内容2在内容1第一次出现的位置(索引)，如没有，返回0。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select instr(&#39;asdfgsadadsash&#39;,&#39;sa&#39;);    # 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="6-trim"><a href="#6-trim" class="headerlink" title="6.trim()"></a>6.trim()</h5><h6 id="1-trim-内容"><a href="#1-trim-内容" class="headerlink" title="1.trim(内容)"></a>1.trim(内容)</h6><p>去掉内容中的空格（不能取出中间的空格）</p><h6 id="2-trim-内容1-from-内容2"><a href="#2-trim-内容1-from-内容2" class="headerlink" title="2.trim(内容1 from 内容2)"></a>2.trim(内容1 from 内容2)</h6><p>去掉内容2中前后的内容1（不能取出中间的内容）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select trim(&#39;as&#39; from &#39;asdfgsadadsashas&#39;);   # dfgsadadsash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-lpad-、rpad"><a href="#7-lpad-、rpad" class="headerlink" title="7.lpad()、rpad()"></a>7.lpad()、rpad()</h5><p>lpad/rpad(内容，长度，字符)</p><p>用指定字符将内容左/右填充到指定长度。</p><p>如果长度小于原有长度，则从左/右侧开始截取指定长度</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select lpad(&#39;avf&#39;,10,&#39;-&#39;);    # -------avfselect lpad(&#39;avdasdadasdf&#39;,5,&#39;-&#39;);   # avdas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="8-replace"><a href="#8-replace" class="headerlink" title="8.replace()"></a>8.replace()</h5><p>replace(内容，被替换，替换)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select replace(&#39;asdfasdfgasgfb&#39;,&#39;as&#39;,&#39;123&#39;);  # 123df123dfg123gfb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-数学函数"><a href="#2-数学函数" class="headerlink" title="2.数学函数"></a>2.数学函数</h4><h5 id="1-round"><a href="#1-round" class="headerlink" title="1.round()"></a>1.round()</h5><h6 id="1-round-数值"><a href="#1-round-数值" class="headerlink" title="1.round(数值)"></a>1.round(数值)</h6><p>四舍五入</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select round(1.236);   # 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="round-数值-长度"><a href="#round-数值-长度" class="headerlink" title="round(数值,长度)"></a>round(数值,长度)</h6><p>四舍五入,保留指定长度小数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select round(1.236,2);   # 1.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-ceil"><a href="#2-ceil" class="headerlink" title="2.ceil()"></a>2.ceil()</h5><p>向上取整，返回大于等于参数的最小整数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ceil(1.002);   # 2select ceil(-1.002);  # -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-floor"><a href="#3-floor" class="headerlink" title="3.floor()"></a>3.floor()</h5><p>向下取整，返回小于等于参数的最大整数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select floor(1.9999);     # 1select floor(-1.9999);    # -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-truncate"><a href="#4-truncate" class="headerlink" title="4.truncate()"></a>4.truncate()</h5><p>截断，保留指定位数小数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select truncate(1.23543,3);   # 1.235<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-mod"><a href="#5-mod" class="headerlink" title="5.mod()"></a>5.mod()</h5><p>取余</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select mod(10,3);      #  1select mod(-10,-3);    #  -1select mod(-10,3);     #  -1select mod(10,-3);     #  1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3.日期函数"></a>3.日期函数</h4><h5 id="1-now"><a href="#1-now" class="headerlink" title="1.now()"></a>1.now()</h5><p>返回当前日期日期+时间</p><h5 id="2-curdate"><a href="#2-curdate" class="headerlink" title="2.curdate()"></a>2.curdate()</h5><p>返回当前日期日期</p><h5 id="3-year-、month"><a href="#3-year-、month" class="headerlink" title="3.year()、month()"></a>3.year()、month()</h5><p>获取日期中的年、月</p><p>同理可得日、时、分、秒</p><h5 id="4-str-to-date"><a href="#4-str-to-date" class="headerlink" title="4.str_to_date()"></a>4.str_to_date()</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select str_to_date(&#39;31_12_1998&#39;,&#39;%Y_%c_%d&#39;); # 2031-12-19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%97%B6%E9%97%B4%E8%A1%A8%E7%A4%BA.png"></p><h5 id="5-date-format"><a href="#5-date-format" class="headerlink" title="5.date_format()"></a>5.date_format()</h5><p>将时间转换为指定形式字符串</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select date_format(&#39;2020&#x2F;02&#x2F;15&#39;,&#39;%Y年%c月%d日&#39;);   # 2020年2月15日<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-流程控制函数"><a href="#4-流程控制函数" class="headerlink" title="4.流程控制函数"></a>4.流程控制函数</h4><h5 id="1-if"><a href="#1-if" class="headerlink" title="1.if()"></a>1.if()</h5><p><strong>语法：</strong>if(条件表达式,结果1,结果2)</p><p>条件成立，取结果1；不成立，取结果2.</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select if(1&gt;2,3,4);      #   4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-case"><a href="#2-case" class="headerlink" title="2.case()"></a>2.case()</h5><p><strong>语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-----------------------1--------------------------case 条件字段 when 情况1 then 要显示的值表达式&#x2F;语句(流程控制语句中使用)1...when 情况n then 要显示的值表达式&#x2F;语句(流程控制语句中使用)nelse 要显示的值表达式&#x2F;语句(流程控制语句中使用)n+1end-----------------------2--------------------------case when 条件1 then 要显示的值表达式&#x2F;语句(流程控制语句中使用)1...when 条件1n then 要显示的值表达式&#x2F;语句(流程控制语句中使用)nelse 要显示的值表达式&#x2F;语句(流程控制语句中使用)n+1end语句，每种情况后要加分号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT NO,age 原年龄,CASE NOWHEN 1 THEN age*3WHEN 2 THEN age*5WHEN 3 THEN age*8WHEN 4 THEN age*10ELSE ageEND AS 新年龄FROM USER;------------------------------------------------SELECT NO,age 原年龄,CASEWHEN NO&#x3D;1 THEN age-5WHEN NO&#x3D;2 THEN age+5WHEN NO&#x3D;3 THEN age-8WHEN NO&#x3D;4 THEN age+10ELSE ageEND AS 新年龄FROM USER;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/case().png"><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/case()2.png"></p><h4 id="5-其他函数"><a href="#5-其他函数" class="headerlink" title="5.其他函数"></a>5.其他函数</h4><h5 id="1-version"><a href="#1-version" class="headerlink" title="1.version()"></a>1.version()</h5><p>返回版本号</p><h5 id="2-database"><a href="#2-database" class="headerlink" title="2.database()"></a>2.database()</h5><p>查询当前数据库</p><h3 id="2-分组函数"><a href="#2-分组函数" class="headerlink" title="2.分组函数"></a>2.分组函数</h3><p>又称为聚合函数，统计函数，组函数</p><h4 id="1-sum"><a href="#1-sum" class="headerlink" title="1.sum()"></a>1.sum()</h4><p>求和</p><h4 id="2-avg"><a href="#2-avg" class="headerlink" title="2.avg()"></a>2.avg()</h4><p>求平均值</p><h4 id="3-max"><a href="#3-max" class="headerlink" title="3.max()"></a>3.max()</h4><p>求最大值</p><h4 id="4-min"><a href="#4-min" class="headerlink" title="4.min()"></a>4.min()</h4><p>求最小值</p><h4 id="5-count"><a href="#5-count" class="headerlink" title="5.count()"></a>5.count()</h4><p>求总条数</p><p><strong>以上数据支持数据类型</strong></p><p>sum、avg：数字类型</p><p>max、min：数字类型，字符型，日期数据类型</p><p>count：任何数据类型</p><h4 id="6-datediff"><a href="#6-datediff" class="headerlink" title="6.datediff()"></a>6.datediff()</h4><p>计算两个日期之间的天数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> datediff<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'1998-08-29'</span><span class="token punctuation">)</span> <span class="token keyword">time</span><span class="token punctuation">;</span>       结果：<span class="token number">8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用这个函数计算年龄</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> datediff<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'1998-08-29'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">365</span> <span class="token keyword">time</span><span class="token punctuation">;</span>   结果：<span class="token number">21.9178</span> 获取时取整即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-DML-数据操作语言"><a href="#4-DML-数据操作语言" class="headerlink" title="4.DML:数据操作语言"></a>4.DML:数据操作语言</h1><h2 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1.添加数据"></a>1.添加数据</h2><p>插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>列名n<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>值n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">set</span> 列名<span class="token operator">=</span>值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：</p><ol><li><p>列名和值要一一对应。</p></li><li><p>如果表名后，不定义列名，则默认给所有列添加值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>值n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>除了数字类型，其他类型需要使用引号(单双都可以)引起来</p></li><li><p>可以一次插入多行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名 (...) values (第一行数据),(第二行数据)...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title="2.删除数据"></a>2.删除数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ol><li><p>如果不加条件，则删除表中所有记录。</p></li><li><p>如果要删除所有记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不推荐使用。有多少条记录就会执行多少次删除操作，不能使用条件语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐使用，效率更高 先删除表，然后再创建一张一样的表。</p></li></ol><p><strong>TRUNCATE不支持事务的回滚</strong></p><p><strong>多表删除</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete 表 from 表一,表二 where 连接条件 and 筛选条件;delete 表 from 表一 inner join 表二 on 连接条件 where 筛选条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除一个表中的数据delete中写一个表，删除多个填多个。</p><h2 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3.修改数据"></a>3.修改数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 列名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 列名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不加任何条件，则会将表中所有记录全部修改</p><p>也可以使用join on</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update 表名 join 表二 on 条件 set 列名1 &#x3D; 值1, 列名2 &#x3D; 值2,... [where 条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-TCL-事务控制语言"><a href="#5-TCL-事务控制语言" class="headerlink" title="5.TCL:事务控制语言"></a>5.TCL:事务控制语言</h1><p>一个或一组sql语句组成一个执行单元，这个执行单元要么全部成功，要么全部失败。</p><h2 id="1-事务的ACID特性"><a href="#1-事务的ACID特性" class="headerlink" title="1.事务的ACID特性"></a>1.事务的ACID特性</h2><h3 id="1-原子性：Atomicity"><a href="#1-原子性：Atomicity" class="headerlink" title="1.原子性：Atomicity"></a>1.原子性：Atomicity</h3><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么 都发生，要么都不发生。</p><h3 id="2-一致性：Consistency"><a href="#2-一致性：Consistency" class="headerlink" title="2.一致性：Consistency"></a>2.一致性：Consistency</h3><p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态 。</p><h3 id="3-隔离性：Isolation"><a href="#3-隔离性：Isolation" class="headerlink" title="3.隔离性：Isolation"></a>3.隔离性：Isolation</h3><p>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个 事务内部的操作及使用的数据对并发的其他事务是隔离的，并发 执行的各个事务之间不能互相干扰。</p><h3 id="4-持久性：Durability"><a href="#4-持久性：Durability" class="headerlink" title="4.持久性：Durability"></a>4.持久性：Durability</h3><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是 永久性的，接下来的其他操作和数据库故障不应该对其有任何影 响</p><h2 id="2-事务的创建"><a href="#2-事务的创建" class="headerlink" title="2.事务的创建"></a>2.事务的创建</h2><h3 id="1-隐式事务"><a href="#1-隐式事务" class="headerlink" title="1.隐式事务"></a>1.隐式事务</h3><p>事务没有明显的开启和结束的标记</p><h3 id="2-显示事务"><a href="#2-显示事务" class="headerlink" title="2.显示事务"></a>2.显示事务</h3><p>事务有明显的开启和结束功能</p><h4 id="1-开启事务"><a href="#1-开启事务" class="headerlink" title="1.开启事务"></a>1.开启事务</h4><p>将自动提交功能禁用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set autocommit &#x3D; 0;start transaction ;(可选)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-编写事务"><a href="#2-编写事务" class="headerlink" title="2.编写事务"></a>2.编写事务</h4><h4 id="3-结束事务"><a href="#3-结束事务" class="headerlink" title="3.结束事务"></a>3.结束事务</h4><p>提交：commit;</p><p>回滚：rollback;</p><h1 id="6-视图"><a href="#6-视图" class="headerlink" title="6.视图"></a>6.视图</h1><p>虚拟表，不占用内存</p><h2 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1.语法"></a>1.语法</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create view 视图名as查询语句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h2><p>可以当作表使用，进行查询</p><h2 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create or replace view 视图名as查询语句;alter view 视图名as查询语句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>不存在就创建，存在就修改</strong></p><h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop view 视图名1,视图名2...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-查看"><a href="#5-查看" class="headerlink" title="5.查看"></a>5.查看</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show create view 视图名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-更新"><a href="#6-更新" class="headerlink" title="6.更新"></a>6.更新</h2><p>不建议通过视图修改</p><h3 id="1-插入"><a href="#1-插入" class="headerlink" title="1.插入"></a>1.插入</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 视图名 (...) values(...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>一次只能添加一个表的字段</strong></p><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update 视图名 set ..&#x3D;..;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from 视图名 where ...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create view myviewas    select s.no,s.name as sname,s.gender,s.ID,s.age,m.name as mnamefrom student sinner join major mon s.major_id&#x3D;m.idwhere m.id&#x3D;1;select * from myview;create or replace view myviewas    select s.no,s.name as sname,s.gender,s.ID,s.age,m.name as mnamefrom student sinner join major mon s.major_id&#x3D;m.idwhere m.id&#x3D;1;drop view my;insert into my (mname, mid) values (&#39;hx&#39;,2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%A7%86%E5%9B%BE.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%A7%86%E5%9B%BE%E6%9F%A5%E8%AF%A2.png"></p><h1 id="7-变量"><a href="#7-变量" class="headerlink" title="7.变量"></a>7.变量</h1><h2 id="1-系统变量"><a href="#1-系统变量" class="headerlink" title="1.系统变量"></a>1.系统变量</h2><p>由系统提供，属于服务器层面。</p><p>查看所有系统变量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables ;show variables like &#39;%...%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.png"></p><h3 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1.全局变量"></a>1.全局变量</h3><p>查看全局变量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show global variables ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%9F%A5%E7%9C%8B%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.png"></p><h3 id="2-会话变量"><a href="#2-会话变量" class="headerlink" title="2.会话变量"></a>2.会话变量</h3><p>查看会话变量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show session variables ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%9F%A5%E7%9C%8B%E4%BC%9A%E8%AF%9D%E5%8F%98%E9%87%8F.png"></p><h2 id="2-自定义变量"><a href="#2-自定义变量" class="headerlink" title="2.自定义变量"></a>2.自定义变量</h2><h3 id="1-用户变量"><a href="#1-用户变量" class="headerlink" title="1.用户变量"></a>1.用户变量</h3><p>声明</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set @变量名&#x3D;值;set @变量名:&#x3D;值;select @变量名:&#x3D;值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>赋值（更改）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set @变量名&#x3D;值;set @变量名:&#x3D;值;select @变量名:&#x3D;值;select 字段 into @变量名 from 表名; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @变量名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2.局部变量"></a>2.局部变量</h3><p><strong>只能作用于begin end的第一句中</strong></p><p>声明</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">declare 变量名 类型;declare 变量名 类型 default 值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>赋值（更改）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set @变量名&#x3D;值;set @变量名:&#x3D;值;select @变量名:&#x3D;值;select 字段 into 局部变量名 from 表名; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 变量名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="8-存储过程与函数"><a href="#8-存储过程与函数" class="headerlink" title="8.存储过程与函数"></a>8.存储过程与函数</h1><h2 id="1-存储过程"><a href="#1-存储过程" class="headerlink" title="1.存储过程"></a>1.存储过程</h2><h3 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h3><p>​        存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。在数据量特别庞大的情况下利用存储过程能达到倍速的效率提升</p><h3 id="2-好处"><a href="#2-好处" class="headerlink" title="2.好处"></a>2.好处</h3><p>1.提高了代码的重用型</p><p>2.简化操作</p><p>3.减少了编译次数与连接数据库次数</p><h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建create procedure 存储过程名(参数列表)begin存储过程体(合法有效sql语句)end#只有一句话时，可以省略begin end#每条sql语句后边加;存储过程结尾加delimiter 结束标记#调用call 存储过程名(参数列表)#删除drop procedure 过程名;#查看show create procedure 过程名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数包括三部分</p><p>参数模式 </p><p>in：可作为输入，也就是该参数需要调用方法入值</p><p>out ：可作为输出，也就是方法的返回值</p><p>inout：既可以作为输入，又可以作为输出</p><p>参数名</p><p>参数类型</p><h3 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER $;CREATE PROCEDURE ins()BEGIN    INSERT INTO student (NAME,age) VALUES (&#39;ws&#39;,23),(&#39;ww&#39;,24);    INSERT INTO major VALUES (5,&#39;hg&#39;);END $;call ins();#************************************************************************#DELIMITER $;CREATE PROCEDURE nis(in sname varchar(15),in sname2 varchar(15))BEGIN    INSERT INTO student (NAME,age) VALUES (sname2,23);END $;call nis(&#39;zs&#39;,&#39;ls&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delimiter $;create procedure query(in sno int,out sname varchar(15))begin    select name into sname from student where no&#x3D;sno;end $;call (101,@sname);select @sname;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/query().png"></p><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h2><p>存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新<br>函数：有且仅有1个返回，适合做处理数据后返回一个结果</p><h3 id="1-语法-2"><a href="#1-语法-2" class="headerlink" title="1.语法"></a>1.语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建create function 函数名(参数列表) returns 返回值类型begin    函数体end $;#调用select 函数名(参数列表);#查询show create function 函数名;#删除drop function query;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数列表包括参数名、参数类型</p><p>函数体只有一句话时，可以省略begin end    </p><h3 id="2-示例-2"><a href="#2-示例-2" class="headerlink" title="2.示例"></a>2.示例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#***************************无参*********************************#delimiter $create function iquery() returns varchar(15)begin    declare sname varchar(15);    select name into sname from student where no&#x3D;101;    return sname;end $select iquery()$#***************************有参*********************************#delimiter $create function qn(sno int) returns varchar(15)begin    declare sname varchar(15);    select name into sname from student where no&#x3D;sno;    return sname;end $select qn(102);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-流程控制结构"><a href="#9-流程控制结构" class="headerlink" title="9.流程控制结构"></a>9.流程控制结构</h1><p>顺序结构：程序从上往下依次执行</p><p>分支结构：程序从两条或多条路径中选择一条去执行</p><p>循环结构：程序在满足一定条件的基础上，重复执行一段代码</p><h2 id="1-分支结构"><a href="#1-分支结构" class="headerlink" title="1.分支结构"></a>1.分支结构</h2><h3 id="1-if函数"><a href="#1-if函数" class="headerlink" title="1.if函数"></a>1.if函数</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-----------------------1--------------------------if(条件表达式1，条件表达式2,条件表达式3)-----------------------2--------------------------if 条件1 then 语句1;elseif 条件2 then 语句2;...elseif 条件n-1 then 语句n-1;else 语句n;end if;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果表达式1成立，则主函数返回表达式2的值，否则返回表达式3的值</p><h3 id="2-case函数"><a href="#2-case函数" class="headerlink" title="2.case函数"></a>2.case函数</h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-----------------------1--------------------------case 条件字段 when 情况1 then 要显示的值表达式&#x2F;语句(流程控制语句中使用)1...when 情况n then 要显示的值表达式&#x2F;语句(流程控制语句中使用)nelse 要显示的值表达式&#x2F;语句(流程控制语句中使用)n+1end-----------------------2--------------------------case when 条件1 then 要显示的值表达式&#x2F;语句(流程控制语句中使用)1...when 条件1n then 要显示的值表达式&#x2F;语句(流程控制语句中使用)nelse 要显示的值表达式&#x2F;语句(流程控制语句中使用)n+1end语句，每种情况后要加分号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细见3.9.1.5</p><h2 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2.循环结构"></a>2.循环结构</h2><h3 id="1-while"><a href="#1-while" class="headerlink" title="1.while"></a>1.while</h3><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[标签:]while 循环条件 do循环体;end while [标签];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-loop"><a href="#2-loop" class="headerlink" title="2.loop"></a>2.loop</h3><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[标签:]loop循环体;end loop [标签];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-repeat"><a href="#3-repeat" class="headerlink" title="3.repeat"></a>3.repeat</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[标签:]repeat循环体;util 结束条件end repeat [标签];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="2020/09/18/MyBatis/"/>
      <url>2020/09/18/MyBatis/</url>
      
        <content type="html"><![CDATA[<p>​        MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p><a id="more"></a><h1 id="1-MyBatis"><a href="#1-MyBatis" class="headerlink" title="1.MyBatis"></a>1.MyBatis</h1><h2 id="1-MyBatis入门"><a href="#1-MyBatis入门" class="headerlink" title="1.MyBatis入门"></a>1.MyBatis入门</h2><p><strong>1.MyBatis作用：</strong>持久化层框架，和数据库进行交互</p><p>2.持久化层学习路线</p><ol><li>原生JDBC</li><li>工具类DBUtils,JdbcTemolate</li><li>持久化层框架/ORM框架（Hiberbate）</li></ol><p>3.框架优点</p><ol><li><p>简化操作</p><p>原生jdbc操作步骤：获取连接→获取PreparedStatement→写SQL→与编译参数→执行SQL→封装结果</p></li><li><p>便于SQL优化，解决jdbc硬编码SQL的问题，减低数据层耦合</p></li><li><p>重点文件写在配置文件中，便于维护。</p></li></ol><h2 id="2-建立MyBatis环境"><a href="#2-建立MyBatis环境" class="headerlink" title="2.建立MyBatis环境"></a>2.建立MyBatis环境</h2><h3 id="1-需要的jar包"><a href="#1-需要的jar包" class="headerlink" title="1.需要的jar包"></a><strong>1.需要的jar包</strong></h3><ol><li>mybatis.jar   </li><li>mysql-connector-java-5.1.48.jar</li></ol><p><strong>maven依赖</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-MyBatis配置文件"><a href="#2-MyBatis配置文件" class="headerlink" title="2.MyBatis配置文件"></a><strong>2.MyBatis配置文件</strong></h3><h4 id="1-全局配置文件conf-xml"><a href="#1-全局配置文件conf-xml" class="headerlink" title="1.全局配置文件conf.xml"></a><strong>1.全局配置文件conf.xml</strong></h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--&lt;setting>用于配置全局参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--开启缓存--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--设置单个/多个别名   (别名忽略大小写)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jxy.Student<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--批量定义别名     别名就是类名    (别名忽略大小写)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jxy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--&lt;plugins>中用于配置插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 配置分页插件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍            &lt;property name="param1" value="value1"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--选择环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>devMySql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--配置环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>devMySql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--配置数据库连接池配置，可将配置写在properties文件中，使用$&#123;&#125;引用--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>devOracle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置环境别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--name为元数据，大小写固定，value为别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MYSQL<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Oracle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--加载xml形式mapper文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/mapper/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--加载接口形式mapper文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>包名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Setting中可设置的全局参数</strong></p><table><thead><tr><th>参数</th><th>简介</th><th>有效值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>在全局范围内，启用或禁用缓存</td><td>true（默认）、false</td></tr><tr><td>lazyLoadingEnabled</td><td>在全局范围内启用或禁用延迟加载。当禁用时，所有相关联的对象都将立即加载（热加载）。</td><td>true（默认）、false</td></tr><tr><td>aggressiveLazyLoading</td><td>启用时，有延迟加载属性的对象，在被调用时将会完全加载所有属性（立即加载）。否则，每一个属性都将按需加载（即延迟加载）。</td><td>true（默认）、false</td></tr><tr><td>multipleResultSetsEnabled</td><td>允许或禁止执行一条单独的SQL语句后返回多条结果（结果集）；需要驱动程序的支持</td><td>true（默认）、false</td></tr><tr><td>autoMappingBehavior</td><td>指定数据表字段和对象属性的映射方式。  NONE：禁止自动映射，只允许手工配置的映射  PARTIAL：只会自动映射简单的、没有嵌套的结果  FULL：自动映射任何结果（包含嵌套等）</td><td>NONE、  PARTIAL（默认）、  FULL</td></tr><tr><td>defaultExecutorType</td><td>指定默认的执行器。  SIMPLE：普通的执行器。  REUSE：可以重复使用prepared statements语句。  BATCH：可以重复执行语句和批量更新。</td><td>SIMPLE（默认）、  REUSE、  BATCH</td></tr><tr><td>defaultStatementTimeout</td><td>设置驱动器等待数据库回应的最长时间</td><td>以秒为单位的，任意正整数。无默认值</td></tr><tr><td>safeRowBoundsEnabled</td><td>允许或禁止使用嵌套的语句</td><td>true、false（默认）</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>当在数据表中遇到有下划线的字段时，自动映射到相应驼峰式形式的Java属性名。例如，会自动将数据表中的stu_no字段，映射到POJO类的stuNo属性。</td><td>true、false（默认）</td></tr><tr><td>lazyLoadTriggerMethods</td><td>指定触发延迟加载的对象的方法</td><td>equals、clone、hashCode、toString</td></tr></tbody></table><h4 id="2-数据库配置文件db-properties"><a href="#2-数据库配置文件db-properties" class="headerlink" title="2.数据库配置文件db.properties"></a>2.数据库配置文件db.properties</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">mysql.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">mysql.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8</span><span class="token attr-name">mysql.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">mysql.password</span><span class="token punctuation">=</span><span class="token attr-value">0829</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-配置SQL配置文件mapper-xml"><a href="#3-配置SQL配置文件mapper-xml" class="headerlink" title="3.配置SQL配置文件mapper.xml"></a><strong>3.配置SQL配置文件mapper.xml</strong></h4><p><strong>映射文件所在目录结构，必须与dao接口所在包结构相同</strong></p><p><strong>与创建包不同，maven工程中resource目录下创建目录时，不能级联创建目录，只能单个创建目录</strong></p><p><strong>否则创建的目录将变为目录名为xx.xx.xx的目录。</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启缓存--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--配置sql--></span>    <span class="token comment">&lt;!--select查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from *** where **=#&#123;**&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--insert增加--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into student  values (#&#123;no&#125;,#&#123;name&#125;,#&#123;sid&#125;,#&#123;cid&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--delete删除--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from student where no=#&#123;no&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--update修改--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update ** set 列名1 = 值1, 列名2 = 值2,... where **;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**id:**id名，同时作为dao层接口方法的方法名</p><p><strong>parameterType：</strong>输入参数类型</p><p>​        如果参数为简单类型（8个基本数据类型与String），可以使用任意占位符，如果是对象数据类型，必须为对象中的属性的属性名</p><p><strong>resultType：</strong>输出数据类型</p><p>​        返回值类型为对象类型时，resultType 值为对象的全类名，但如果起了别名，可以使用别名，且别名忽略大小写。</p><p>​    MyBatis规定，输入参数与输出参数只能有一个，但可以通过将其写成对象/数组/集合的形式，从而传入多个参数。</p><h4 id="4-接口规范"><a href="#4-接口规范" class="headerlink" title="4.接口规范"></a>4.接口规范</h4><ol><li><p>接口中的方法名和mapper.xml文件中sql标签的id值相同</p></li><li><p>方法的输入参数和mapper.xml文件中标签的 parameterType类型一致</p></li><li><p>方法的返回值和mapper.xml文件中标签的 resultType类型一致</p><p>但是如果为集合类型，这里返回值要写成集合类型</p></li><li><p>mapper.xml文件中的namespace的值 ，为接口的全类名，使接口与 mapper.xml 一一对应</p><p>这是因为MyBatis在使用过程中，调用接口时会根据接口名找到对应的mapper.xml文件<br>根据接口的方法名 找到mapper.xml文件对应中的SQL标签</p></li></ol><h3 id="3-使用步骤"><a href="#3-使用步骤" class="headerlink" title="3.使用步骤"></a>3.使用步骤</h3><ol><li><p>创建主配置文件</p></li><li><p>创建实体类</p></li><li><p>创建dao接口</p></li><li><p>创建SQL映射配置文件</p></li><li><p>使用</p></li></ol><p><strong>使用</strong></p><p>步骤：</p><p>1.加载主配置文件</p><p>2.创建SqlSessionFactory工厂</p><p>3.使用SqlSessionFactory工厂创建SqlSession对象</p><p>4.使用SqlSession对象创建Dao接口的代理对象</p><p>5.使用代理对象执行方法</p><p>​    <strong>增删改操作时要提交，方法为使用SqlSession对象调用commit()方法。</strong></p><p>6.释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//加载主配置文件</span>    <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">"mybatis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">2.</span>创建<span class="token class-name">SqlSessionFactory</span>工厂    <span class="token class-name">SqlSessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过SessionFactory工厂的openSession()方法创建SqlSession对象</span>    <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.使用SqlSession对象创建Dao接口的代理对象</span>    <span class="token class-name">StuDao</span> stuDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StuDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过Mapper接口对象调用接口中的方法，根据方法，找到mapper.xml文件中对应的sql</span>    <span class="token class-name">Stu</span> student<span class="token operator">=</span>stuDao<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放资源</span>    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项</p><ol><li><p>如果使用的 事务方式为 jdbc,则需要 手工commit提交，即session.commit();</p></li><li><p>所有的标签 <select> <update>等 ，都必须有sql语句，但是sql参数值可选</p></li></ol><h3 id="4-入门案例"><a href="#4-入门案例" class="headerlink" title="4.入门案例"></a>4.入门案例</h3><p>1.主配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--批量定义别名,别名就是类名,(别名忽略大小写)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--选择环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MySQL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--配置环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MySQL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--配置事务类型--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--配置数据库连接池配置，可将配置写在properties文件中，使用$&#123;&#125;引用--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--加载xml形式mapper文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/jxy/mapper/StuMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.创建dao接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Stu</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StuDao</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stu</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.创建SQL映射配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--namespace名称空间，写接口全类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.mapper.StuDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置sql--></span>    <span class="token comment">&lt;!--select查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stu<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select * from stu where no=#&#123;no&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加载Mybatis配置文件</span>        <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">"mybatis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建SqlSessionFactory工厂，使用了构建者模式。</span>        <span class="token class-name">SqlSessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用工厂模式通过SessionFactory的openSession()方法生产SqlSession对象</span>        <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用代理模式获取Mapper接口代理对象</span>        <span class="token class-name">StuDao</span> stuDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StuDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过Mapper接口代理对象调用接口中的方法，根据方法，找到mapper.xml文件中对应的sql</span>        <span class="token class-name">Stu</span> student<span class="token operator">=</span>stuDao<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        如果是增删改操作，需要使用SqlSession对用commit()方法进行提交。        也可以在调用openSession()方法时，设置参数为true进行自动提交，但这样不能进行事务操作，所以实际使用中不推荐        */</span>        <span class="token comment">//释放资源</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-底层实现分析"><a href="#5-底层实现分析" class="headerlink" title="5.底层实现分析"></a>5.底层实现分析</h3><p>//加载Mybatis配置文件<br>Reader reader = Resources.getResourceAsReader(“mybatis.xml”);<br>//创建SqlSessionFactory工厂，使用了构建者模式。<br>SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(reader);<br>//使用工厂模式通过SessionFactory的openSession()方法生产SqlSession对象<br>SqlSession session = sessionFactory.openSession();<br>//使用代理模式获取Mapper接口代理对象<br>StuDao stuDao = session.getMapper(StuDao.class);</p><p><strong>代理模式创建代理对象过程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 通过调用此方法，返回一个代理类的对象，动态创建代理类对象     * 参数为被代理类的对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token class-name">T</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dao接口的字节码文件<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 调用Proxy类的newProxyInstance静态方法创建代理类对象         * 方法有三个参数         * 参数1：类的加载器，使用和被代理对象相同的加载器         * 参数2：类的接口集合，和被代理对象相同的接口（也就是dao层接口）         * 参数3：InvocationHandler接口实现类对象，创建代理对象，添加增强方法         */</span>        <span class="token class-name">MyInvocationHandler</span> myInvocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>dao层接口<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dao层接口<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在InvocationHandler实现类中实现调用的方法</strong></p><p>根据jdbc过程一步一步分析</p><p>1.首先获取Connection对象</p><p>根据上方加载的配置文件信息创建Connection对象</p><p>配置文件如下</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建预处理对象</p><p>根据加载的配置文件中的<mappers>标签中的信息获取到映射配置l文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.../.../....xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据代理对象调用的方法名，找到对应id的sql语句</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id名<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>返回值类型<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        sql语句    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取到对应的sql标签后，将其中的信息封装进一个对象中，返回，在调用时获取其中信息。</strong></p><p>获取到sql语句以及之前获取到的Connection对象创建预处理对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span>connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.获取到结果集</p><pre class="line-numbers language-none"><code class="language-none">ResultSet rs&#x3D;ps.executeQuery();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.遍历结果集</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    创建返回值类型对象    根据对象属性名获取到数据库中的数据    将取到的数据封装到对象中    将对象添加到集合中<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们需要获取到返回值类型。只需获取到sql标签中的resultType即可。</p><p>5.将集合返回    </p><h2 id="3-类型处理器（类型转换器）"><a href="#3-类型处理器（类型转换器）" class="headerlink" title="3.类型处理器（类型转换器）"></a>3.类型处理器（类型转换器）</h2><p><strong>作用：</strong>实现java与数据库之间不提供数据类型的转换</p><p>1.MyBatis自带一些常见的类型处理器  int  - number</p><p><strong>2.自定义MyBatis类型处理器</strong></p><pre><code>java -数据库(jdbc类型)</code></pre><p>示例：<br>实体类Student :  boolean   stuSex<br>            true:男<br>            false：女</p><p>表student：    number  stuSex<br>            1:男<br>            0：女<br><strong>创建类型转换器步骤步骤</strong><br>1.创建转换器：需要实现TypeHandler接口，此接口有一个实现类 BaseTypeHandler ，有2种选择：<br>    1. 实现接口TypeHandler接口<br>    2. 继承BaseTypeHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exchange</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//java->数据库(boolean->int)            泛型为java类型</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Boolean</span> b<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//数据库->java(根据数据库列名)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> string <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//数据库->java(根据数据库第几列)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> string <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//数据库->java(根据数据库存储过程)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> string <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在conf.xml文件中将转换器配置进去</p><p>在配置别名后配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandle</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jxy.Exchange.java<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boolean<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.在mapper.xml文件中配置resultMap</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输出类型<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类属性<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表列名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java属性类型<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>大写sql类型<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.配置sql语句使用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">paramterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>对应resultMap的id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    sql语句<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-输入参数parameterType"><a href="#4-输入参数parameterType" class="headerlink" title="4.输入参数parameterType"></a>4.输入参数parameterType</h2><p>输入参数有两种形式#{}、${}</p><h3 id="1-类型为简单类型时"><a href="#1-类型为简单类型时" class="headerlink" title="1.类型为简单类型时"></a>1.类型为简单类型时</h3><ol><li><p>使用#{占位符}，（使用的是Statement）占位符可以是任意的值，会给Sting类型的数据自动添加 ‘ ‘</p><p>使用${value} ，（使用的是PreparedStatement）会原样输出value占位符要使用value值,String类型数据需要手动添加 ‘ ’</p></li><li><p>#{}自动给String类型加上’’  （自动类型转换）</p><p>${} 原样输出，但是适合于 动态排序（动态字段）</p></li><li><p>模糊查询</p><p>#{}要在给对象赋值是添加%%</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"%name%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>${}可直接在sql语句中添加%%</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">select*from student where name like '%$&#123;name&#125;%'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="4"><li><p>#{}可以防止SQL注入<br>${}适合动态排序：可以用于sql语句拼接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> studnet <span class="token keyword">order</span> <span class="token keyword">by</span> $&#123;<span class="token keyword">value</span>&#125; <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>bind参数</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>处理传入的参数<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>如果传入的参数为简单类型，写属性名如果为对象类型，写对象对应的属性名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>likeName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span>+name+<span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    select * from stu where name like #&#123;likeName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-对象类型"><a href="#2-对象类型" class="headerlink" title="2.对象类型"></a>2.对象类型</h3><p>sql中占位符要写为传入参数所属类中的属性名。</p><p><strong>1.获取对象中属性</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where homeAddress=#&#123;homeAddress&#125; or                                 schoolAddress='$&#123;schoolAddress&#125;'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.获取级联属性</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Studnet<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from studnet where homeAddress=#&#123;address.homeAddress&#125; or                                 schoolAddress='$&#123;address.schoolAddress&#125;'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-输入参数为HashMap类型"><a href="#3-输入参数为HashMap类型" class="headerlink" title="3.输入参数为HashMap类型"></a>3.输入参数为HashMap类型</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HashMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where age=#&#123;age&#125; or name like '%$&#123;name&#125;%'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取session</span><span class="token class-name">StudentMapper</span> studentMapper<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> studentMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>studentMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>studentMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studnets<span class="token operator">=</span>studentMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>studentMap<span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-传入多个参数"><a href="#4-传入多个参数" class="headerlink" title="4.传入多个参数"></a>4.传入多个参数</h3><ol><li><p>推荐使用javaBean</p></li><li><p>接口照旧，sql语句中使用”arg0,arg1…”或”param1,param2…”形式</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">insert into 表名 values (#&#123;arg0,arg1,...&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li><p>命名参数：在接口的方法参数类型前通过@param(‘’命名”)指定</p><p>1.命名基本类型参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@param</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token keyword">int</span> no<span class="token punctuation">,</span><span class="token annotation punctuation">@param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>insert into 表名 <span class="token function">values</span><span class="token punctuation">(</span>#<span class="token punctuation">&#123;</span>no<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>#<span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.命名对象类型参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@param</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token class-name">Studnet</span> studnet<span class="token punctuation">)</span><span class="token punctuation">;</span>insert into 表名 <span class="token function">values</span><span class="token punctuation">(</span>#<span class="token punctuation">&#123;</span>stu<span class="token punctuation">.</span>no<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>#<span class="token punctuation">&#123;</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="5-输出参数resultType"><a href="#5-输出参数resultType" class="headerlink" title="5.输出参数resultType"></a>5.输出参数resultType</h2><p>1.简单类型（8个基本+String）</p><p>2.输出参数为实体对象类型</p><p>3.输出参数为实体对象类型的集合 ：虽然输出类型为集合，但是resultType依然写 集合的元素类型（resyltType=”Student”）</p><p>4.输出参数类型为HashMap</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">select 表列名 "类的属性名" ... from 表名 where 条件select id "no" name "name" from studnet id=#&#123;id&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>id为数据库中表的列名</p><p>no为别名，在使用时作为map的key,map.get(“别名”)</p><p>如果不加别名，map的key为字段名</p><p>属性为key,对象为value</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapkey</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token comment">//指定no属性作为key</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Studnet</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studnetMap<span class="token operator">=</span>studentMapper<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.resultMap</p><p>类的属性名与表的列名不一致时，可以通过此方法使其一一对应</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类的属性名<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表的主键名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类的属性名<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表的列名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类的属性名<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表的列名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用起别名方式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">as</span> <span class="token keyword">no</span><span class="token punctuation">,</span>name <span class="token keyword">as</span> na <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>resultMap建立一对一关系</p><p>一个对象的一个属性对应另一个对象</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment">&lt;!--一对一时，对象成员使用association映射--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuInfo<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StuInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立一对多关系</p><p>一个表中的一组数据对应另一个表中的多组数据</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuclass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--type主类为班级，所以先配置班级--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--属性类型用javaType,属性元素用ofType--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>鉴别器</p><p>mybatis可以使用discriminator鉴别器判断某列的值，然后根据某列的值改变封装行为</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuclass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--type主类为班级，所以先配置班级--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--属性类型用javaType,属性元素用ofType--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择的属性的类型<span class="token punctuation">"</span></span> <span class="token attr-name">clomn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>根据那一列进行选择<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>条件的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>条件符合，选择那个<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类中对应的属性是哪一个<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>条件的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>条件符合，选择那个<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类中对应的属性是哪一个<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>新增后返回自增主键</strong></p><p>在<insert>标签中添加<selectKey>标签</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javaBean中属性名<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表中列名<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select last_insert_id()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select last_insert_id()    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>    insert into user values (#&#123;no&#125;,#&#123;name&#125;,#&#123;age&#125;,#&#123;address&#125;,#&#123;sex&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-关联查询"><a href="#6-关联查询" class="headerlink" title="6.关联查询"></a>6.关联查询</h2><h3 id="1-一对一"><a href="#1-一对一" class="headerlink" title="1.一对一"></a>1.一对一</h3><p>使用resultMap建立映射关系,使用association标签</p><p>javaType:主表中对应附表的属性类</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resultMap的id名<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>查询主表对应的类<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>主表中对应附表的属性名<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>主表中对应附表的列名<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>主表中对应附表的属性类<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resultMap的id名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ano<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> acc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> aname<span class="token punctuation">;</span>    <span class="token comment">//关联表对应的类</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountUser<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acc<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select a.*,u.no,u.name,u.age from account a,user u where u.no=a.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Reader</span> reader<span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">"conf.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSessionFactory</span> sessionFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSession</span> session<span class="token operator">=</span>sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> accounts <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token operator">:</span>accounts<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-一对多"><a href="#2-一对多" class="headerlink" title="2.一对多"></a>2.一对多</h3><p>使用resultMap建立映射关系,使用collection标签</p><p>ofType:集合中数据的数据类型   </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneToMany<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>主表中集合类型数据的属性名<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--ofType,集合中元素的类型--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token comment">//关联表对应的类的集合数据类型</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> accounts<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneToMany<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ano<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ano<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acc<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aname<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneToMany<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneToMany<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user u left outer join account a on u.no = a.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-SQL标签"><a href="#7-SQL标签" class="headerlink" title="7.SQL标签"></a>7.SQL标签</h2><h3 id="1-if标签"><a href="#1-if标签" class="headerlink" title="1.if标签"></a>1.if标签</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--条件都需要有，否则如果前一个条件没有时，SQL语句会变成where and...--></span><span class="token comment">&lt;!--解决方法一：全都加上and,并在where后边加一个永远成立的条件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectBySQLTag1<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select*from stu where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name!=null and name!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and name=#&#123;name&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=null and age!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and age=#&#123;age&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--解决方法二：使用where标签 where会自动处理遇到的第一个and--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-where标签"><a href="#2-where标签" class="headerlink" title="2.where标签"></a>2.where标签</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select*from stu    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name!=null and name!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and name=#&#123;name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=null and age!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and age=#&#123;age&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-foreach标签"><a href="#3-foreach标签" class="headerlink" title="3.foreach标签"></a>3.foreach标签</h3><h4 id="1-遍历类中的集合属性"><a href="#1-遍历类中的集合属性" class="headerlink" title="1.遍历类中的集合属性"></a>1.遍历类中的集合属性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectByForeach"</span> parameterType<span class="token operator">=</span><span class="token string">"StuNo"</span> resultType<span class="token operator">=</span><span class="token string">"student"</span><span class="token operator">></span>     select<span class="token operator">*</span>from stu     <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">></span></span>         <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"集合名!=null and 集合.size>0"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"集合名"</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">"and no in("</span> close<span class="token operator">=</span><span class="token string">")"</span>                                                             item<span class="token operator">=</span><span class="token string">"stuNo"</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token operator">></span>                #<span class="token punctuation">&#123;</span>stuNo<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里遍历使用的是item中定义的名字，所以要使用item的值，并区分大小写<span class="token operator">--</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>select<span class="token operator">*</span>from stu where no <span class="token function">in</span><span class="token punctuation">(</span>stuNo1<span class="token punctuation">,</span>stuNo2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Colletion的值相当于students(对象数组名),<br>item的值相当于student(用于遍历的名字，可随意更改)<br>open的值为遍历内容前的语句<br>close的值为遍历内容后的语句<br>separator的值为分割元素的分隔符</p><h4 id="2-遍历传入参数为数组类型"><a href="#2-遍历传入参数为数组类型" class="headerlink" title="2.遍历传入参数为数组类型"></a>2.遍历传入参数为数组类型</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByArray<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int[]<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select*from stu    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--不用数组名，都是用array--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array!=null and array.length>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and no in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuNo<span class="token punctuation">"</span></span>                                                                   <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                #&#123;stuNo&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-遍历传入参数为集合类型"><a href="#3-遍历传入参数为集合类型" class="headerlink" title="3.遍历传入参数为集合类型"></a>3.遍历传入参数为集合类型</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select*from stu        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--不用集合名，包括parameterType都是用list--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list!=null and list.size>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and no in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuNo<span class="token punctuation">"</span></span>                                                                         <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    #&#123;stuNo&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-传入参数类型为对象数组"><a href="#4-传入参数类型为对象数组" class="headerlink" title="4.传入参数类型为对象数组"></a>4.传入参数类型为对象数组</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByObjectArray<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Object[]<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select*from stu    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--不用数组名，都是用array,parameterType使用Object[]--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array!=null and array.length>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and no in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span>                                                                     <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                #&#123;student.no&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-trim标签"><a href="#4-trim标签" class="headerlink" title="4.trim标签"></a>4.trim标签</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     update stu     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>前缀<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--,为分隔符--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name!=null and name!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             name=#&#123;name&#125;,         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=null and age!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             age=#&#123;age&#125;,         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address!=null and address!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             address=#&#123;address&#125;,         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>     where no=#&#123;no&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectBySQLTag<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select*from stu    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name!=null and name!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and name=#&#123;name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=null and age!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and age=#&#123;age&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-SQL片段"><a href="#5-SQL片段" class="headerlink" title="5.SQL片段"></a>5.SQL片段</h3><p>将片段提取出来，命名，在需要的地方引用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array!=null and array.length>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and no in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span>                                                                  <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                #&#123;student.no&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果不本mapper文件，refid中使用全类名加id--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>se<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select*from stu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByObjectArray<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Object[]<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>se<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-日志（Log4j）"><a href="#8-日志（Log4j）" class="headerlink" title="8.日志（Log4j）"></a>8.日志（Log4j）</h2><p><strong>1.需要的jar包：</strong>log4j.jar</p><p><strong>2.步骤</strong></p><p>1.在conf.xml文件中开启日志</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启日志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如不指定使用哪种日志，MyBatis会根据以下顺序寻找日志</p><p>SLF4J、Apache Commons Logging、Log4j 2、Log4j、JDK logging</p><p>2.配置日志输出格式文件log4j.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,stdout  #stdout控制台输出</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%5p [%t] - %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.日志级别</strong></p><p>DEBUD&lt;INFO&lt;WARN&lt;ERROR</p><p>只会显示设置级别以上的日志，开发时使用DEBUG,运行时使用INFO</p><h2 id="9-延迟加载"><a href="#9-延迟加载" class="headerlink" title="9.延迟加载"></a>9.延迟加载</h2><h3 id="1-一对一延迟加载"><a href="#1-一对一延迟加载" class="headerlink" title="1.一对一延迟加载"></a>1.一对一延迟加载</h3><p>1.首先在配置文件中开启延迟加载</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启日志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--开启延迟加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--开启按需加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在主查询中配置resultMap</p><p>resultMap中配置association标签时，将副查询的映射文件配置进来，而不是配置属性</p><p>property：主查询类中副查询对应的属性</p><p>column：两张表的外键对应的列名</p><p>javaType：结果数据类型</p><p>select：副查询映射文件坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where no=#&#123;no&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountx<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ano<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ano<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acc<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aname<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jin.dao.UserMapper.findById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询日志</p><pre class="line-numbers language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 5DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from user where no&#x3D;? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 1(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1Account(ano&#x3D;1, id&#x3D;1, acc&#x3D;123546, aname&#x3D;QQ, user&#x3D;User(no&#x3D;1, name&#x3D;张三, age&#x3D;22, address&#x3D;河南, sex&#x3D;男, accounts&#x3D;null))Account(ano&#x3D;2, id&#x3D;1, acc&#x3D;234567, aname&#x3D;wechat, user&#x3D;User(no&#x3D;1, name&#x3D;张三, age&#x3D;22, address&#x3D;河南, sex&#x3D;男, accounts&#x3D;null))DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from user where no&#x3D;? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 2(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1Account(ano&#x3D;3, id&#x3D;2, acc&#x3D;123369, aname&#x3D;wechat, user&#x3D;User(no&#x3D;2, name&#x3D;小芳, age&#x3D;23, address&#x3D;湖南, sex&#x3D;女, accounts&#x3D;null))DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from user where no&#x3D;? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1Account(ano&#x3D;4, id&#x3D;3, acc&#x3D;159753, aname&#x3D;QQ, user&#x3D;User(no&#x3D;3, name&#x3D;李四, age&#x3D;22, address&#x3D;北京, sex&#x3D;男, accounts&#x3D;null))DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from user where no&#x3D;? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 4(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1Account(ano&#x3D;5, id&#x3D;4, acc&#x3D;154789, aname&#x3D;QQ, user&#x3D;User(no&#x3D;4, name&#x3D;小华, age&#x3D;21, address&#x3D;广州, sex&#x3D;女, accounts&#x3D;null))DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@646be2c3]DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@646be2c3]DEBUG [main] - Returned connection 1684792003 to pool.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-一对多延迟加载"><a href="#2-一对多延迟加载" class="headerlink" title="2.一对多延迟加载"></a>2.一对多延迟加载</h3><p>1.首先在配置文件中开启延迟加载</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启日志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--开启延迟加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--开启按需加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在主查询中配置resultMap</p><p>resultMap中配置collection标签时，将副查询的映射文件配置进来，而不是配置属性</p><p>property：主查询类中副查询对应的属性</p><p>column：两张表的外键对应的列名</p><p>ofType：副查询结果数据类型</p><p>select：副查询映射文件坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--*********************一对多延迟加载*************************--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneToMany2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jin.dao.UserMapper.findAccount<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAccount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from account where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneToMany2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询日志</p><pre class="line-numbers language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from user DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 10DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 1(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 2User(no&#x3D;1, name&#x3D;张三, age&#x3D;22, address&#x3D;河南, sex&#x3D;男, accounts&#x3D;[Account(ano&#x3D;1, id&#x3D;1, acc&#x3D;123546, aname&#x3D;QQ, user&#x3D;null), Account(ano&#x3D;2, id&#x3D;1, acc&#x3D;234567, aname&#x3D;wechat, user&#x3D;null)])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 2(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1User(no&#x3D;2, name&#x3D;小芳, age&#x3D;23, address&#x3D;湖南, sex&#x3D;女, accounts&#x3D;[Account(ano&#x3D;3, id&#x3D;2, acc&#x3D;123369, aname&#x3D;wechat, user&#x3D;null)])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1User(no&#x3D;3, name&#x3D;李四, age&#x3D;22, address&#x3D;北京, sex&#x3D;男, accounts&#x3D;[Account(ano&#x3D;4, id&#x3D;3, acc&#x3D;159753, aname&#x3D;QQ, user&#x3D;null)])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 4(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1User(no&#x3D;4, name&#x3D;小华, age&#x3D;21, address&#x3D;广州, sex&#x3D;女, accounts&#x3D;[Account(ano&#x3D;5, id&#x3D;4, acc&#x3D;154789, aname&#x3D;QQ, user&#x3D;null)])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 9(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 0User(no&#x3D;9, name&#x3D;小故, age&#x3D;21, address&#x3D;广州, sex&#x3D;女, accounts&#x3D;[])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 10(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 0User(no&#x3D;10, name&#x3D;小红, age&#x3D;22, address&#x3D;上海, sex&#x3D;女, accounts&#x3D;[])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 16(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 0User(no&#x3D;16, name&#x3D;小灵, age&#x3D;22, address&#x3D;广西, sex&#x3D;女, accounts&#x3D;[])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 17(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 0User(no&#x3D;17, name&#x3D;小北, age&#x3D;21, address&#x3D;广州, sex&#x3D;男, accounts&#x3D;[])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 18(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 0User(no&#x3D;18, name&#x3D;小智, age&#x3D;22, address&#x3D;江苏, sex&#x3D;男, accounts&#x3D;[])DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from account where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 19(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 0User(no&#x3D;19, name&#x3D;小智, age&#x3D;22, address&#x3D;江苏, sex&#x3D;男, accounts&#x3D;[])DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@646be2c3]DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@646be2c3]DEBUG [main] - Returned connection 1684792003 to pool.Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-缓存"><a href="#10-缓存" class="headerlink" title="10.缓存"></a>10.缓存</h2><p>只有查询有缓存，增删改没有</p><h3 id="1-一级缓存"><a href="#1-一级缓存" class="headerlink" title="1.一级缓存"></a>1.一级缓存</h3><p>同一个SqlSession对象<br>MyBatis默认开启一级缓存，如果用同样的SqlSession对象查询相同的数据，则只会在第一次 查询时向数据库发送SQL语句，并将查询的结果 放入到sqlsession中（作为缓存在）；<br>后续再次查询该同样的对象时，则直接从缓存中查询该对象即可（即省略了数据库的访问）</p><p>调用commit()方法和close方法时会清除缓存。    </p><p><strong>测试</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oneEache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token operator">==</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p>可以发现两次查询只执行了一次sql语句，且两次获取的对象相同</p><pre class="line-numbers language-none"><code class="language-none">DEBUG [main] - Created connection 1663619914.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6328d34a]DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select * from user where no&#x3D;1 DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1User(no&#x3D;1, name&#x3D;张三, age&#x3D;22, address&#x3D;河南, sex&#x3D;男, accounts&#x3D;null)trueDEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6328d34a]DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@6328d34a]DEBUG [main] - Returned connection 1663619914 to pool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除缓存</p><p>SqlSession对象调用clearCache()方法</p><h3 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2.二级缓存"></a>2.二级缓存</h3><p>MyBatis默认情况没有开启二级缓存，需要手工打开。</p><p>1.在conf.xml文件中开启二级缓存</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.在mapper.xml文件中声明</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.见准备缓存的对象实现序列化接口 implements Serializable</p><p>范围：同一个namespace生成的mapper对象</p><p>禁用二级缓存：在sql中添加useCache=”false”</p><p>触发：当SqlSession对象使用.close()方法时，会写入缓存</p><p>清理：SqlSession对象使用.commit()方法时，会清理缓存（只适用于一级缓存）</p><p>​            二级缓存需要其他SqlSession对象使用.commit()方法时才清理,或在sql块中添加falseCache=”true”</p><h3 id="3-ehcache二级缓存"><a href="#3-ehcache二级缓存" class="headerlink" title="3.ehcache二级缓存"></a>3.ehcache二级缓存</h3><p>1.jar包：ehcache-core.jar、MyBatis-ehcache.jar、slf4j-api.jar</p><p>2.使用</p><ol><li><p>编写ehcache配置文件Ehcache.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../config/ehcache.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>F:\IDEA\cache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--maxElementsInMemory:设置在内存中缓存对象的个数maxElementsOnDisk：设置在硬盘中缓存对象的个数eternal           ：设置缓存是否永远不过期overflowToDisk     ：在内存中缓存的对象个数超过maxElementsInMemory值时，是否转移到硬盘timeToIdleSeconds   ：当两次访问过该值（时间）时，缓存对象失效timeToLiveSeconds    ：一个缓存对象最多存放多长时间diskExpiryThreadIntervalSeconds：没隔多久通过一个线程清理内存中的线程memoryStoreEvictionPolicy   ：当超过缓存对象的最大值是，处理策略LRU:最近最少使用                              FIFO：先进先出    LFU：最不常使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span><span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token attr-name">maxElementsOnDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000000<span class="token punctuation">"</span></span><span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token attr-name">diskExpiryThreadIntervalSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultCache</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>在mapper.xml文件中开启</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="11-逆向工程"><a href="#11-逆向工程" class="headerlink" title="11.逆向工程"></a>11.逆向工程</h2><p>1.jar包：mybatis-generator-core.jar、mybatis.jar、数据库.jar</p><p>2.步骤</p><ol><li><p>编写逆向工程配置文件generator.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--                         suppressAllComments属性值：                             true:自动生成实体类、SQL映射文件时没有注释                             true:自动生成实体类、SQL映射文件，并附有注释                       --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 数据库连接信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf-8<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>  <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0829<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--                  forceBigDecimals属性值：                      true:把数据表中的DECIMAL和NUMERIC类型，      解析为JAVA代码中的java.math.BigDecimal类型                      false(默认):把数据表中的DECIMAL和NUMERIC类型，      解析为解析为JAVA代码中的Integer类型              --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--                  targetProject属性值:实体类的生成位置                  targetPackage属性值：实体类所在包的路径              --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jxy.entity<span class="token punctuation">"</span></span>                            <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- trimStrings属性值：                         true：对数据库的查询结果进行trim操作                         false(默认)：不进行trim操作                       --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--                  targetProject属性值:SQL映射文件的生成位置                  targetPackage属性值：SQL映射文件所在包的路径              --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jxy.mapper<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 生成动态代理的接口  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jxy.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 指定数据库表  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuclass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuinfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>编写执行程序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">XMLParserException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/generator.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> warnings<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConfigurationParser</span> cp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Configuration</span> config<span class="token operator">=</span>cp<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultShellCallback</span> callback<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//核心方法</span>        <span class="token class-name">MyBatisGenerator</span> generator<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>callback<span class="token punctuation">,</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        generator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="12-数据库环境切换"><a href="#12-数据库环境切换" class="headerlink" title="12.数据库环境切换"></a>12.数据库环境切换</h2><p><strong>步骤</strong></p><p>1.切换 environment （指定实际使用的数据库）</p><p>2.配置 Provider别名</p><p>3.写不同数据库的SQL语句</p><p>4.在mappe.xml中配置databaseId=”Provider别名”</p><p>如果mapper.xml的 sql标签 仅有 一个 不带databaseId的标签，则改标签 会自动适应当前数据库。<br>如果 既有不带databaseId的标签，又有带databaseId的标签,则程序会优先使用带databaseId的标签</p><p>conf.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--选择环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>devMySql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--配置环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>devMySql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--配置数据库连接池配置，可将配置写在properties文件中，使用$&#123;&#125;引用--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>devOracle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;oracle.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置环境别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--name为元数据，大小写固定，value为别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MYSQL<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Oracle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="13-注解方式"><a href="#13-注解方式" class="headerlink" title="13.注解方式"></a>13.注解方式</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><p>1.直接在mapper接口的方法上方添加注解，在注解中添加sql语句，不需要写SQL映射配置文件</p><p>2.将接口在主配置文件中配置注解形式或直接使用包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加载注解形式dao接口--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增删改查对应的注解分别是@insert/@delete/@update/@select</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@select</span><span class="token punctuation">(</span><span class="token string">"select*from student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@insert</span><span class="token punctuation">(</span><span class="token string">"insert into student values(#&#123;no&#125;,#&#123;name&#125;,#&#123;age&#125;,#&#123;address&#125;)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@delete</span><span class="token punctuation">(</span><span class="token string">"delete from student where ..."</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@update</span><span class="token punctuation">(</span><span class="token string">"update student set no=#&#123;no&#125;,name=#&#123;name&#125;... where ..."</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-一一映射"><a href="#2-一一映射" class="headerlink" title="2.一一映射"></a>2.一一映射</h3><p>@results注解相当于xml映射文件中的resultMap标签</p><p>必须添加在某个注解方法中，否则无法引用，即使使用@ResultMap注解也无法引用。</p><p>id：唯一标识符，相当于resultMap中的id，在需要的方法前添加@ResultMap注解引用</p><p>value：数组类型，在其中建立一一映射关系</p><p>​        @Result：一一映射，相当于result标签，注解中没有id标签，只需在主键对应的Result中添加属性id=true(默认为false)</p><p>​                column：表中对应的列名</p><p>​                property：类中对应的属性名</p><p>@ResultMap：引用一一映射关系，数组类类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-一对一关联查询"><a href="#3-一对一关联查询" class="headerlink" title="3.一对一关联查询"></a>3.一对一关联查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"accountMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"属性名"</span> <span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"外键对应的列名"</span> <span class="token punctuation">,</span>one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"对应方法全名"</span><span class="token punctuation">,</span>fetchType <span class="token operator">=</span>设置加载方式<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在设置关联查询的@Result注解中</p><p>column：外键对应的列名</p><p>one=@one：表示一对一关系，相当于association标签</p><p>​    select：关联查询的方法的全名</p><p>​    fetchType：设置加载模式</p><p>​        fetchType=FetchType.EAGER：设置立即加载</p><p>​        fetchType=FetchType.LAZY为懒加载</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"accountMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"ano"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"ano"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"acc"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"acc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"aname"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"aname"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"user"</span> <span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span> <span class="token punctuation">,</span>one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.jxy.dao.UserDao.queryById"</span><span class="token punctuation">,</span>fetchType <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-一对多关联"><a href="#4-一对多关联" class="headerlink" title="4.一对多关联"></a>4.一对多关联</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"accountMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"属性名"</span> <span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"外键对应的列名"</span> <span class="token punctuation">,</span>many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"对应方法全名"</span><span class="token punctuation">,</span>fetchType <span class="token operator">=</span>设置加载方式<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在设置关联查询的@Result注解中</p><p>column：外键对应的列名</p><p>many = @Many：表示一对多关系，相当于association标签</p><p>​    select：关联查询的方法的全名</p><p>​    fetchType：设置加载模式</p><p>​        fetchType=FetchType.EAGER：设置立即加载</p><p>​        fetchType=FetchType.LAZY为懒加载</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"userMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">,</span>            many<span class="token operator">=</span><span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.jxy.dao.AccountDao.queryById"</span><span class="token punctuation">,</span>fetchType <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-二级缓存"><a href="#5-二级缓存" class="headerlink" title="5.二级缓存"></a>5.二级缓存</h3><p>只需在dao层接口上添加注解@CacheNamespace，并设置属性blocking为true</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>blocking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="14-事务自动提交"><a href="#14-事务自动提交" class="headerlink" title="14.事务自动提交"></a>14.事务自动提交</h2><p>手动提交：出现commit()才会一次性提交所有操作<br>sessionFactory.openSession();<br>session.commit();<br>自动提交：每个操作执行后自动提交<br>sessionFactory.openSession(true);</p><h2 id="15-自定义插件"><a href="#15-自定义插件" class="headerlink" title="15.自定义插件"></a>15.自定义插件</h2><p>​    四个处理：StatementHandler  ParameterHandler   ResultSetHandler   TypeHandler<br>​    四大核心对象：StatementHandler  ParameterHandler   ResultSetHandler    Executor</p><p>四大核心对象： 1.都涉及到了 拦截器 用于增强     2.四大核心对象都包含了 该增强操作<br>    自定义插件的编写逻辑： 根据MyBatis规则 编写一个  拦截器 ，在拦截器内部加入 自定义增强功能<br>步骤：<br>    a.编写拦截器<br>    b.编写签名注解<br>    @Intercepts({<br>        @Signature(type = StatementHandler.class , method =”query”,args = {Statement.class, ResultHandler.class})<br>})<br>    c.配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yanqun.my.interceptors.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写多个拦截器时，执行顺序和<plugins>配置顺序一致</p><h2 id="16-批量操作DML"><a href="#16-批量操作DML" class="headerlink" title="16.批量操作DML"></a>16.批量操作DML</h2><p>1.MyBatis提供的方法：</p><p>在产生SqlSessionFactory对象时，添加参数ExecutorType.BATCH</p><p>在执行SQL时，只会进行一次编译，其余的DML只需设置参数，调用相应的方法即可</p><p>2.通过拼接sql，不推荐</p><h2 id="17-分页插件"><a href="#17-分页插件" class="headerlink" title="17.分页插件"></a>17.分页插件</h2><p><strong>1.jar包：</strong>pagehelper.jar、jsqlparser.jar<br>2.步骤</p><ol><li><p>在conf.xml中配置拦截器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xom.github.pagehelper.pageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--如有需要，在此配置参数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>配置分页信息</p><p>sql语句执行之前添加分页信息</p><p>Page对象用来查询各种分页信息，还可以使用PageInfo，功能更强大</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">"conf.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">SqlSessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span>                                    <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">StudentMapper</span> studentMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//配置分页信息</span>       <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token operator">=</span>studentMapper<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//PageInfo</span>       <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> pageInfo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token operator">:</span>students<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前页："</span><span class="token operator">+</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a>MyBatis Plus</h1><h2 id="1-MyBatisPLus入门"><a href="#1-MyBatisPLus入门" class="headerlink" title="1.MyBatisPLus入门"></a>1.MyBatisPLus入门</h2><p><strong>只做增强，不做改变</strong></p><h3 id="1-网址"><a href="#1-网址" class="headerlink" title="1.网址"></a>1.网址</h3><p><a href="https://mp.baomidou.com/">MyBatis Plus官网</a>、<a href="https://github.com/baomidou/mybatis-plus">Github地址</a>、<a href="https://gitee.com/baomidou/mybatis-plus?_from=gitee_search">码云地址</a></p><h3 id="2-导入"><a href="#2-导入" class="headerlink" title="2.导入"></a>2.导入</h3><p>mybatis-plus.jar（可以省略mabatis.jar与mybatis-spring.jar）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--maven依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--springboot启动器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引入 <code>MyBatis-Plus</code> 之后请不要再次引入 <code>MyBatis</code> 以及 <code>MyBatis-Spring</code>，以避免因版本差异导致的问题。</strong></p><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><h4 id="1-spring配置文件"><a href="#1-spring配置文件" class="headerlink" title="1.spring配置文件"></a>1.spring配置文件</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入数据库配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--配置数据库相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;mysql.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--在SpringIOC容器中创建MyBatis的核心类SqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span>           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--将mapper.xml文件配置进来--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mappers/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--导入全局配置策略--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>globalConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>globalConfig<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--插件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.                                      plugins.PaginationInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置全局策略配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>globalConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.core.config.GlobalConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbConfig<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbConfig<span class="token punctuation">"</span></span>           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyGenerator<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyGenerator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyGenerator<span class="token punctuation">"</span></span>           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.incrementer.H2KeyGenerator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- MyBatis Mapper Scan Config  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span>                   <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.samples.quickstart.springmvc.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-springboot配置文件"><a href="#2-springboot配置文件" class="headerlink" title="2.springboot配置文件"></a>2.springboot配置文件</h4><p>springboot中会自动配置，执行配置一些简单内容即可</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#配置别名mybatis-plus:  type-aliases-package: com.jxy.pojo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在启动类中添加@MapperScan()注解，扫描mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.jxy.mapper"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-相对于MyBatis的改变"><a href="#2-相对于MyBatis的改变" class="headerlink" title="2.相对于MyBatis的改变"></a>2.相对于MyBatis的改变</h2><h3 id="1-创建核心类"><a href="#1-创建核心类" class="headerlink" title="1.创建核心类"></a>1.创建核心类</h3><p>由sqlSessionFactory变为MybatisSqlSessionFactoryBean</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在SpringIOC容器中创建MyBatis的核心类SqlSessionFactory--></span><span class="token comment">&lt;!--&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span>       <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:conf.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jxy.entity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-MyBatis-plus的结构改变"><a href="#2-MyBatis-plus的结构改变" class="headerlink" title="2.MyBatis plus的结构改变"></a>2.MyBatis plus的结构改变</h3><p>1.MyBatis Plus不需要写mapper.xml文件，mapper接口也不再写方法，只需要继承一个类BaseMapper<T>,泛型为操作的表对应的实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token keyword">extends</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-实体类中的注解"><a href="#3-实体类中的注解" class="headerlink" title="3.实体类中的注解"></a>3.实体类中的注解</h3><p>通过注解将实体类与数据库中表形成一一对用关系</p><h4 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h4><p>将实体类与数据库中表对应起来，如果实体类名与表名一致，可省略</p><p>@TableName(“表名”)</p><h4 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h4><p>给表中主键对应的属性添加的注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/***value:主键名，如主键名与属性名一直，可省略*IdType.AU：主键自增*/</span><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"主键名"</span>，type<span class="token operator">=</span><span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以配置全局主键策略</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbConfig<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AUTO<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center">数据库ID自增</td></tr><tr><td align="center">NONE</td><td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr><tr><td align="center">ID_WORKER</td><td align="center">分布式全局唯一ID 长整型类型(please use <code>ASSIGN_ID</code>)</td></tr><tr><td align="center">UUID</td><td align="center">32位UUID字符串(please use <code>ASSIGN_UUID</code>)</td></tr><tr><td align="center">ID_WORKER_STR</td><td align="center">分布式全局唯一ID 字符串类型(please use <code>ASSIGN_ID</code>)</td></tr></tbody></table><h4 id="3-TableField"><a href="#3-TableField" class="headerlink" title="3.@TableField"></a>3.@TableField</h4><p>是实体类属性与数据库中表的列一一对应</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如属性名与列名一直可省略</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"列名"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>@TableField中的属性</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">数据库字段名</td></tr><tr><td align="center">el</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">映射为原生 <code>#&#123; ... &#125;</code> 逻辑,相当于写在 xml 里的 <code>#&#123; ... &#125;</code> 部分</td></tr><tr><td align="center">exist</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否为数据库表字段，如果不是表中字段，可设置为false</td></tr><tr><td align="center">condition</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#&#123;%s&#125;</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考</a></td></tr><tr><td align="center">update</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td></tr><tr><td align="center">insertStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_NULL: <code>insert into table_a(&lt;if test=&quot;columnProperty != null&quot;&gt;column&lt;/if&gt;) values (&lt;if test=&quot;columnProperty != null&quot;&gt;#&#123;columnProperty&#125;&lt;/if&gt;)</code></td></tr><tr><td align="center">updateStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：IGNORED: <code>update table_a set column=#&#123;columnProperty&#125;</code></td></tr><tr><td align="center">whereStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_EMPTY: <code>where &lt;if test=&quot;columnProperty != null and columnProperty!=&#39;&#39;&quot;&gt;column=#&#123;columnProperty&#125;&lt;/if&gt;</code></td></tr><tr><td align="center">fill</td><td align="center">Enum</td><td align="center">否</td><td align="center">FieldFill.DEFAULT</td><td align="center">字段自动填充策略</td></tr><tr><td align="center">select</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否进行 select 查询</td></tr><tr><td align="center">keepGlobalFormat</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td align="center">是否保持使用全局的 format 进行处理</td></tr><tr><td align="center">jdbcType</td><td align="center">JdbcType</td><td align="center">否</td><td align="center">JdbcType.UNDEFINED</td><td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">typeHandler</td><td align="center">Class&lt;? extends TypeHandler&gt;</td><td align="center">否</td><td align="center">UnknownTypeHandler.class</td><td align="center">类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">numericScale</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">指定小数点后保留的位数</td></tr></tbody></table><h4 id="FieldStrategy"><a href="#FieldStrategy" class="headerlink" title="FieldStrategy"></a>FieldStrategy</h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IGNORED</td><td align="center">忽略判断</td></tr><tr><td align="center">NOT_NULL</td><td align="center">非NULL判断</td></tr><tr><td align="center">NOT_EMPTY</td><td align="center">非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断)</td></tr><tr><td align="center">DEFAULT</td><td align="center">追随全局配置</td></tr></tbody></table><h4 id="FieldFill"><a href="#FieldFill" class="headerlink" title="FieldFill"></a>FieldFill</h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DEFAULT</td><td align="center">默认不处理</td></tr><tr><td align="center">INSERT</td><td align="center">插入时填充字段</td></tr><tr><td align="center">UPDATE</td><td align="center">更新时填充字段</td></tr><tr><td align="center">INSERT_UPDATE</td><td align="center">插入和更新时填充字段</td></tr></tbody></table><p><strong>MyBatis-Plus命名方式转换</strong></p><p>2.3版本以后默认开启驼峰命名与下划线命名之间的转换，可在mybatis配置文件或Spring配置文件中选择开启或关闭</p><p>conf.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--关闭驼峰命名自动转换为下划线命名--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h2><h3 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h3><p> selectById()  :       根据主键查找，id代表主键<br> selectBatchIds()  :   传入主键类型集合，查找集合中对应的对象<br> selectByMap（）    ：  将条件放入map集合中，条件之间的关系为and</p><h3 id="2-增加"><a href="#2-增加" class="headerlink" title="2.增加"></a>2.增加</h3><p> insert();   参数为对象类型，增加数据后可将数据库中自增的主键回写</p><h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h3><p> deleteById()<br> deleteByList()<br> deletetByMap()</p><h3 id="4-修改"><a href="#4-修改" class="headerlink" title="4.修改"></a>4.修改</h3><p> updateById()</p><h2 id="4-条件构造器"><a href="#4-条件构造器" class="headerlink" title="4.条件构造器"></a>4.条件构造器</h2><p>条件作用相当于SQL中的where<br>使用步骤<br>​     1.获得wrapper对象，查询使用QueryWrapper增删改使用UpdateWrapper</p><p>​     2.通过wrapper对象添加条件</p><p>​    通过“.”一直调用方法增加条件，条件关系为and</p><p>​     wrapper.between(…).ge(…);</p><p>​     使用or()方法代表or关系</p><p>​     wrapper.between(…).or().ge(…);</p><p>​     如果or()后边有多个条件且关系为and，为防止关系混乱,可使用Lambdas方式（JDK1.8新特性）</p><p>​     wrapper.条件一.or(i-&gt;i.条件二.条件三);</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">查询<span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>增删改 <span class="token class-name">Student</span> student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">UpdateWrapper</span> wrapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> wrapper<span class="token punctuation">.</span>条件<span class="token punctuation">;</span> studentMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectByWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>i<span class="token operator">-></span>i<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong>  </p><table><thead><tr><th>表达式</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>eq</td><td>等于 =</td><td>eq(“name”, “老王”)<code>---&gt;</code>name = ‘老王’</td></tr><tr><td>allEq</td><td>全部<a href="https://mp.baomidou.com/guide/wrapper.html#eq">eq</a>(或个别<a href="https://mp.baomidou.com/guide/wrapper.html#isnull">isNull</a>)</td><td>allEq( { id:1,name:”老王”,age:null } )<code>---&gt;</code>id = 1 and name = ‘老王’ and age is null</td></tr><tr><td>ne</td><td>不等于 &lt;&gt;</td><td>ne(“name”, “老王”)<code>---&gt;</code>name &lt;&gt; ‘老王’</td></tr><tr><td>gt</td><td>大于 &gt;</td><td>gt(“age”, 18)<code>---&gt;</code>age &gt; 18</td></tr><tr><td>ge</td><td>大于等于 &gt;=</td><td>ge(“age”, 18)<code>---&gt;</code>age &gt;= 18</td></tr><tr><td>lt</td><td>小于 &lt;</td><td>lt(“age”, 18)<code>---&gt;</code>age &lt; 18</td></tr><tr><td>le</td><td>小于等于 &lt;=</td><td>le(“age”, 18)<code>---&gt;</code>age &lt;= 18</td></tr><tr><td>between</td><td>BETWEEN 值1 AND 值2</td><td>between(“age”, 18, 30)<code>---&gt;</code>age between 18 and 30</td></tr><tr><td>notBetween</td><td>NOT BETWEEN 值1 AND 值2</td><td>notBetween(“age”, 18, 30)<code>---&gt;</code>age not between 18 and 30</td></tr><tr><td>like</td><td>LIKE ‘%值%’</td><td>like(“name”, “王”)<code>---&gt;</code>name like ‘%王%’</td></tr><tr><td>notLike</td><td>NOT LIKE ‘%值%’</td><td>notLike(“name”, “王”)<code>---&gt;</code>name not like ‘%王%’</td></tr><tr><td>likeLeft</td><td>LIKE ‘%值’</td><td>likeLeft(“name”, “王”)<code>---&gt;</code>name like ‘%王’</td></tr><tr><td>likeRight</td><td>LIKE ‘值%’</td><td>likeRight(“name”, “王”)<code>---&gt;</code>name like ‘王%’</td></tr><tr><td>isNull</td><td>字段 IS NULL</td><td>isNull(“name”)<code>---&gt;</code>name is null</td></tr><tr><td>isNotNull</td><td>字段 IS NOT NULL</td><td>isNotNull(“name”)<code>---&gt;</code>name is not null</td></tr><tr><td>in</td><td>字段 IN (value.get(0), value.get(1), …)</td><td>in(“age”,{1,2,3})<code>---&gt;</code>age in (1,2,3)</td></tr><tr><td></td><td>字段 IN (v0, v1, …)</td><td>in(“age”, 1, 2, 3)<code>---&gt;</code>age in (1,2,3)</td></tr><tr><td>notIn</td><td>字段 NOT IN (value.get(0), value.get(1), …)</td><td>notIn(“age”,{1,2,3})<code>---&gt;</code>age not in (1,2,3)</td></tr><tr><td></td><td>字段 NOT IN (v0, v1, …)</td><td>notIn(“age”, 1, 2, 3)<code>---&gt;</code>age not in (1,2,3)</td></tr><tr><td>inSql</td><td>字段 IN ( sql语句 )</td><td>inSql(“age”, “1,2,3,4,5,6”)<code>---&gt;</code>age in (1,2,3,4,5,6)<br>inSql(“id”, “select id from table where id &lt; 3”)<code>---&gt;</code>id in (select id from table where id &lt; 3)</td></tr><tr><td>notInSql</td><td>字段 NOT IN ( sql语句 )</td><td>notInSql(“age”, “1,2,3,4,5,6”)<code>---&gt;</code>age not in (1,2,3,4,5,6)<br/>notInSql(“id”, “select id from table where id &lt; 3”)<code>---&gt;</code>id not in (select id from table where id &lt; 3)</td></tr><tr><td>groupBy</td><td>分组：GROUP BY 字段, …</td><td>groupBy(“id”, “name”)<code>---&gt;</code>group by id,name</td></tr><tr><td>orderByAsc</td><td>排序：ORDER BY 字段, … ASC</td><td>orderByAsc(“id”, “name”)<code>---&gt;</code>order by id ASC,name ASC</td></tr><tr><td>orderByDesc</td><td>排序：ORDER BY 字段, … DESC</td><td>orderByDesc(“id”, “name”)<code>---&gt;</code>order by id DESC,name DESC</td></tr><tr><td>orderBy</td><td>排序：ORDER BY 字段, …</td><td>orderBy(true[condition], true[isAsc], “id”, “name”)<code>---&gt;</code>order by id ASC,name ASC</td></tr><tr><td>having</td><td>HAVING ( sql语句 )</td><td>having(“sum(age) &gt; 10”)<code>---&gt;</code>having sum(age) &gt; 10<br/>having(“sum(age) &gt; {0}”, 11)<code>---&gt;</code>having sum(age) &gt; 11</td></tr><tr><td>func</td><td>func 方法(主要方便在出现if…else下调用不同方法能不断链)</td><td>func(i -&gt; if(true) {i.eq(“id”, 1)} else {i.ne(“id”, 1)})</td></tr><tr><td>or</td><td>拼接 OR</td><td>eq(“id”,1).or().eq(“name”,”老王”)<code>---&gt;</code>id = 1 or name = ‘老王’</td></tr><tr><td></td><td>OR 嵌套</td><td>or(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))<code>---&gt;</code>or (name = ‘李白’ and status &lt;&gt; ‘活着’)</td></tr><tr><td>and</td><td>AND 嵌套</td><td>and(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))<code>---&gt;</code>and (name = ‘李白’ and status &lt;&gt; ‘活着’)</td></tr><tr><td>nested</td><td>正常嵌套 不带 AND 或者 OR</td><td>nested(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))<code>---&gt;</code>(name = ‘李白’ and status &lt;&gt; ‘活着’)</td></tr><tr><td>apply</td><td>拼接 sql</td><td>apply(“id = 1”)<code>---&gt;</code>id = 1<br>apply(“date_format(dateColumn,’%Y-%m-%d’) = ‘2008-08-08’”)<code>---&gt;</code>date_format(dateColumn,’%Y-%m-%d’) = ‘2008-08-08’”)</td></tr><tr><td>last</td><td>无视优化规则直接拼接到 sql 的最后</td><td>last(“limit 1”)</td></tr><tr><td>exists</td><td>拼接 EXISTS ( sql语句 )</td><td>exists(“select id from table where age = 1”)<code>---&gt;</code>exists (select id from table where age = 1)</td></tr><tr><td>notExists</td><td>拼接 NOT EXISTS ( sql语句 )</td><td>notExists(“select id from table where age = 1”)<code>---&gt;</code>not exists (select id from table where age = 1)</td></tr></tbody></table><p>   <a href="https://mp.baomidou.com/guide/wrapper.html#abstractwrapper">详细内容见官网</a></p><p>​    </p><h2 id="5-AR"><a href="#5-AR" class="headerlink" title="5.AR"></a>5.AR</h2><p> activeRecoder ,形式 ：通过实体类直接进行增删改查操作（不需要借助于Mapper对象）</p><p>实体类继承Model类即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span>  <span class="token class-name">Model</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：使用时必须先加载IOC容器，目的 是为了让AR知道 要操作的是数据库在哪里</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<br>创建对象，用对象直接调用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addByAR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"不常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MP将主键设置为了Serializable类型。<br>Serializable可以接收所有常见的类型：8个基本类型+String</p><p>面向对象查询方式：<br>查询的对象是“类的 属性”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">wrapper<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getStuName</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//like stu_name like '%a%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>面向SQL查询方式：<br>查询的对象是“表的 字段”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span> <span class="token string">"stu_name"</span> <span class="token punctuation">,</span><span class="token string">"a"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//like '%a%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-MyBatis-Plus-分页"><a href="#6-MyBatis-Plus-分页" class="headerlink" title="6.MyBatis Plus 分页"></a>6.MyBatis Plus 分页</h2><p>1.添加拦截器（在创建slSessionFactory的bean处添加）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- spring xml 方式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlParser<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>自定义解析类、可以没有<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialectClazz<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>自定义方言类、可以没有<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!-- COUNT SQL 解析.可以没有 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countSqlParser<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countSqlParser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countSqlParser<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 设置为 true 可以优化部分 left join 的sql --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optimizeJoin<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Spring boot方式</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.baomidou.cloud.service.*.mapper*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PaginationInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PaginationInterceptor</span> paginationInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span>        <span class="token comment">// paginationInterceptor.setOverflow(false);</span>        <span class="token comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span>        <span class="token comment">// paginationInterceptor.setLimit(500);</span>        <span class="token comment">// 开启 count 的 join 优化,只针对部分 left join</span>        paginationInterceptor<span class="token punctuation">.</span><span class="token function">setCountSqlParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsqlParserCountOptimize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paginationInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">slectPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//第二个参数为queryWrapper对象，查询雕件</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userPage <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当前页码</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//排序字段</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//每页有多少条信息</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//总页数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//总页数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//是否有下一页</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//是否有上一页</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="2020/09/18/Linux/"/>
      <url>2020/09/18/Linux/</url>
      
        <content type="html"><![CDATA[<p>​        Linux，全称GNU/Linux，是一套免费使用和自由传播的类UNIX操作系统，其内核由林纳斯·本纳第克特·托瓦兹林纳斯·本纳第克特·托瓦兹/1034429)于1991年第一次释出，它主要受到Minix和Unix思想的启发，是一个基于POSIX和Unix的多用户、多任务多任务/1011764)、支持多线程多线程/1190404)和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><a id="more"></a><h1 id="1-Linux目录结构"><a href="#1-Linux目录结构" class="headerlink" title="1.Linux目录结构"></a>1.Linux目录结构</h1><p>linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此 目录下再创建其他的目录。</p><p><strong>在Linux世界里，一切皆文件。</strong></p><p><strong>各个目录功能</strong></p><table><thead><tr><th>目录</th><th>作用</th></tr></thead><tbody><tr><td>/bin (/usr/bin 、/usr/local/bin)[重点]</td><td>是Binary的缩写, 这个目录存放着最经常使用的命令</td></tr><tr><td>/sbin (/usr/sbin 、 /usr/local/sbin)</td><td>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</td></tr><tr><td>/home [重点]</td><td>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般 该目录名是以用户的账号命名的。</td></tr><tr><td>/root [重点]</td><td>该目录为系统管理员，也称作超级权限者的用户主目录。</td></tr><tr><td>/lib</td><td>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几 乎所有的应用程序都需要用到这些共享库。</td></tr><tr><td>/lost+found</td><td>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</td></tr><tr><td>/etc [重点]</td><td>所有的系统管理所需要的配置文件和子目录 my.conf</td></tr><tr><td>/usr [重点]</td><td>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows下的program files目录。</td></tr><tr><td>/boot [重点]</td><td>存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</td></tr><tr><td>/proc</td><td>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</td></tr><tr><td>/srv</td><td>service缩写，该目录存放一些服务启动之后需要提取的数据。</td></tr><tr><td>/sys</td><td>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统</td></tr><tr><td>/tmp</td><td>这个目录是用来存放一些临时文件的。</td></tr><tr><td>/dev</td><td>类似于windows的设备管理器，把所有的硬件用文件的形式存储</td></tr><tr><td>/media [重点]</td><td>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</td></tr><tr><td>/mnt [重点]</td><td>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂 载在/mnt/上，然后进入该目录就可以查看里的内容了。</td></tr><tr><td>/opt</td><td>这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可放到该目录下。 默认为空。</td></tr><tr><td>/usr/local [重点]</td><td>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。</td></tr><tr><td>/var [重点]</td><td>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。 包括各种日志文件。</td></tr><tr><td>/selinux [security-enhanced linux] 360</td><td>SELinux是一种安全子系统,它能控制程序只能访问特定文件。2</td></tr></tbody></table><h1 id="2-Linux指令"><a href="#2-Linux指令" class="headerlink" title="2.Linux指令"></a>2.Linux指令</h1><h2 id="1-帮助指令"><a href="#1-帮助指令" class="headerlink" title="1.帮助指令"></a>1.帮助指令</h2><p>1.man 获得帮助信息 </p><p>• 基本语法 man [命令或配置文件]</p><p>示例：man ls</p><p>使用q退出</p><p>2.help指令 </p><p>• 基本语法 help 命令 </p><p>help ls</p><h2 id="2-文件目录类"><a href="#2-文件目录类" class="headerlink" title="2.文件目录类"></a>2.文件目录类</h2><h3 id="2-cd-指令"><a href="#2-cd-指令" class="headerlink" title="2.cd 指令"></a>2.cd 指令</h3><p>• 基本语法 cd [参数] (功能描述：切换到指定目录) </p><p>• 常用参数 绝对路径和相对路径 </p><p>cd ~ 或者cd ：回到自己的家目录 </p><p>cd .. 回到当前目录的上一级目录</p><h3 id="3-pwd-指令"><a href="#3-pwd-指令" class="headerlink" title="3.pwd 指令"></a>3.pwd 指令</h3><p>• 基本语法 pwd (功能描述：显示当前工作目录的绝对路径) </p><p>• 应用实例 案例：显示当前工作目录的绝对路径 </p><p>示例:pwd</p><h3 id="4-ls指令"><a href="#4-ls指令" class="headerlink" title="4.ls指令"></a>4.ls指令</h3><p>• 基本语法 ls [选项] [目录或是文件] </p><p>• 常用选项</p><p> -a ：显示当前目录所有的文件和目录，包括隐藏的。 </p><p>示例：ls -a</p><p>-l ：以列表的方式显示信息</p><p>示例：ls -l 可简写为ll</p><h3 id="5-mkdir指令"><a href="#5-mkdir指令" class="headerlink" title="5.mkdir指令"></a>5.mkdir指令</h3><p>mkdir指令用于创建目录 </p><p>• 基本语法 mkdir [选项] 要创建的目录 </p><p>示例：mkdir jxy/mkdir /home/jxy</p><p>• 常用选项 -p ：创建多级目录</p><p>示例：mkdir -p jin/mkdir -p /home/jxy/two</p><h3 id="6-rmdir指令"><a href="#6-rmdir指令" class="headerlink" title="6.rmdir指令"></a>6.rmdir指令</h3><p>rmdir指令删除空目录 </p><p>• 基本语法 rmdir [选项] 要删除的空目录 </p><p>示例：rmdir /home/one</p><p>• 使用细节 rmdir 删除的是空目录，如果目录下有内容时无法删除的。 </p><p>提示：如果需要删除非空目录，需要使用 rm -rf 要删除的目录</p><p>示例：rm -rf /home/two</p><h3 id="7-touch指令"><a href="#7-touch指令" class="headerlink" title="7.touch指令"></a>7.touch指令</h3><p>touch指令创建空文件 </p><p>• 基本语法 touch 文件名称</p><p>示例：touch 文件名</p><p>一次性创建多个文件</p><p>touch 文件1 文件2</p><h3 id="8-cp指令"><a href="#8-cp指令" class="headerlink" title="8.cp指令"></a>8.cp指令</h3><p>cp 指令拷贝文件到指定目录 </p><p>• 基本语法 cp [选项] 文件名 拷贝地点</p><p>示例：cp hello.java /home/..</p><p> • 常用选项 -r ：递归复制整个文件夹</p><p>示例：cp -r test/  one/</p><h3 id="9-rm指令"><a href="#9-rm指令" class="headerlink" title="9.rm指令"></a>9.rm指令</h3><p>rm 指令移除文件或目录 </p><p>• 基本语法 rm [选项] 要删除的文件或目录 </p><p>• 常用选项 </p><p>-r ：递归删除整个文件夹 </p><p>-f ： 强制删除不提示</p><h3 id="10-mv指令"><a href="#10-mv指令" class="headerlink" title="10.mv指令"></a>10.mv指令</h3><p>mv 移动文件与目录或重命名 </p><p>• 基本语法 </p><p>mv oldNameFile newNameFile (功能描述：重命名) </p><p>mv 旧文件名 新文件名</p><p>mv /temp/movefile /targetFolder (功能描述：移动文件)</p><p>mv 文件名 路径</p><h3 id="11-cat指令"><a href="#11-cat指令" class="headerlink" title="11.cat指令"></a>11.cat指令</h3><p>cat 查看文件内容 (只能查看，不能修改)</p><p>• 基本语法 cat [选项] 要查看的文件</p><p>• 常用选项 -n ：显示行号</p><p>示例：cat hello.java</p><p>cat -n hello.java</p><h3 id="12-more指令"><a href="#12-more指令" class="headerlink" title="12.more指令"></a>12.more指令</h3><p>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。</p><p> more指令中内置了若干快捷键，详见操作说明 </p><p>• 基本语法 more 要查看的文件</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻『一行』；</td></tr><tr><td>q</td><td>代表立刻离开 more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h3 id="13-less指令"><a href="#13-less指令" class="headerlink" title="13.less指令"></a>13.less指令</h3><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支 持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是 根据显示需要加载内容，对于显示大型文件具有较高的效率。 </p><p>• 基本语法 </p><p>less 要查看的文件 </p><p>• 操作说明</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>向下翻动一页；</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页；</td></tr><tr><td>/字串</td><td>向下搜寻『字串』的功能；n：向下查找；N：向上查找</td></tr><tr><td>?字串</td><td>向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td></tr><tr><td>q</td><td>离开 less 这个程序；</td></tr></tbody></table><h3 id="14-echo指令"><a href="#14-echo指令" class="headerlink" title="14.echo指令"></a>14.echo指令</h3><p>echo输出内容到控制台。 </p><p>• 基本语法 echo [选项] [输出内容] </p><p>• 应用实例 案例: 使用echo 指令输出环境变量 案例: 使用echo 指令输出 hello,world! </p><h3 id="15-head指令"><a href="#15-head指令" class="headerlink" title="15.head指令"></a>15.head指令</h3><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容 </p><p>• 基本语法 </p><p>​    head 文件 (功能描述：查看文件头10行内容) </p><p>head -n 5 文件 (功能描述：查看文件头5行内容，5可以是任意行数) </p><p>• 应用实例 案例: 查看/etc/profile 的前面5行代码</p><h3 id="16-tail指令"><a href="#16-tail指令" class="headerlink" title="16.tail指令"></a>16.tail指令</h3><p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的前10行内容。 </p><p>• 基本语法</p><ol><li>tail 文件 （功能描述：查看文件头10行内容） </li></ol><ol start="2"><li><p>tail -n 5 文件 （功能描述：查看文件头5行内容，5可以是任意行数） </p></li><li><p>tail -f 文件 （功能描述：实时追踪该文档的所有更新） </p></li></ol><p>• 应用实例 </p><p>案例1: 查看/etc/profile 最后5行的代码 </p><p>案例2: 实时监控 mydate.txt , 看看到文件有变化时，是否看到， 实时的追加日期</p><h3 id="17-gt-指令-和-gt-gt-指令"><a href="#17-gt-指令-和-gt-gt-指令" class="headerlink" title="17.&gt; 指令 和 &gt;&gt; 指令"></a>17.&gt; 指令 和 &gt;&gt; 指令</h3><p>1.&gt; 输出重定向和 &gt;&gt; 追加 </p><p>• 基本语法 1) ls -l &gt;文件 （功能描述：列表的内容写入文件a.txt中（覆盖写）） </p><ol start="2"><li><p>ls -al &gt;&gt;文件 （功能描述：列表的内容追加到文件aa.txt的末尾） </p></li><li><p>cat 文件1 &gt; 文件2 （功能描述：将文件1的内容覆盖到文件2） </p></li><li><p>echo “内容”&gt;&gt; 文件 </p></li></ol><p>• 应用实例 案例1: 将 /home 目录下的文件列表 写入到 /home/info.txt 中 </p><p>案例2: 将当前日历信息 追加到 /home/mycal 文件中</p><h3 id="18-ln-指令"><a href="#18-ln-指令" class="headerlink" title="18.ln 指令"></a>18.ln 指令</h3><p>软链接也成为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径 </p><p>• 基本语法 </p><p>ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接） </p><p>• 应用实例 </p><p>案例1: 在/home 目录下创建一个软连接 linkToRoot，连接到 /root 目录 </p><p>案例2: 删除软连接 linkToRoot</p><h3 id="19-history指令"><a href="#19-history指令" class="headerlink" title="19.history指令"></a>19.history指令</h3><p>查看已经执行过历史命令,也可以执行历史指令 </p><p>• 基本语法 history （功能描述：查看已经执行过历史命令） </p><p>• 应用实例 </p><p>案例1: 显示所有的历史命令 </p><p>案例2: 显示最近使用过的10个指令。 </p><p>案例3：执行历史编号为5的指令</p><h2 id="3-时间日期类"><a href="#3-时间日期类" class="headerlink" title="3.时间日期类"></a>3.时间日期类</h2><h3 id="20-date指令-显示当前日期"><a href="#20-date指令-显示当前日期" class="headerlink" title="20.date指令-显示当前日期"></a>20.date指令-显示当前日期</h3><p>• 基本语法 </p><ol><li><p>date （功能描述：显示当前时间） </p></li><li><p>date +%Y （功能描述：显示当前年份） </p></li><li><p>date +%m （功能描述：显示当前月份）</p><ol start="4"><li>date +%d （功能描述：显示当前是哪一天） </li></ol></li><li><p>date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒） </p></li></ol><p>• 应用实例 </p><p>案例1: 显示当前时间信息 </p><p>案例2: 显示当前时间年月日 </p><p>案例3: 显示当前时间年月日时分秒</p><h3 id="21-date指令-设置日期"><a href="#21-date指令-设置日期" class="headerlink" title="21.date指令-设置日期"></a>21.date指令-设置日期</h3><p>• 基本语法 </p><p>date -s 字符串时间 </p><p>• 应用实例 </p><p>例1: 设置系统当前时间 ， 比如设置成 2020-11-11 11:22:22 </p><h3 id="22-cal指令"><a href="#22-cal指令" class="headerlink" title="22.cal指令"></a>22.cal指令</h3><p>查看日历指令</p><p> • 基本语法</p><p>cal [选项] （功能描述：不加选项，显示本月日历） </p><p>• 应用实例 </p><p>案例1: 显示当前日历 </p><p>案例2: 显示2020年日历</p><h2 id="4-搜索查找类"><a href="#4-搜索查找类" class="headerlink" title="4.搜索查找类"></a>4.搜索查找类</h2><h3 id="23-find指令"><a href="#23-find指令" class="headerlink" title="23.find指令"></a>23.find指令</h3><p>find指令</p><p>将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。 </p><p>• 基本语法 </p><p>find [搜索范围] [选项] </p><p>• 选项说明 </p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件名查找模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名所有文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件。</td></tr></tbody></table><p>• 应用实例 </p><p>案例1: 按文件名：根据名称查找/home 目录下的hello.txt文件 </p><p>示例：find /home -name hello.text</p><p>案例2：按拥有者：查找/opt目录下，用户名称为 nobody的文件 </p><p>示例：fing /opt -user nobody</p><p>案例3：查找整个linux系统下大于200m的文件（+n 大于 -n小于 n等于） 选项 功能 -name&lt;查询方式&gt; 按照指定的文件名</p><p>示例：find / -size +200M</p><p>小于：find / -size -200M</p><p>等于：find / -size 200M</p><p>寻找某种格式文件： find / -name “*.txt”</p><p><strong>Ctrl+C终止查找</strong></p><h3 id="24-locate指令"><a href="#24-locate指令" class="headerlink" title="24.locate指令"></a>24.locate指令</h3><p>locaate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径 的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。 为了保证查询结果的准确度，管理员必须定期更新locate时刻。 </p><p>• 基本语法 locate 搜索文件 </p><p>• 特别说明 由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate 数据库。 </p><p>• 应用实例 </p><p>案例1: 请使用locate 指令快速定位 hello.txt 文件所在目录</p><h3 id="25-grep指令和-管道符号"><a href="#25-grep指令和-管道符号" class="headerlink" title="25.grep指令和 管道符号 |"></a>25.grep指令和 管道符号 |</h3><p>grep 过滤查找 ， 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。 </p><p>• 基本语法 </p><p>grep [选项] 查找内容 源文件 </p><p>• 常用选项 • 应用实例 </p><p>案例1: 请在 hello.txt 文件中，查找 “yes” 所在行，并且显示行号</p><h2 id="5-压缩和解压类"><a href="#5-压缩和解压类" class="headerlink" title="5.压缩和解压类"></a>5.压缩和解压类</h2><h3 id="26-gzip-gunzip-指令"><a href="#26-gzip-gunzip-指令" class="headerlink" title="26.gzip/gunzip 指令"></a>26.gzip/gunzip 指令</h3><p>gzip 用于压缩文件， gunzip 用于解压的 </p><p>• 基本语法</p><p>gzip 文件 （功能描述：压缩文件，只能将文件压缩为*.gz文件） </p><p>gunzip 文件.gz （功能描述：解压缩文件命令）</p><p>• 应用实例 </p><p>案例1: gzip压缩， 将 /home下的 hello.txt文件进行压缩 </p><p>案例2: gunzip压缩， 将 /home下的 hello.txt.gz 文件进行解压缩</p><h3 id="27-zip-unzip-指令"><a href="#27-zip-unzip-指令" class="headerlink" title="27.zip/unzip 指令"></a>27.zip/unzip 指令</h3><p>zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的 </p><p>• 基本语法 </p><p>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）</p><p>unzip [选项] XXX.zip （功能描述：解压缩文件） </p><p>• zip常用选项 -r：递归压缩，即压缩目录 </p><p>• unzip的常用选项 -d&lt;目录&gt; ：指定解压后文件的存放目录 </p><p>• 应用实例 </p><p>案例1: 将 /home下的 所有文件进行压缩成 mypackage.zip </p><p>示例：zip -r mypackage.zip  /home/</p><p>案例2: 将 mypackge.zip 解压到 /opt/tmp 目录下</p><p>示例：unzip -d /opt/tmp/ mypackage.zip </p><h3 id="28-tar-指令"><a href="#28-tar-指令" class="headerlink" title="28.tar 指令"></a>28.tar 指令</h3><p>tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件。 </p><p>• 基本语法 tar [选项] XXX.tar.gz 打包的内容 (功能描述：打包目录，压缩后的文件格式.tar.gz) </p><p>• 选项说明 </p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table><p>• 应用实例 </p><p>案例1: 压缩多个文件，将 /home/a1.txt 和 /home/a2.txt 压缩成 a.tar.gz </p><p>示例：在home目录下tar -zcvf a.tar.gz a1.txt a2.txt</p><p>案例2: 将/home 的文件夹 压缩成 myhome.tar.gz </p><p>示例：tar -zcvf myhome.tar.gz  /home/</p><p>案例3: 将 a.tar.gz 解压到当前目录</p><p>tar -zxvf a.tar.gz</p><p>案例4：将myhome.tar.gz解压到/opt/tmp目录下</p><p>示例：tar -zxvf  myhome.tar.gz  /opt/tmp</p><h2 id="6-系统操作"><a href="#6-系统操作" class="headerlink" title="6.系统操作"></a>6.系统操作</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>ifconfig</td><td>查看linux系统ip地址</td></tr><tr><td>setup</td><td>进入Linux系统配置界面</td></tr><tr><td>reboot</td><td>重启系统</td></tr><tr><td>shutdown –h now</td><td>立即关机</td></tr><tr><td>shutdown -h 1</td><td>一分钟后关机</td></tr><tr><td>shutdown –r now</td><td>立即关机</td></tr><tr><td>sync</td><td>把内存的数据同步到磁盘</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="3-远程登录Linux-说明"><a href="#3-远程登录Linux-说明" class="headerlink" title="3.远程登录Linux 说明"></a>3.远程登录Linux 说明</h1><h2 id="1-为什么使用远程操作"><a href="#1-为什么使用远程操作" class="headerlink" title="1.为什么使用远程操作"></a>1.为什么使用远程操作</h2><p>公司开发时候， 具体的情况是这样的 </p><ol><li><p>linux服务器是开发小组共享的. </p></li><li><p>正式上线的项目是运行在公网的. </p></li><li><p>因此程序员需要远程登录到centos进行项目管理或者开发. </p></li><li><p>远程登录客户端有 Xshell5， Xftp5 </p></li></ol><h2 id="1-Xshell"><a href="#1-Xshell" class="headerlink" title="1.Xshell"></a><strong>1.Xshell</strong></h2><h3 id="1-Xshell简介"><a href="#1-Xshell简介" class="headerlink" title="1.Xshell简介"></a>1.Xshell简介</h3><p> Xshell 是目前最好的远程登录到Linux操作的软件，流畅的速度并且完 美解决了中文乱码的问题， 是目前程序员首选的软件。</p><p> Xshell 是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。</p><p> Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好 的达到远程控制终端的目的。</p><p>要使用Xshell,首先要开启SSHD服务（22号端口）</p><h3 id="2-使用Xshell步骤"><a href="#2-使用Xshell步骤" class="headerlink" title="2.使用Xshell步骤"></a>2.使用Xshell步骤</h3><p>1.安装Xshell</p><p>2.新建会话</p><ol><li><p>主机填要连接的linux系统的ip地址。</p></li><li><p>查询linux的ip地址指令为ifconfig</p></li><li><p>协议要使用SSH</p></li></ol><p>3.新建完成之后，输入账号密码就可以进行远程操作了。</p><p>4.使用layout退出远程操作</p><h2 id="2-Xftp"><a href="#2-Xftp" class="headerlink" title="2.Xftp"></a>2.Xftp</h2><h3 id="1-Xftp简介"><a href="#1-Xftp简介" class="headerlink" title="1.Xftp简介"></a>1.Xftp简介</h3><p><strong>远程上传下载工具</strong></p><p>​        是一个基于 windows 平台的功能强大的SFTP、FTP 文件传输软件。使用了 Xftp 以后，windows 用户能安全地在 UNIX/Linux 和 Windows PC 之间传输文 件。</p><h3 id="2-使用Xftp的步骤"><a href="#2-使用Xftp的步骤" class="headerlink" title="2.使用Xftp的步骤"></a>2.使用Xftp的步骤</h3><p>1.安装Xftp</p><p>2.新建会话</p><ol><li><p>主机填要连接的linux系统的ip地址。</p></li><li><p>查询linux的ip地址指令为ifconfig</p></li><li><p>协议要使用SFTP</p></li><li><p>填写账号密码</p></li></ol><p>5.进行操作。</p><h3 id="3-乱码解决"><a href="#3-乱码解决" class="headerlink" title="3.乱码解决"></a>3.乱码解决</h3><p>在设置中选择使用UTF-8编码</p><h1 id="4-vi-vim编辑器"><a href="#4-vi-vim编辑器" class="headerlink" title="4.vi/vim编辑器"></a>4.vi/vim编辑器</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​        vi和vim的基本介绍 所有的 Linux 系统都会内建 vi 文本编辑器。 Vim 具有程序编辑的能力，可以看做是Vi的增强版本，可以主动的以字体颜色辨别 语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别 丰富，在程序员中被广泛使用。</p><h2 id="2-vi和vim常用的三种模式"><a href="#2-vi和vim常用的三种模式" class="headerlink" title="2.vi和vim常用的三种模式"></a>2.vi和vim常用的三种模式</h2><h3 id="1-正常模式"><a href="#1-正常模式" class="headerlink" title="1.正常模式:"></a>1.正常模式:</h3><p>以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中， 你可以使用 『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、贴上』来处理你的文件数据。 </p><h3 id="2-插入模式"><a href="#2-插入模式" class="headerlink" title="2.插入模式:"></a>2.插入模式:</h3><p>按下i, I, o, O, a, A, r, R等任何一个字母之后才会进入编辑模式, 一般来说按i即可. </p><h3 id="3-命令行模式"><a href="#3-命令行模式" class="headerlink" title="3.命令行模式"></a>3.命令行模式</h3><p>在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显示行号等的 动作则是在此模式中达成的！</p><h2 id="3-三种模式的转换"><a href="#3-三种模式的转换" class="headerlink" title="3.三种模式的转换"></a>3.三种模式的转换</h2><p>1.在命令行中输入vim 文件名进入正常模式</p><p>2.正常模式输入i/a进入插入模式</p><p>3.插入模式使用Esc返回正常模式</p><p>4.正常模式输入：或/进入命令行模式</p><p>5.命令行模式输入Esc返回正常模式</p><h2 id="4-命令行模式操作"><a href="#4-命令行模式操作" class="headerlink" title="4.命令行模式操作"></a>4.命令行模式操作</h2><p>1.wq:保存并推出；</p><p>2.q：退出（不能有尚未保存内容）；</p><p>3.q!：强制退出，会放弃未保存内容。</p><h2 id="5-快捷键"><a href="#5-快捷键" class="headerlink" title="5.快捷键"></a>5.快捷键</h2><ol><li>拷贝当前行 yy , 拷贝当前行向下的5行 5yy，并粘贴（p）。 </li></ol><ol start="2"><li><p>删除当前行 dd , 删除当前行向下的5行 5dd </p></li><li><p>在文件中查找某个单词 [命令行下 /关键字 ， 回车 查找 , 输入 n 就是查找下一个 ] </p></li><li><p>设置文件的行号，取消文件的行号.[命令行下 : set nu 和 :set nonu] </p></li><li><p>编辑 /etc/profile 文件，使用快捷键到底文档的最末行[G]和最首行[gg] </p></li><li><p>在一个文件中输入 “hello” ,然后又撤销这个动作 u </p></li><li><p>编辑 /etc/profile 文件，并将光标移动到 20行 shift+g </p></li><li><p>更多的看整理的文档</p></li></ol><h1 id="5-用户管理"><a href="#5-用户管理" class="headerlink" title="5.用户管理"></a>5.用户管理</h1><p>​        Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向 系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>​        每一个用户都至少属于一个用户组</p><h2 id="1-用户组"><a href="#1-用户组" class="headerlink" title="1.用户组"></a>1.用户组</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件 有所有者、所在组、其它组的概念。 </p><ol><li><p>所有者 </p></li><li><p>所在组 </p></li><li><p>其它组 </p></li><li><p>改变用户所在的组</p></li></ol><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><p>系统可以对有共性的多个用户进行统一的管理。</p><h3 id="1-新增组"><a href="#1-新增组" class="headerlink" title="1.新增组"></a>1.新增组</h3><p>指令：groupadd 组名</p><h3 id="2-删除组"><a href="#2-删除组" class="headerlink" title="2.删除组"></a>2.删除组</h3><p>指令：groupdel 组名</p><h2 id="2-用户操作"><a href="#2-用户操作" class="headerlink" title="2.用户操作"></a>2.用户操作</h2><h3 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h3><p>指令：useradd 用户名</p><ol><li>未指定用户属于哪个组时，会自动创建一个与用户名相同的组来存放用户</li><li>当用户创建成功后，会自动创建与用户名相同的家目录</li><li>也可以通过 useradd -d 指定目录 新的用户名，给新创建的用户指定家目录</li></ol><p><strong>增加用户时指定组</strong></p><p>指令：useradd -g 用户组 用户名</p><p><strong>修改用户所属组</strong></p><p>指令：usermod -g 组名 用户名</p><h3 id="2-指定-修改密码"><a href="#2-指定-修改密码" class="headerlink" title="2.指定/修改密码"></a>2.指定/修改密码</h3><p>指令： passwd 用户名</p><ol><li>创建完用户后，可以使用passwd 用户名  指令为用户创建密码</li><li>只有在root权限时才能创建、修改</li></ol><h3 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3.删除用户"></a>3.删除用户</h3><p>指令：userdel 用户名</p><p>只删除用户，保留用户的家目录</p><p>指令：userdel -r 用户名</p><p>删除用户同时删除其家目录</p><h3 id="4-查询用户"><a href="#4-查询用户" class="headerlink" title="4.查询用户"></a>4.查询用户</h3><p>指令：id 用户名</p><h3 id="5-切换用户"><a href="#5-切换用户" class="headerlink" title="5.切换用户"></a>5.切换用户</h3><p>指令：su – 要切换的用户名</p><ol><li>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</li><li>当需要返回到原来用户时，使用exit指令</li></ol><h3 id="6-查询当前用户"><a href="#6-查询当前用户" class="headerlink" title="6.查询当前用户"></a>6.查询当前用户</h3><p>指令：whoami/who am i</p><h3 id="7-文件-目录所有者"><a href="#7-文件-目录所有者" class="headerlink" title="7.文件/目录所有者"></a>7.文件/目录所有者</h3><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。 </p><h4 id="1-查看文件的所有者"><a href="#1-查看文件的所有者" class="headerlink" title="1.查看文件的所有者"></a>1.查看文件的所有者</h4><ol><li><p>指令：ls –ahl </p></li><li><p>应用实例 </p></li></ol><h4 id="2-修改文件所有者"><a href="#2-修改文件所有者" class="headerlink" title="2.修改文件所有者"></a>2.修改文件所有者</h4><p>• 指令：chown 用户名 文件名 </p><p>• 应用案例 要求：使用root 创建一个文件apple.txt ，然后将其所有者修改成 zhangfei</p><h4 id="3-改变用户所在组"><a href="#3-改变用户所在组" class="headerlink" title="3.改变用户所在组"></a>3.改变用户所在组</h4><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某 个用户所在的组。 改变用户所在组 </p><ol><li><p>usermod –g 组名 用户名 </p></li><li><p>usermod –d 目录名 用户名 改变该用户登陆的初始目录。 </p></li></ol><p>应用实例 </p><p>将 zwj 这个用户从原来所在组，修改到 wudang 组。</p><h2 id="3-用户和组的相关文件"><a href="#3-用户和组的相关文件" class="headerlink" title="3.用户和组的相关文件"></a>3.用户和组的相关文件</h2><p><strong>/etc/passwd 文件</strong> </p><p>用户（user）的配置文件，记录用户的各种信息 </p><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p><strong>/etc/shadow 文件</strong> </p><p>口令的配置文件 </p><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警 告时间:不活动时间:失效时间:标志 </p><p><strong>/etc/group 文件</strong></p><p>组(group)的配置文件，记录Linux包含的组的信息 </p><p>每行含义：组名:口令:组标识号:组内用户列表</p><h2 id="4-权限的基本介绍"><a href="#4-权限的基本介绍" class="headerlink" title="4.权限的基本介绍"></a>4.权限的基本介绍</h2><p>ls -l 中显示的内容如下： </p><p>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc </p><h3 id="1、0-9位：权限"><a href="#1、0-9位：权限" class="headerlink" title="1、0-9位：权限"></a>1、0-9位：权限</h3><ol><li><p>第0位确定文件类型(d, - , l , c , b) </p></li><li><p>d:目录</p></li><li><p>-普通文件</p></li><li><p>l:软连接</p></li><li><p>c:字符设备（键盘、鼠标）</p></li><li><p>b:块文件（硬盘）</p></li><li><p>第1-3位确定所有者（该文件的所有者）拥有该文件的权限。没有使用”-“占位—User </p></li><li><p>第4-6位确定所属组（同用户组的）拥有该文件的权限，—Group </p></li><li><p>第7-9位确定其他组用户拥有该文件的权限 —Other</p></li></ol><p><strong>rwx作用到文件</strong> </p><ol><li><p>[ r ]代表可读(read): 可以读取,查看 </p></li><li><p>[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是 对该文件所在的目录有写权限，才能删除该文件. </p></li><li><p>[ x ]代表可执行(execute):可以被执行 </p></li></ol><p><strong>rwx作用到目录</strong> </p><ol><li><p>[ r ]代表可读(read): 可以读取，ls查看目录内容 </p></li><li><p>[ w ]代表可写(write): 可以修改,目录内创建+删除+重命名目录 </p></li><li><p>[ x ]代表可执行(execute):可以进入该目录</p></li></ol><h3 id="2、9位之后说明"><a href="#2、9位之后说明" class="headerlink" title="2、9位之后说明"></a>2、9位之后说明</h3><ol><li><p>第一个数字：如果是文件，表示硬链接数，如果是目录，则表示目录的子目录数</p></li><li><p>文件拥有者</p></li><li><p>拥有者所属用户</p></li><li><p>第二个数字：文件大小（字节数），如果是目录，则显示4096</p></li><li><p>时间：文件最后的修改时间 </p></li><li><p>文件名</p></li></ol><h2 id="5-权限管理"><a href="#5-权限管理" class="headerlink" title="5.权限管理"></a>5.权限管理</h2><h3 id="1-修改权限-chmod"><a href="#1-修改权限-chmod" class="headerlink" title="1.修改权限-chmod"></a>1.修改权限-chmod</h3><p>通过chmod指令，可以修改文件或者目录的权限。</p><p><strong>第一种方式</strong></p><ul><li>、-、= 变更权限 </li></ul><p>u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和) </p><ol><li><p>chmod u=rwx,g=rx,o=x 文件目录名 </p></li><li><p>chmod o+w 文件目录名</p></li></ol><p>) chmod a-x 文件目录名 </p><p>• 案例演示 </p><ol><li>给abc文件 的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。 </li></ol><p>示例：chmod u=rwx,g=rx,o=rw abc</p><ol start="2"><li>给abc文件的所有者除去执行的权限，增加组写的权限</li></ol><p>示例：chmod u-x,g+w abc</p><ol start="3"><li>给abc文件的所有用户添加读的权限</li></ol><p>示例：chmod a+r abc</p><p><strong>第二种方式</strong></p><p>通过数字变更权限 </p><p>r=4 w=2 x=1 rwx=4+2+1=7 </p><p>chmod u=rwx,g=rx,o=x 文件目录名 </p><p>相当于 chmod 751 文件目录名 </p><p>• 案例演示 </p><p>要求：将 /home/abc.txt 文件的权限修改成 rwxr-xr-x, 使用给数字的方式实现</p><p>示例：chmod 755 /home/abc.txt</p><h3 id="2-修改文件所有者-chown"><a href="#2-修改文件所有者-chown" class="headerlink" title="2.修改文件所有者-chown"></a>2.修改文件所有者-chown</h3><p>chown newowner file 改变文件的所有者 </p><p>chown newowner:newgroup file 改变用户的所有者和所有组 </p><p>-R 如果是目录 则使其下所有子文件或目录递归生效 </p><p>案例演示： </p><ol><li>请将 /home/abc .txt 文件的所有者修改成 tom </li></ol><p>chown tom /home/abc .txt</p><ol start="2"><li>请将 /home/kkk 目录下所有的文件和目录的所有者都修改成tom </li></ol><p>chown -R tom /home/kkk/</p><h3 id="3-修改文件所在组-chgrp"><a href="#3-修改文件所在组-chgrp" class="headerlink" title="3.修改文件所在组-chgrp"></a>3.修改文件所在组-chgrp</h3><p>基本介绍 </p><p>chgrp newgroup file 改变文件的所有组 </p><p>案例演示： </p><ol><li>请将 /home/abc .txt 文件的所在组修改成 shaolin (少林) </li></ol><p>示例：chgrp shaolin /home/abc .txt</p><ol start="2"><li>请将 /home/kkk 目录下所有的文件和目录的所在组都修改成 shaolin(少林) </li></ol><p>示例：chgrp -R shaolin  /home/kkk/</p><p>4.实践-警察和土匪游戏 </p><p>police ， bandit</p><p>jack, jerry: 警察 </p><p>xh, xq: 土匪 </p><p>(1) 创建组 </p><p>(2) 创建用户 </p><p>(3) jack 创建一个文件，自己可以读写，本组人可以读，其它组没人任何权限 </p><p>(4) jack 修改该文件，让其它组人可以读, 本组人可以读写 </p><p>(5) xh 投靠 警察，看看是否可以读写</p><ol><li>groupadd police</li></ol><p>​     groupadd banddit</p><ol start="2"><li>useradd -g police jack</li></ol><p>​    useradd -g police jerry</p><p>​    useradd -g bandit xh</p><p>​    useradd -g bandit xq</p><ol start="3"><li>使用jack登录</li></ol><p>​    vim jack01.txt</p><p>​    chmod 640 jack01.txt</p><ol start="4"><li><p>chmod o=r,g=rw jack01.txt</p></li><li><p>使用root修改xh到police组：usermod -g police xh</p></li></ol><p>​    使用jack给所在组读写权限：chmod g=rx jack/</p><p>​    xh注销重新登录即可获取权限</p><h1 id="6-运行级别"><a href="#6-运行级别" class="headerlink" title="6.运行级别"></a>6.运行级别</h1><p>运行级别说明： </p><p>0 ：关机 </p><p>1 ：单用户【找回丢失密码】 </p><p>2：多用户状态没有网络服务 </p><p>3：多用户状态有网络服务 </p><p>4：系统未使用保留给用户 </p><p>5：图形界面 </p><p>6：系统重启 </p><p>常用运行级别是3和5 ，要修改默认的运行级别可改文件 /etc/inittab的id:5:initdefault:这一行中的数字 </p><p>命令：init [012356]</p><h1 id="7-crond-任务调度"><a href="#7-crond-任务调度" class="headerlink" title="7.crond 任务调度"></a>7.crond 任务调度</h1><p>crontab 进行定时任务的设置。 </p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>任务调度：是指系统在某个时间执行的特定的命令或程序。 </p><h2 id="2-任务调度分类"><a href="#2-任务调度分类" class="headerlink" title="2.任务调度分类"></a>2.任务调度分类</h2><p>1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等 </p><p>2.个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。 </p><h2 id="3-基本语法"><a href="#3-基本语法" class="headerlink" title="3.基本语法"></a>3.基本语法</h2><p>crontab [选项] </p><h2 id="4-常用选项"><a href="#4-常用选项" class="headerlink" title="4.常用选项"></a>4.常用选项</h2><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>编辑crontab定时任务</td></tr><tr><td>-l</td><td>查询crontab任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table><h2 id="5-快速入门"><a href="#5-快速入门" class="headerlink" title="5.快速入门"></a>5.快速入门</h2><p>设置任务调度文件：/etc/crontab</p><p>设置个人任务调度。执行crontab –e命令。 </p><p>接着输入任务到调度文件 </p><p>如：*/1 * * * * ls –l /etc/ &gt; /tmp/to.txt </p><p>意思说每小时的每分钟执行ls –l /etc/ &gt; /tmp/to.txt命令 </p><p>参数细节说明 </p><p><strong>5个占位符的说明</strong></p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个“*”</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个“*”</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个“*”</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个“*”</td><td>一周当中的星期几</td><td>0-7（0和7都代表星期日）</td></tr></tbody></table><h2 id="6-特殊符号的说明"><a href="#6-特殊符号的说明" class="headerlink" title="6.特殊符号的说明"></a><strong>6.特殊符号的说明</strong></h2><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一 次的意思。</td></tr><tr><td>，</td><td>代表不连续的时间。比如“0 8,12,16 * * * 命令”，就代表在每天 的8点0分，12点0分，16点0分都执行一次命令</td></tr><tr><td>-</td><td>代表连续的时间范围。比如“0 5 * * 1-6命令”，代表在周一到周 六的凌晨5点0分执行命令</td></tr><tr><td>*/n</td><td>代表每隔多久执行一次。比如“*/10 * * * * 命令”，代表每隔 10分钟就执行一遍命令</td></tr></tbody></table><h2 id="7-特定时间执行任务案例"><a href="#7-特定时间执行任务案例" class="headerlink" title="7.特定时间执行任务案例"></a>7.特定时间执行任务案例</h2><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td>45 22 * * * 命令</td><td>在22点45分执行命令</td></tr><tr><td>0 17 * * 1 命令</td><td>每周1 的17点0分执行命令</td></tr><tr><td>0 5 1,15 * * 命令</td><td>每月1号和15号的凌晨5点0分执行命令</td></tr><tr><td>40 4 * * 1-5 命令</td><td>每周一到周五的凌晨4点40分执行命令</td></tr><tr><td>*/10 4 * * * 命令</td><td>每天的凌晨4点，每隔10分钟执行一次命令</td></tr><tr><td>0 0 1,15 * 1 命令</td><td>每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和 几号最好不要同时出现，<br>因为他们定义的都是天。非常容易让管 理员混乱。</td></tr></tbody></table><h2 id="8-crond-相关指令"><a href="#8-crond-相关指令" class="headerlink" title="8.crond 相关指令:"></a>8.crond 相关指令:</h2><ol><li><p>crontab –r：终止任务调度。 </p></li><li><p>crontab –l：列出当前有那些任务调度 </p></li><li><p>service crond restart [重启任务调度]</p></li></ol><h2 id="9-应用实例"><a href="#9-应用实例" class="headerlink" title="9.应用实例"></a>9.应用实例</h2><p>案例1：每隔1分钟，就将当前的日期信息，追加到 /tmp/mydate 文件中 </p><p>示例：脚本形式</p><ol><li><p>编写一个sh文件   /home/task1,sh</p><p>内容：date &gt;&gt; /指定文件夹（/tmp/mydate）</p></li><li><p>给task1.sh执行权限</p><p>chmod 744  /文件路径</p></li><li><p>crontab -e</p><p>内容：*/1 * * * * /home/task1.sh</p></li></ol><p>案例2：每隔1分钟， 将当前日期和日历都追加到 /home/mycal 文件中 </p><p>date &gt;&gt; /指定文件夹（/home/mycal）</p><p>cal &gt;&gt; /指定文件夹（/home/mycal）</p><p>案例3: 每天凌晨2:00 将mysql数据库 testdb ，备份到文件中。</p><p>/usr/localmysql/bin/mysqldump -u root-p0829 testdb &gt; /tmp/mydb. bak</p><h1 id="8-Linux分区"><a href="#8-Linux分区" class="headerlink" title="8.Linux分区"></a>8.Linux分区</h1><h2 id="1-分区的方式"><a href="#1-分区的方式" class="headerlink" title="1.分区的方式"></a>1.分区的方式</h2><h3 id="1-mbr分区"><a href="#1-mbr分区" class="headerlink" title="1) mbr分区"></a>1) mbr分区</h3><p>1.最多支持四个主分区 </p><p>2.系统只能安装在主分区 </p><p>3.扩展分区要占一个主分区 </p><p>4.MBR最大只支持2TB，但拥有最好的兼容性 </p><h3 id="2-gtp分区"><a href="#2-gtp分区" class="headerlink" title="2) gtp分区"></a>2) gtp分区</h3><p>1.支持无限多个主分区（但操作系统可能限制，比如 windows下最多128个分区） </p><p>2.最大支持18EB的大容量（1EB=1024 PB，1PB=1024 TB ） </p><p>3.windows7 64位以后支持gtp</p><h2 id="2-Linux分区原理"><a href="#2-Linux分区原理" class="headerlink" title="2.Linux分区原理"></a>2.Linux分区原理</h2><ol><li><p>Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独 立且唯一的文件结构 , Linux中每个分区都是用来组成整个文件系统的一部分。 </p></li><li><p>Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目 录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一 个目录下获得。</p></li></ol><h2 id="3-查看所有设备挂载情况"><a href="#3-查看所有设备挂载情况" class="headerlink" title="3.查看所有设备挂载情况"></a>3.查看所有设备挂载情况</h2><p>命令 ：lsblk 或者 lsblk -f</p><p>4.如何增加一块硬盘 </p><ol><li><p>虚拟机添加硬盘 </p></li><li><p>分区   命令：fdisk /dev/sdb </p></li></ol><p>开始对/sdb分区</p><p>• m 显示命令列表 </p><p>• p 显示磁盘分区 同 fdisk –l </p><p>• n 新增分区 </p><p>• d 删除分区 </p><p>• w 写入并退出</p><ol start="3"><li>格式化 </li></ol><p>命令:mkfs -t ext4 /dev/sdb1 </p><ol start="4"><li>挂载 </li></ol><p>挂载</p><p>将一个分区与一个目录联系起来</p><p>• mount 设备名称 挂载目录 </p><p>• 例如： mount /dev/sdb1 /newdisk </p><p>• umount 设备名称 或者 挂载目录 </p><p>• 例如： umount /dev/sdb1 或者 umount /newdisk</p><ol start="5"><li><p>设置可以自动挂载 。</p><p>通过修改/etc/fstab实现挂载 添加完成后 执行mount –a 即刻生效</p></li></ol><h1 id="9-磁盘情况查询"><a href="#9-磁盘情况查询" class="headerlink" title="9.磁盘情况查询"></a>9.磁盘情况查询</h1><h2 id="1-查询系统整体磁盘使用情况"><a href="#1-查询系统整体磁盘使用情况" class="headerlink" title="1.查询系统整体磁盘使用情况"></a>1.查询系统整体磁盘使用情况</h2><p>指令：df -h  /   ff -lh</p><h2 id="2-查询指定目录的磁盘占用情况"><a href="#2-查询指定目录的磁盘占用情况" class="headerlink" title="2.查询指定目录的磁盘占用情况"></a>2.查询指定目录的磁盘占用情况</h2><p>• 基本语法 </p><p>du -h /目录 </p><p>查询指定目录的磁盘占用情况，默认为当前目录 </p><p>-s 指定目录占用大小汇总</p><p>-h 带计量单位 </p><p>-a 含文件 –max-depth=1 子目录深度 </p><p> -c 列出明细的同时，增加汇总值</p><h2 id="3-磁盘情况-工作实用指令"><a href="#3-磁盘情况-工作实用指令" class="headerlink" title="3.磁盘情况-工作实用指令"></a>3.磁盘情况-工作实用指令</h2><ol><li>统计/home文件夹下文件的个数 </li></ol><p>指令：ls -l /home | grep  “^-“ | wc -l</p><ol start="2"><li>统计/home文件夹下目录的个数 </li></ol><p>指令：ls -l /home | grep  “^d” | wc -l</p><ol start="3"><li>统计/home文件夹下文件的个数，包括子文件夹里的 </li></ol><p>指令：ls -lR/home | grep  “^-“ | wc -l</p><ol start="4"><li>统计文件夹下目录的个数，包括子文件夹里的 </li></ol><p>指令：ls -lR/home | grep  “^d” | wc -l</p><ol start="5"><li>以树状显示目录结构</li></ol><p>1.安装tree指令</p><p>yun install tree</p><p>2.使用tree</p><h1 id="10-网络配置"><a href="#10-网络配置" class="headerlink" title="10.网络配置"></a>10.网络配置</h1><h1 id="11-进程管理"><a href="#11-进程管理" class="headerlink" title="11.进程管理"></a>11.进程管理</h1><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h2><ol><li><p>在LINUX中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一 个ID号。 </p></li><li><p>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例 如www服务器。 </p></li><li><p>每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目 前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法 看到的进程，通常使用后台方式执行。</p></li><li><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到 关机才才结束。</p></li></ol><h2 id="2-显示系统执行的进程"><a href="#2-显示系统执行的进程" class="headerlink" title="2.显示系统执行的进程"></a>2.显示系统执行的进程</h2><h3 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h3><p>ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。 可以不加任何参数</p><h3 id="2-选项"><a href="#2-选项" class="headerlink" title="2.选项"></a>2.选项</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示当前终端的所有进程信息</td></tr><tr><td>-u</td><td>以用户的格式显示进程信息</td></tr><tr><td>-x</td><td>显示后台进程运行的参数</td></tr></tbody></table><h3 id="3-显示信息"><a href="#3-显示信息" class="headerlink" title="3.显示信息"></a>3.显示信息</h3><p>1.USER:用户名</p><p>2.PID:进程id</p><p>3.%CPU:占用的CPU</p><p>4.%MEM:占用内存</p><p>5.VSZ:使用的虚拟内存（单位：KB）</p><p>6.RSS:使用的物理内存情况（单位：KB）</p><p>7.TTY:使用的终端</p><p>8.STAT:进程运行状态</p><ol><li>S：休眠</li><li>R：正在运行</li></ol><p>9.START:启动时间</p><p>10.TIME:占用CPU总时间</p><p>11.COMMAND:进程启用的命令行如果过长会被截断显示</p><h3 id="4-应用实例"><a href="#4-应用实例" class="headerlink" title="4.应用实例"></a>4.应用实例</h3><p>要求：以全格式显示当前所有的进程，查看进程的父进程。 </p><p>• ps -ef是以全格式显示当前所有的进程 </p><p>• -e 显示所有进程。-f 全格式。 </p><p>• ps -ef|grep xxx • 是BSD风格 </p><p>• UID：用户ID • PID：进程ID </p><p>• PPID：父进程ID </p><p>• C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算， 执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高 </p><p>• STIME：进程启动的时间 </p><p>• TTY：完整的终端名称 </p><p>• TIME：CPU时间 </p><p>• CMD：启动进程所用的命令和参数</p><h2 id="3-终止进程kill和killall"><a href="#3-终止进程kill和killall" class="headerlink" title="3.终止进程kill和killall"></a>3.终止进程kill和killall</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该 进程。使用kill命令来完成此项任务。 </p><h3 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h3><p>kill [选项] 进程号（功能描述：通过进程号杀死进程） </p><p>killall 进程名称 （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负 载过大而变得很慢时很有用） </p><h2 id="3-常用选项"><a href="#3-常用选项" class="headerlink" title="3.常用选项"></a>3.常用选项</h2><p> -9 :表示强迫进程立即停止</p><h1 id="12-RPM包管理"><a href="#12-RPM包管理" class="headerlink" title="12.RPM包管理"></a>12.RPM包管理</h1><h2 id="1-rpm包的简单查询指令"><a href="#1-rpm包的简单查询指令" class="headerlink" title="1.rpm包的简单查询指令"></a>1.rpm包的简单查询指令</h2><p>查询已安装的rpm列表 rpm –qa|grep 软件名 </p><p>rpm包名基本格式： 一个rpm包名：firefox-45.0.1-1.el6.centos.x86_64.rpm </p><p>名称:firefox </p><p>版本号：45.0.1-1 </p><p>适用操作系统: el6.centos.x86_64 </p><p>表示centos6.x的64位系统 </p><p>如果是i686、i386表示32位系统，noarch表示通用。。</p><h2 id="2-rpm包的其它查询指令"><a href="#2-rpm包的其它查询指令" class="headerlink" title="2.rpm包的其它查询指令"></a>2.rpm包的其它查询指令</h2><p> rpm -qa :查询所安装的所有rpm软件包 </p><p>rpm -qa | more </p><p>rpm -qa | grep X [rpm -qa | grep firefox ] </p><p>rpm -q 软件包名 :查询软件包是否安装 </p><p>rpm -q firefox </p><p>rpm -qi 软件包名 ：查询软件包信息</p><p>rpm -qi file</p><p>rpm -ql 软件包名 :查询软件包中的文件 </p><p>rpm -ql firefox </p><p>rpm -qf 文件全路径名 查询文件所属的软件包 </p><p>rpm -qf /etc/passwd </p><p>rpm -qf /root/install.log</p><h2 id="3-卸载rpm包"><a href="#3-卸载rpm包" class="headerlink" title="3.卸载rpm包"></a>3.卸载rpm包</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p>rpm -e RPM包的名称 </p><h3 id="2-应用案例"><a href="#2-应用案例" class="headerlink" title="2.应用案例"></a>2.应用案例</h3><ol><li>删除firefox 软件包 </li></ol><h3 id="3-细节讨论"><a href="#3-细节讨论" class="headerlink" title="3.细节讨论"></a>3.细节讨论</h3><ol><li>如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。 如： $ rpm -e foo </li></ol><p>removing these packages would break dependencies:foo is needed by bar-1.0-1 </p><ol start="2"><li>如果我们就是要删除 foo这个rpm 包，可以增加参数 –nodeps ,就可以强制删除，但是一 般不推荐这样做，因为依赖于该软件包的程序可能无法运行 </li></ol><p>如：$ rpm -e –nodeps foo </p><h2 id="4-安装rpm包"><a href="#4-安装rpm包" class="headerlink" title="4.安装rpm包"></a>4.安装rpm包</h2><h3 id="1-基本语法-1"><a href="#1-基本语法-1" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p>rpm -ivh RPM包全路径名称</p><h3 id="2-参数说明"><a href="#2-参数说明" class="headerlink" title="2.参数说明"></a>2.参数说明</h3><p>i=install 安装</p><p>v=verbose 提示 </p><p>h=hash 进度条</p><h3 id="3-应用实例"><a href="#3-应用实例" class="headerlink" title="3.应用实例"></a>3.应用实例</h3><ol><li>演示卸载和安装firefox浏览器</li></ol><h1 id="13-yum"><a href="#13-yum" class="headerlink" title="13.yum"></a>13.yum</h1><h2 id="1-介绍-2"><a href="#1-介绍-2" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>Yum 是一个Shell前端软件包管理器。基于RPM包管理，能够从指定 的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并 且一次安装所有依赖的软件包。 </p><h2 id="2-yum的基本指令"><a href="#2-yum的基本指令" class="headerlink" title="2.yum的基本指令"></a>2.yum的基本指令</h2><p>查询yum服务器是否有需要安装的软件 </p><p>yum list|grep xx软件列表</p><p>安装指定的yum包 </p><p>yum install xxx 下载安装 </p><h2 id="3-yum应用实例"><a href="#3-yum应用实例" class="headerlink" title="3.yum应用实例"></a>3.yum应用实例</h2><p>案例：请使用yum的方式来安装firefox</p><h1 id="14-JavaEE"><a href="#14-JavaEE" class="headerlink" title="14.JavaEE"></a>14.JavaEE</h1><h2 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h2><ol><li><p>下载jdk</p></li><li><p>解压到/opt目录下</p></li><li><p>在/etc/profile中配置环境变量</p><p>JAVA_HOME=/opt/jdk1.8.0_251<br>PATH=/opt/jdk1.8.0_251/bin:$PATH<br>export JAVA_HOME PATH</p></li><li><p>测试</p></li></ol><h2 id="2-安装Tomcat"><a href="#2-安装Tomcat" class="headerlink" title="2.安装Tomcat"></a>2.安装Tomcat</h2><ol><li>解压缩到/opt </li></ol><p>tar -zxvf apache-tomcat-9.0.36.tar.gz</p><p>2)启动tomcat ./startup.sh </p><ol><li>移动到bin目录下：cd apache-tomcat-9.0.36/bin</li></ol><ol start="3"><li>开放端口 vim /etc/sysconfig/iptables </li></ol><p>测试是否安装成功</p><p>使用浏览器打开<a href="http://localhost:8080/">http://localhost:8080/</a></p><p><strong>如没有/etc/sysconfig/iptables 文件</strong></p><p>安装iptables</p><pre class="line-numbers language-none"><code class="language-none">yum install -y iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>升级iptables</p><pre class="line-numbers language-none"><code class="language-none">yum update iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装iptables-services</p><pre class="line-numbers language-none"><code class="language-none">yum install iptables-services<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>iptables-services 和 iptables 是不一样的</p><p>安装了 services才有/etc/sysconfig/iptables</p><p>禁用/停止自带的firewalld服务</p><p>停止firewalld服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁用firewalld服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl mask firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-MySQL"><a href="#3-MySQL" class="headerlink" title="3.MySQL"></a>3.MySQL</h2><p><a href="https://www.cnblogs.com/kasnti/p/11929030.html#1647082937">截取自</a></p><h3 id="安装MySQL8-0"><a href="#安装MySQL8-0" class="headerlink" title="安装MySQL8.0"></a>安装MySQL8.0</h3><p>使用最新的包管理器安装MySQL</p><pre class="line-numbers language-none"><code class="language-none">Copysudo dnf install @mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启启动安装完成后，运行以下命令来启动MySQL服务并使它在启动时自动启动：</p><pre class="line-numbers language-none"><code class="language-none">Copysudo systemctl enable --now mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要检查MySQL服务器是否正在运行，请输入：</p><pre class="line-numbers language-none"><code class="language-none">Copysudo systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加密码及安全设置</p><p>运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p><pre class="line-numbers language-none"><code class="language-none">Copysudo mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>步骤如下：</p><ol><li>要求你配置VALIDATE PASSWORD component（验证密码组件）： 输入y ，回车进入该配置<ul><li>选择密码验证策略等级， 我这里选择0 （low），回车</li><li>输入新密码两次</li><li>确认是否继续使用提供的密码？输入y ，回车</li><li>移除匿名用户？ 输入y ，回车</li><li>不允许root远程登陆？ 我这里需要远程登陆，所以输入n ，回车<br><a href="https://img2018.cnblogs.com/blog/981325/201911/981325-20191126145030142-806823861.png"><img src="https://img2018.cnblogs.com/blog/981325/201911/981325-20191126145030142-806823861.png" alt="img"></a></li></ul></li><li>移除test数据库？ 输入y ，回车</li><li>重新载入权限表？ 输入y ，回车<br><a href="https://img2018.cnblogs.com/blog/981325/201911/981325-20191126145056520-234675009.png"><img src="https://img2018.cnblogs.com/blog/981325/201911/981325-20191126145056520-234675009.png" alt="img"></a></li></ol><p>配置远程登陆</p><p>如果需要设置root账户远程登陆，上一步骤中，<code>不允许root远程登陆？</code>这一步需要设为n。<br>接下来本机登录MySQL，将root用户的host字段设为’%’，意为接受root所有IP地址的登录请求：<br>本机登录MySQL:</p><pre class="line-numbers language-none"><code class="language-none">Copymysql -uroot -p&lt;上面步骤中设置的密码&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车后即可登录，接下来终端变成了<code>mysql&gt;</code>开头:<br><a href="https://img2020.cnblogs.com/blog/981325/202003/981325-20200306140614034-259035436.png"><img src="https://img2020.cnblogs.com/blog/981325/202003/981325-20200306140614034-259035436.png" alt="img"></a></p><p>接着继续执行mysql语句，将将root用户的host字段设为’%’：</p><pre class="line-numbers language-none"><code class="language-none">Copyuse mysql;update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置完成后输入exit退出mysql，回到终端shell界面，接着开启系统防火墙的3306端口：</p><pre class="line-numbers language-none"><code class="language-none">Copysudo firewall-cmd --add-port&#x3D;3306&#x2F;tcp --permanentsudo firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关闭MySQL主机查询dns</p><p>MySQL会反向解析远程连接地址的dns记录，如果MySQL主机无法连接外网，则dns可能无法解析成功，导致第一次连接MySQL速度很慢，所以在配置中可以关闭该功能。<br>打开<code>/etc/my.cnf</code>文件，添加以下配置：</p><pre class="line-numbers language-none"><code class="language-none">Copy[mysqld]skip-name-resolve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启服务</p><pre class="line-numbers language-none"><code class="language-none">Copysudo systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本机测试安装后，MySQL8.0默认已经是utf8mb4字符集，所以字符集不再修改</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="2020/09/18/JavaSE/"/>
      <url>2020/09/18/JavaSE/</url>
      
        <content type="html"><![CDATA[<p>​        Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 </p><a id="more"></a><h1 id="1-java入门"><a href="#1-java入门" class="headerlink" title="1.java入门"></a>1.java入门</h1><h2 id="1-java特性"><a href="#1-java特性" class="headerlink" title="1.java特性"></a>1.java特性</h2><p>简单性</p><p>面向对象</p><p>可移植性：write once,run anywhere一次编写，到处运行</p><p>高性能</p><p>分布式</p><p>动态性:通过反射</p><p>多线程</p><p>动态性</p><p>安全性</p><p>健壮性</p><h2 id="2-java三大版本"><a href="#2-java三大版本" class="headerlink" title="2.java三大版本"></a>2.java三大版本</h2><p>JavaSE:标准版</p><p>JavaME:嵌入式开发（手机、家电…）</p><p>JavaEE:企业级开发</p><h2 id="3-JDK、JRE、JVM"><a href="#3-JDK、JRE、JVM" class="headerlink" title="3.JDK、JRE、JVM"></a>3.JDK、JRE、JVM</h2><p><strong>JDK:java Development Kit</strong></p><p>java开发者工具：包括JRE和JVM</p><p><strong>JRE:Java Runtime Environment</strong></p><p>java运行环境：包括JVM</p><p><strong>JVM:Java Virtual Machine</strong></p><p>java虚拟器</p><h2 id="4-JAVA环境搭建"><a href="#4-JAVA环境搭建" class="headerlink" title="4.JAVA环境搭建"></a>4.JAVA环境搭建</h2><h4 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h4><p>1.下载JDK</p><p>2.安装JDK</p><p>3.配置环境变量</p><p>JAVA_HOME:JDK安装位置</p><p>Path:%JAVA_HOME%\bin</p><p>​          %JAVA_HOME%\jre\bin</p><p>4.检查：cmd:java -version查看JDK信息</p><h4 id="2-卸载JDK"><a href="#2-卸载JDK" class="headerlink" title="2.卸载JDK"></a>2.卸载JDK</h4><p>删除JDK安装目录，清理环境变量</p><p>cmd中java -version检查</p><h1 id="2-JAVA语法"><a href="#2-JAVA语法" class="headerlink" title="2.JAVA语法"></a>2.JAVA语法</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h2><p><strong>单行注释：</strong>//</p><p><strong>多行注释：</strong></p><blockquote><p>/*</p><p>多行注释 </p><p>*/</p></blockquote><p><strong>文档注释JavaDoc：</strong></p><blockquote><p>/**</p><p>​    * 可以添加变量</p><p>*/</p></blockquote><p>有趣的代码注释</p><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h2><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>assert</td><td>boolean</td><td>break</td><td>byte</td><td>case</td><td>catch</td><td>char</td><td>class</td><td>const</td></tr><tr><td>continue</td><td>default</td><td>double</td><td>else</td><td>enum</td><td>extends</td><td>final</td><td>finally</td><td>float</td><td>goto</td></tr><tr><td>implements</td><td>import</td><td>instanceof</td><td>int</td><td>interface</td><td>long</td><td>native</td><td>new</td><td>cage</td><td>protected</td></tr><tr><td>public</td><td>return</td><td>stricti</td><td>short</td><td>static</td><td>super</td><td>switch</td><td>synchronized</td><td>this</td><td>th</td></tr><tr><td>throws</td><td>transient</td><td>try</td><td>volatle</td><td>while</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>1.所有的标识符都应该以字母（Az或者a-z），美元符（$）、或者下划线（）开始<br>2.首字符之后可以是字母（Az或者a-z），美元符（$）、下划线（）或数字的任何字符组合<br>3.不能使用关键字作为变量名或方法名。<br>4.标识符是大小写敏感的<br>合法标识符举例：age、$ salary、 value、1 value<br>非法标识符举例：123abc、- salary、#abc</p><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h2><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><h6 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h6><p>1.byte:占1个字节范围</p><p>2.short:占2个字节范围</p><p>3.int:占4个字节范围</p><p>4.long:占8个字节范围</p><h6 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h6><p>1.float:占4个字节范围</p><p>2.double:占8个字节范围</p><h5 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h5><p>char:占2个字节范围</p><h5 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h5><p>boolean:占1个字节范围,取值只有true和false     </p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>1.类</p><p>2.接口</p><p>3.数组</p><h4 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h4><p>8个基本类型+String</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><h6 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h6><p>由高转到低需要强制转换：（类型） 变量名</p><h6 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h6><p>由低到高转换，可直接转换</p><h6 id="转换注意"><a href="#转换注意" class="headerlink" title="转换注意"></a>转换注意</h6><p>1.避免内存溢出</p><p>2.不能对boolean类型进行转换</p><p>3.不能转换为不相干的类型</p><p>4.会出现精度变换问题</p><p>5.不同类型之间进行计算要先将所有数据类型转换为可用的同一类型</p><h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h2><h3 id="变量基本知识"><a href="#变量基本知识" class="headerlink" title="变量基本知识"></a>变量基本知识</h3><p>1.变量：可变化的量</p><p>2.每个变量都需要有数据类型，变量名必须是合法的标识符。</p><p>3.定义变量需要以分号结束。</p><p>4.可以一次定义多个同一类型变量但，不建议使用</p><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><p>定义变量是需要添加static</p><p>在本类中可直接使用</p><h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><p>在类中直接定义，通过类使用</p><p>不赋值也能使用，会使用默认值</p><p>整型为0，小数型为0.0，boolean类型 为false,其他类型为null</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在方法中定义，只能在本方法中使用</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>用fanil定义，不可改变，常量名一般用大写</p><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>1.所有变量、方法、类名：见名知意<br>2.类成员变量：首字母小写和驼峰原则： monthsalary<br>3.局部变量：首字母小写和驼峰原则<br>4.常量：大写字母和下划线： MAX VALUE<br>5.类名：首字母大写和驼峰原则：Man， Good Man<br>6.方法名：首字母小写和驼峰原则：runO， run run0</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>算术运算符：+，-，*，/，%，++，–<br>赋值运算符=<br>关系运算符：&gt;,&lt;,&gt;=,&lt;=,==,!=instanceof<br>逻辑运算符：&amp;&amp;，‖，！<br>位运算符：&amp;，|，…<br>条件运算符？ :</p><p>条件 ? 选择一：选择二；  条件为true,取选择一，否则取二</p><p>扩展赋值运算符：+=,-=</p><p><strong>数字类型相加时如果出现加String类型，这个运算会变为字符串的连接。</strong></p><p>幂次方：math.pow(a,b):a的b次方</p><h1 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3.流程控制"></a>3.流程控制</h1><h2 id="1-用户交互Scanner"><a href="#1-用户交互Scanner" class="headerlink" title="1.用户交互Scanner"></a>1.用户交互Scanner</h2><p><strong>1.获取Scanner对象</strong>（属于IO流）</p><p>Scanner scanner=new Scanner(System.in);</p><p><strong>2.使用Scanner对象接受用户传入数据</strong></p><p>数据类型  变量名=scanner.next();</p><p><strong>3.关于Scanner的方法</strong></p><p><strong>scanner.next()</strong>:获取输入的内容，一定要读取到有效字符后才可以结束输入，对输入有效字符之前遇到的空白next（）方法会自动将其去掉。只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。，next（）不能得到带有空格的字符串。</p><p>**scanner.nextLine()**：以 Enter为结束符也就是说 nextLineo方法返回的是输入回车之前的所有字符。可以获得空白。</p><p>获取数值类型变量：scanner.nextInt() 、scanner.nextFloat()、scanner.nextDouble()….</p><p>String类型一般使用next()、nextLine()</p><p><strong>scanner.hasNext()</strong>:判断是否有下一个输入内容，返回值为boolean类型</p><p>hasNextInt()、hasNextFloat()….判断是否有下一个符合要求的输入内容</p><p>scanner.hasNextLine();是否有下一行输入内容</p><p>**scanner.close()**：使用完之后关闭,以节省资源</p><h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h2><p>自上而下依次执行</p><h2 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h2><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><h4 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    条件表达式结果为<span class="token boolean">true</span>执行内容，为<span class="token boolean">false</span>则跳过<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    条件表达式结果为<span class="token boolean">true</span>执行内容<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    为<span class="token boolean">false</span>执行内容<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    条件表达式<span class="token number">1</span>结果为<span class="token boolean">true</span>执行内容<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    条件表达式<span class="token number">2</span>结果为<span class="token boolean">true</span>执行内容<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    以上条件表达式都不满足时执行内容<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="嵌套if结构"><a href="#嵌套if结构" class="headerlink" title="嵌套if结构"></a>嵌套if结构</h4><p>多个if语句嵌套使用</p><h3 id="switch选择结构"><a href="#switch选择结构" class="headerlink" title="switch选择结构"></a>switch选择结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>匹配内容<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//从JDK1.7开始switch可比较字符串</span>        <span class="token keyword">case</span><span class="token operator">:</span>匹配内容的结果        执行语句        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span><span class="token operator">:</span>匹配内容的结果        执行语句        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>        执行语句<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    循环内容    如果布尔表达式结果为<span class="token boolean">true</span><span class="token punctuation">,</span>再次执行改内容，为<span class="token boolean">false</span><span class="token punctuation">,</span>则跳过执行改内容<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="do-While循环"><a href="#do-While循环" class="headerlink" title="do While循环"></a>do While循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    循环内容<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>while与do while的区别</strong></p><p>while只有当布尔表达式为true时才会执行，而do while不论布尔表达式结果是否为true都会先执行以西，如若布尔表达式结果为false，执行一次后不再执行。</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>最有效最流行的循环方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化内容（可为空）<span class="token punctuation">;</span>布尔表达式<span class="token punctuation">;</span>更新内容<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    循环内容 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句<span class="token operator">:</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    循环内容<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-break和coutinue"><a href="#5-break和coutinue" class="headerlink" title="5.break和coutinue"></a>5.break和coutinue</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break在任何循环语句的主体部分，均可用 break控制循环的流程。 break用于强行退岀循环，<br>不执行循环中剩余的语句。（ break语句也在 switch语句中使用）</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，<br>接着进行下一次是否执行循环的判定</p><h1 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h1><h2 id="1-方法的定义"><a href="#1-方法的定义" class="headerlink" title="1.方法的定义"></a>1.方法的定义</h2><p><strong>1.定义：</strong>java方法是语句的集合，它们在一起执行一个功能。方法是解决一类问题的步骤的有序组</p><p><strong>2.方法的调用：</strong>方法包含于类或对象中，方法在程序中被创建，在其他地方被引用。</p><p>​                          格式：对象名.方法名（参数）</p><p><strong>3.设计方法的原则：</strong>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的<br>                               时候，最好保持方法的原子性。</p><p><strong>4.方法的原子性：</strong>一个方法只完成1个功能，便于以后组合使用。</p><p><strong>5.方法的结构：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    方法体    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法包含一个方法头和一个方法体。一个方法包括以下内容</p><ol><li><p>修饰符（可选）：告诉编译器如何调用该方法。定义了该方法的访问类型</p></li><li><p>返回值类型：如果方法没有返回值，则使用void。如方法有返回值类型，则需要在方法中返回一                    个对应类型的数据（return  数据;）</p></li><li><p>方法名：是方法的实际名称。方法名和参数表共同构成方法签名</p></li><li><p>参数（可选）：一个方法可以包含多个参数，当有参数的方法被调用时，需要传递参数对应类型的值给参数。且参数类型顺序需严格保持一致</p><p>◆形式参数：在方法被调用时用于接收外界输入的数据。<br>◆实参：调用方法时实际传给方法的数据。<br>◆方法体：方法体包含具体的语句，定义该方法的功能。</p></li></ol><h2 id="2-方法的分类"><a href="#2-方法的分类" class="headerlink" title="2.方法的分类"></a>2.方法的分类</h2><h3 id="1-静态方法"><a href="#1-静态方法" class="headerlink" title="1.静态方法"></a>1.静态方法</h3><p>需要添加static关键字</p><p>在使用静态方法时可以通过类名.方法名直接调用</p><h3 id="2-非静态方法"><a href="#2-非静态方法" class="headerlink" title="2.非静态方法"></a>2.非静态方法</h3><p>不用添加static关键字</p><p>在使用时需要通过实例化类的对象，通过对象.方法调用</p><h2 id="3-方法的重载"><a href="#3-方法的重载" class="headerlink" title="3.方法的重载"></a>3.方法的重载</h2><p><strong>重载的定义：</strong>重载就是在一个类中，有相同的函数名称，但形参不同的函数。<br><strong>方法的重载的规则：</strong></p><ol><li>方法名称必须相同。</li><li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ol><p><strong>实现理论：</strong><br>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对<br>应的方法，如果匹配失败，则编译器报错。</p><h2 id="4-参数"><a href="#4-参数" class="headerlink" title="4.参数"></a>4.参数</h2><h3 id="1-参数的形式"><a href="#1-参数的形式" class="headerlink" title="1.参数的形式"></a>1.参数的形式</h3><p>在方法声明中，在指定参数类型后加一个省略号（…）。<br>一个方法中<a href="">只能指定一个可变参数，它必须是方法的最后一个参数。</a>任何普通的参数必须在它<br>之前声明。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public void test(... , int...no)&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用时可传递任意个数可变参数类型的参数，相当于一个长度可变的数组参数</p><h3 id="2-形参"><a href="#2-形参" class="headerlink" title="2.形参"></a>2.形参</h3><p>方法定义时的参数</p><h3 id="3-实参"><a href="#3-实参" class="headerlink" title="3.实参"></a>3.实参</h3><p>调用方法时传入的有确定值的参数</p><p>实参要与形参数据类型保持一致</p><h2 id="5-递归"><a href="#5-递归" class="headerlink" title="5.递归"></a>5.递归</h2><p><strong>递归：</strong>A方法调用A方法！就是自己调用自己<br>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为<br>一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述岀解题过程所<br>需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象<br>的无限集合。<br><strong>递归结构包括两个部分：</strong><br>◆递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。<br>◆递归体：什么时候需要调用自身方法</p><p>例：求n!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">x</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归会占用大量资源，不建议使用。</p><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h1><h2 id="1-数组的定义"><a href="#1-数组的定义" class="headerlink" title="1.数组的定义"></a>1.数组的定义</h2><h3 id="1-数组的概念"><a href="#1-数组的概念" class="headerlink" title="1.数组的概念"></a>1.数组的概念</h3><p>数组是相同类型数据的有序集合，数组描述的是相同类型的若千个数据按照一定的先后次序排列组合而成</p><h3 id="2-数组的调用"><a href="#2-数组的调用" class="headerlink" title="2.数组的调用"></a>2.数组的调用</h3><p>其中每一个数据称作一个数组元素每个数组元素可以通过一个下标来访问它们。</p><h2 id="2-数组的创建"><a href="#2-数组的创建" class="headerlink" title="2.数组的创建"></a>2.数组的创建</h2><h3 id="1-数组的声明"><a href="#1-数组的声明" class="headerlink" title="1.数组的声明"></a>1.数组的声明</h3><p>数组类型[] 数组名;                推荐</p><p>数组类型   数组名[]               不推荐 </p><h3 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2.创建数组"></a>2.创建数组</h3><p>数组名=new 数组类型 [ 数组长度 ]；</p><p><strong>可以将数组的声明与创建同时定义</strong></p><p>数组类型[] 数组名=new 数组类型 [ 数组长度 ]；</p><h3 id="3-数组的使用"><a href="#3-数组的使用" class="headerlink" title="3.数组的使用"></a>3.数组的使用</h3><p><strong>数组的下标是从0开始的，下标为0的元素为数组的第一个数据。</strong></p><p><strong>在为数组赋值与使用数组时，下标都不能大于数组长度-1，否则会出现下标越界异常</strong>(ArrayIndexOutOfBoundsException)。</p><h4 id="1-为数组赋值"><a href="#1-为数组赋值" class="headerlink" title="1.为数组赋值"></a>1.为数组赋值</h4><p>数组名 [ 下标 ]=数值；</p><h4 id="2-使用数组"><a href="#2-使用数组" class="headerlink" title="2.使用数组"></a>2.使用数组</h4><p>数组名 [ 下标 ]</p><h3 id="4-其他数组定义方式"><a href="#4-其他数组定义方式" class="headerlink" title="4.其他数组定义方式"></a>4.其他数组定义方式</h3><p><strong>静态初始化</strong></p><p>数组类型  [] 数组名={数据2，数据2，…  };</p><h2 id="3-数组的特点"><a href="#3-数组的特点" class="headerlink" title="3.数组的特点"></a>3.数组的特点</h2><ol><li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li><li>其元素必须是相同类型不允许出现混合类型。</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</li><li>数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的。</li></ol><h2 id="4-二维数组"><a href="#4-二维数组" class="headerlink" title="4.二维数组"></a>4.二维数组</h2><p><strong>格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">数据类型  数组名<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span> 长度<span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> 长度<span class="token number">2</span> <span class="token punctuation">]</span>；<span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span>y <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> z<span class="token punctuation">,</span>c <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span>f <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">,</span>yarray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>xarray<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多维数组以此类推</p><h2 id="5-Arrays类"><a href="#5-Arrays类" class="headerlink" title="5.Arrays类"></a>5.Arrays类</h2><p>1.Arrays.toString(数组); 打印该数组</p><p>2.Arrays.sort(数组);最数组进行重新排序（升序）</p><p>3.Arrays.fill(数组,值)； 填充数组，将数组所有的值赋值为参数的值； </p><h1 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6.面向对象"></a>6.面向对象</h1><p>面向对象编程（ Object-Oriented Programming，ooP）</p><p>Java的核心思想为面向对象</p><h2 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h2><h3 id="面向过程思想"><a href="#面向过程思想" class="headerlink" title="面向过程思想"></a>面向过程思想</h3><p>◆步骤清晰简单，第一步做什么，第二步做什么<br>◆面对过程适合处理一些较为简单的问题</p><h3 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</p><h4 id="2-优势"><a href="#2-优势" class="headerlink" title="2.优势"></a>2.优势</h4><p>面向对象适合处理复杂的问题，适合处理需要多人协作的向问题！</p><p>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</p><h4 id="3-面向对象编程的本质"><a href="#3-面向对象编程的本质" class="headerlink" title="3.面向对象编程的本质"></a>3.面向对象编程的本质</h4><p>以类的方式组织代码，以对象的组织封装）数据。</p><h4 id="4-面向对象的三大特性"><a href="#4-面向对象的三大特性" class="headerlink" title="4.面向对象的三大特性"></a>4.面向对象的三大特性</h4><p>◆封装<br>◆继承<br>◆多态</p><h2 id="2-类与对象的关系"><a href="#2-类与对象的关系" class="headerlink" title="2.类与对象的关系"></a>2.类与对象的关系</h2><h3 id="1-类的概念"><a href="#1-类的概念" class="headerlink" title="1.类的概念"></a>1.类的概念</h3><p>类是一种抽象的数据类型，它是对某一类事物整体描述/定义但是并不能代表某一个具体的事物<br>◆动物、植物、手机、电脑。…<br>◆ Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</p><h3 id="2-对象的概念"><a href="#2-对象的概念" class="headerlink" title="2.对象的概念"></a>2.对象的概念</h3><p>对象是抽象概念的具体实例</p><p><strong>对象是通过引用来调用的</strong></p><p>◆张三就是人的一个具体实例张三家里的旺财就是狗的一个具体实例。<br>◆能够体现出特点，展现出功能的是具体的实例而不是一个抽象的概念。</p><p>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象<br>从代码运行角度考虑是先有类后有对象。类是对象的模板。</p><p><strong>类是模板，对象是具体实例</strong></p><h2 id="3-创建与初始化对象"><a href="#3-创建与初始化对象" class="headerlink" title="3.创建与初始化对象"></a>3.创建与初始化对象</h2><h3 id="创建对象的要求"><a href="#创建对象的要求" class="headerlink" title="创建对象的要求"></a><strong>创建对象的要求</strong></h3><p><strong>使用new关键字创建对象</strong></p><p><strong>必须有构造器</strong></p><p>使用new关键字创建的时候，除了分配內存空间之外，还会给刨建好的对象进行默认的初始化以及对类中构造器的调用。<br>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a><strong>构造器</strong></h3><p><strong>构造器（构造方法）有以下两个特点</strong>：<br>◆1.必须和类的名字相同<br>◆2.必须没有返回类型也不能写void</p><p>每个类都有一个构造方法，用于创建对象。</p><p>使用new 创建对象的本质就是调用构造方法创建对象。</p><p>构造方法中this代表本类，this.属性代表本类中的这个属性。</p><p>每个方法都默认都有一个无参构造方法，但如果在类中定义有参构造方法后，默认的无参构造方法就会失效，需要自己重新定义。</p><p><strong>通过对象.方法/属性调用方法或属性。</strong></p><h2 id="4-面向对象三大基本特征"><a href="#4-面向对象三大基本特征" class="headerlink" title="4.面向对象三大基本特征"></a>4.面向对象三大基本特征</h2><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h3><p><strong>设计程序追求</strong>：“高内聚，低耦合”.高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用。</p><p><strong>封装的意义</strong></p><p>应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</p><p><strong>如何实现</strong></p><p>通过将属性或方法的修饰符设置为private，从而实现数据的封装。</p><p>可以在set方法中直接添加限制，从而实现对设置数据的限制</p><p>例：直接在set方法中添加限制，从而实现设置年龄时只能设置合理的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">||</span> age<span class="token operator">&lt;</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装的好处</strong></p><p>1.提高了程序的安全性，保护数据；</p><p>2.隐藏代码的实现细节；</p><p>3.统一接口；</p><p>4.增加了系统的可维护性；</p><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>继承是类和类之间的一种关系。本质是对某一批类的抽象，从而实现对现实世界更好的建模。</p><p>除此之外类和类之间的关系还有依赖、组合、聚合等</p><p>继承使用关键字：extends；意思是“扩展”.代表子类是父类的扩展</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-重写"><a href="#2-重写" class="headerlink" title="2.重写"></a>2.重写</h4><p>子类继承父类就会拥有父类的全部属性和方法；通过子类对象可以直接调用父类方法（前提为方法或属性的修饰符为public）。如果在子类中有与父类方法名与参数相同的方法，调用时则会调用子类中的方法。这种情况被称为<strong>重写</strong>。</p><p><strong>关键字super</strong>:代表父类</p><p>使用super可以调用父类的属性和方法（前提为方法或属性的修饰符为public）。</p><p>super.属性/方法</p><p>子类的构造方法默认有一个隐藏的super()，位于构造方法的第一行，代表继承父类的构造方法。在使用构造方法创建子类对象的同时调用父类构造方法，从而实现子类对象可以使用父类的属性和方法。</p><p>父类如果没有无参构造方法，那子类的无参构造方法无法继承父类的构造方法，从而创建无参构造方法失败。</p><p><strong>关键字this：</strong>代表本类</p><p>使用super可以调用子类的属性和方法</p><p><strong>重写</strong></p><p><strong>重写的条件</strong></p><ol><li><p>需要有继承关系，子类中可以有重写</p></li><li><p>方法不能为私有（private）方法</p></li><li><p>方法为非静态方法</p></li><li><p>参数列表与方法名必须相同</p></li></ol><p>子类与父类方法方法名与方法参数相同时静态方法（stastic）与非静态方法的区别：</p><p>静态方法</p><p>使用子类创建子类对象，用子类对象调用该方法，被调用的为子类中的方法。</p><p>使用父类创建子类对象，用子类对象调用该方法，被调用的为父类中的方法。</p><p><strong>这种不属于方法的重写</strong></p><p>非静态方法</p><p>无论使用子类创建子类对象，还是使用父类创建子类对象，使用子类调用被重写的方法，被调用的都是在子类中重写后的方法。</p><h4 id="3-Java继承特点"><a href="#3-Java继承特点" class="headerlink" title="3.Java继承特点"></a>3.Java继承特点</h4><p>1.<strong>JAVA中类只有单继承，没有多继承，但是可以进行多层继承</strong></p><p>2.子类继承父类就会拥有父类的全部属性和方法，通过子类对象可以直接调用父类中修饰符为public的方法和属性。如果在子类中有与父类方法名与参数相同的方法，调用时则会调用子类中的方法。这种情况被称为<strong>重写</strong>。</p><p>3.<strong>父类中私有的属性及方法无法被子类继承</strong></p><p>4.<strong>在JAVA中所有的类都默认直接或间接继承Object类。</strong></p><p>5.父类如果没有无参构造方法，那子类的无参构造方法无法继承父类的构造方法，从而创建无参构造方法失败。</p><p>6.继承中变量的访问顺序</p><ol><li>子类局部变量</li><li>子类成员变量</li><li>父类成员变量</li></ol><p>7.继承中方法的访问顺序</p><ol><li>子类范围</li><li>父类范围</li></ol><p>8.<strong>子类中所有的构造方法默认都会访问父类中无参的构造方法</strong>，如果父类中没有无参构造方法，则子类中不能创建也没有无参构造方法。且需重写父类中的有参构造方法。</p><p>​    子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，每一个子类构造方法的第一条语句默认都是：super()。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img5/image-20210125145437360.png" alt="image-20210125145437360"></p><h4 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3.优缺点"></a>3.优缺点</h4><p><strong>优点：</strong>提高了代码的复用性以及可维护性。</p><p><strong>缺点：</strong>降低了代码的灵活性，增加了类与类之间的耦合性。</p><p>​             继承具有侵入性，子类一定会继承父类中修饰符为public的属性和方法。</p><h4 id="4-关键字super"><a href="#4-关键字super" class="headerlink" title="4.关键字super"></a>4.关键字super</h4><p>代表父类存储空间的标识(可以理解为父类对象引用)。</p><p>使……….用super可以调用父中修饰符为public的属性和方法。</p><p><strong>格式：</strong>super.属性/方法</p><h4 id="5-关键字this"><a href="#5-关键字this" class="headerlink" title="5.关键字this"></a>5.关键字this</h4><p>代表本类对象的引用</p><p>使用this可以调用本类中的属性和方法</p><p><strong>格式：</strong>this.属性/方法</p><h4 id="6-重写"><a href="#6-重写" class="headerlink" title="6.重写"></a>6.重写</h4><h5 id="重写的概念"><a href="#重写的概念" class="headerlink" title="重写的概念"></a>重写的概念</h5><p>子类中出现与父类中方法名、参数列表完全相同的方法。</p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>子类中用到了父类的方法，但又需要对父类中的方法进行改进。</p><h5 id="重写的条件"><a href="#重写的条件" class="headerlink" title="重写的条件"></a>重写的条件</h5><ol><li><p>在子类中进行重写父类的方法。</p></li><li><p>方法不能为私有（private）方法。</p></li><li><p>方法为非静态方法。</p></li><li><p>参数列表与方法名必须相同。</p></li></ol><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>1.不能对父类中的私有方法进行重写。</p><p>2.重写时，权限修饰符不能低于父类中的权限范围。</p><p>3.静态方法不能进行重写，与父类中方法名、参数列表完全相同的静态方法方法并不是重写。</p><blockquote><p>子类与父类方法方法名与方法参数相同时静态方法（stastic）与非静态方法的区别：</p><p>静态方法</p><p>使用子类创建子类对象，用子类对象调用该方法，被调用的为子类中的方法。</p><p>使用父类创建子类对象，用子类对象调用该方法，被调用的为父类中的方法。</p><p><strong>这种不属于方法的重写</strong></p><p>非静态方法</p><p>无论使用子类创建子类对象，还是使用父类创建子类对象，使用子类调用被重写的方法，被调用的都是在子类中重写后的方法。</p></blockquote><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3.多态"></a>3.多态</h3><h4 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a><strong>1.定义</strong></h4><p>同一方法可以根据发送对象的不同而采用多种不同的行为方式。<br>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</p><h4 id="2-多态存在的条件"><a href="#2-多态存在的条件" class="headerlink" title="2.多态存在的条件"></a><strong>2.多态存在的条件</strong></h4><ol><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ol><p>一个对象的实际类型是确定的（new 的对象），但指向对象可以有多个</p><p>如父类创建子类对象</p><p>子类对象可以调用子类的方法或继承父类的方法</p><p>但父类对象可以指向子类，但不能调用子类的方法，只能强转为子类对象。</p><h4 id="3-表现形式"><a href="#3-表现形式" class="headerlink" title="3.表现形式"></a>3.表现形式</h4><ol><li><p>接口和接口的继承。</p></li><li><p>类和类的继承。</p></li><li><p>重载。</p></li><li><p>重写。</p></li></ol><h4 id="4-成员访问"><a href="#4-成员访问" class="headerlink" title="4.成员访问"></a>4.成员访问</h4><ol><li><p>成员变量</p><p>编译运行都看父类</p></li><li><p>成员方法</p><p>编译看父类，运行看子类</p></li></ol><h4 id="5-转型"><a href="#5-转型" class="headerlink" title="5.转型"></a>5.转型</h4><ul><li><p>向上转型</p><p>​    父类引用指向子类对象就是向上转型</p></li><li><p>向下转型</p><p>​    格式：子类型 对象名 = (子类型)父类引用;</p></li></ul><h4 id="6-instanceof关键字"><a href="#6-instanceof关键字" class="headerlink" title="6.instanceof关键字"></a>6.instanceof关键字</h4><p>判断关键字左边的变量，是否是右边的类型，返回boolean类型结果</p><p>格式  对象1 instanceof 类    </p><p>返回值为boolean类型</p><h2 id="5-static关键字"><a href="#5-static关键字" class="headerlink" title="5.static关键字"></a>5.static关键字</h2><p><strong>作用：</strong>Java中的一个修饰符,用于修饰成员方法,成员变量。将属性或方法变为静态属性或方法。</p><p><strong>被static修饰的属性、方法的特点</strong></p><p>1.被类的所有对象共享</p><p>2.随着类的加载而加载，优先于对象存在，对象需要类被加载后，才能创建</p><p>3.可以通过类名调用，也可以通过对象名调用</p><p>4.静态方法只能访问静态的成员</p><p>5.非静态方法可以访问静态的成员，也可以访问非静态的成员</p><p>6.static修饰的方法，属性在类加载时被加载，此时没有对象，所以，static方法中，不可以使用this关键字调用。</p><p><strong>static方法内部为什么不可以调用非static方法或属性？</strong> </p><p>static方法随着类的加载而加载，优先于对象存在；当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法无法关联到对象上。</p><p><strong>静态代码块</strong></p><p>直接在类中添加static{   },可以在类加载时直接加载（且首先加载，只执行一次），一般用于添加一些初始化数据。</p><p><strong>静态导入包</strong></p><p>可以直接调用导入的类中的方法，不需要通过对象调用。</p><p><strong>一个类的所有对象共享一个类中的静态变量。</strong></p><h2 id="6-final"><a href="#6-final" class="headerlink" title="6.final"></a>6.final</h2><p>用于修饰类、方法、属性</p><p>修饰类表示类不可继承</p><p>修饰方法表示方法不可重写</p><p>修饰属性表示属性不可改变</p><blockquote><p>属性是基本类型表示属性值不可变。</p><p>属性是引用类型表示引用地址不可变，但内存地址中的内容可以改变。</p></blockquote><h2 id="7-抽象类与接口"><a href="#7-抽象类与接口" class="headerlink" title="7.抽象类与接口"></a>7.抽象类与接口</h2><h3 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1.抽象类"></a>1.抽象类</h3><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>含有abstract修饰符的class即为抽象类。</p><p>子类使用extends关键字继承抽象类</p><h4 id="1-2-特征与注意事项"><a href="#1-2-特征与注意事项" class="headerlink" title="1.2 特征与注意事项"></a>1.2 特征与注意事项</h4><ol><li><p>不能实例化；</p></li><li><p>可以有构造方法；</p></li><li><p>存在抽象方法的类一定是抽象类；</p></li><li><p>抽象类中可以有抽象方法，也可以有非抽象方法，可以有静态方法；</p></li><li><p>抽象方法使用abstract关键字定义，只有方法名，没有方法体。</p></li><li><p>继承抽象类的子类需要重写抽象类的所有抽象方法（除非子类是抽象类）；</p></li><li><p>abstract不能与private、static及final共同使用</p></li></ol><h4 id="1-3-使用场景"><a href="#1-3-使用场景" class="headerlink" title="1.3 使用场景"></a>1.3 使用场景</h4><p>两个对象有相同的特征。</p><h3 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>接口就规范，是一组定义。实现interface创建。</p><p>子类使用implements关键字实现</p><h4 id="2-2-成员特点"><a href="#2-2-成员特点" class="headerlink" title="2.2 成员特点"></a>2.2 成员特点</h4><ol><li><p>接口中的所有方法都是抽象的(public abstract,可以省略)。只有方法，没有实现。</p></li><li><p>接口中定义的属性都是常量（public static final）(但不建议)。</p></li><li><p>接口都需要实现类，通过implements关键字，实现类一般以Impl结尾。</p></li><li><p>实现了接口(除非子类为抽象类)就需要重写接口中的所有类。</p></li><li><p>所有方法默认使用public abstract修饰。</p></li><li><p>JDK8之后，java允许在接口中定义默认方法，允许方法有方法体，使用<code>default</code>关键字。默认方法不强制实现类重写此方法（可重写，重写时不写<code>deafult</code>），实现类对象可直接使用默认方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">testDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>如果一个类实现的多个接口中有相同的默认方法，则在实现类中必须对此方法进行重写。</p></li><li><p>JDK8中还添加了静态方法（有方法体），该方法只能通过接口名调用，不能通过接口实现类对象调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="9"><li><p><code>default</code>与<code>static</code>不能同时使用。</p></li><li><p>JDK9中添加了私有方法，供接口中的默认方法及静态方法提取公共方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是私有方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//为了提供给静态方法调用，可以使用static修饰</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是私有方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="11"><li></li></ol><h4 id="2-3使用场景"><a href="#2-3使用场景" class="headerlink" title="2.3使用场景"></a>2.3使用场景</h4><p>两个对象有相同的行为特征</p><h3 id="3-两者对比"><a href="#3-两者对比" class="headerlink" title="3.两者对比"></a>3.两者对比</h3><table><thead><tr><th align="center"></th><th align="center">抽象类</th><th align="center">接口</th></tr></thead><tbody><tr><td align="center">构造方法</td><td align="center">可以有</td><td align="center">不能有</td></tr><tr><td align="center">定义关键字</td><td align="center">abstract class</td><td align="center">interface</td></tr><tr><td align="center">使用关键字</td><td align="center">extends</td><td align="center">implements</td></tr><tr><td align="center">抽象方法</td><td align="center">抽象/非抽象方法</td><td align="center">必须是抽象</td></tr><tr><td align="center">静态方法</td><td align="center">可以包含</td><td align="center">不能包含(JDK8之后可以)</td></tr><tr><td align="center">方法修饰符</td><td align="center">public，protected</td><td align="center">public（JDK9之后可以使用private）</td></tr><tr><td align="center">普通成员变量</td><td align="center">可以有</td><td align="center">不能有</td></tr><tr><td align="center">静态变量</td><td align="center">可以包含</td><td align="center">只能是public static final类型</td></tr><tr><td align="center">继承实现</td><td align="center">单继承</td><td align="center">多实现</td></tr></tbody></table><h3 id="4-两者之间"><a href="#4-两者之间" class="headerlink" title="4.两者之间"></a>4.两者之间</h3><p>接口可以继承接口。</p><p>抽象类可以实现(implements)接口</p><p>抽象类可以继承实体类，但前提是实体类必须有明确的构造函数。</p><p>抽象类中可以有静态的main方法。</p><p>一个类继承的父类与实现的接口如果有相同的方法生命，则优先使用父类中的方法逻辑。</p><h2 id="8-内部类"><a href="#8-内部类" class="headerlink" title="8.内部类"></a>8.内部类</h2><h3 id="1-普通内部类"><a href="#1-普通内部类" class="headerlink" title="1 普通内部类"></a>1 普通内部类</h3><p>在一个类中再次创建一个类，与成员在一级的是成员内部类。</p><p>创建内部类对象<code>外部类类名.内部类类名 对象名=new 外部类类名().new 内部类类名</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个成员内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建对象</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token class-name">Inner</span> inner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-私有成员内部类"><a href="#2-私有成员内部类" class="headerlink" title="2 私有成员内部类"></a>2 私有成员内部类</h3><p>修饰符为private的内部类，需要在外部类中添加方法去使用私有内部类。</p><p>且无法通过在外部类方法中返回私有成员内部类的方式获取其对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer<span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是私有成员内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3静态成员内部类"><a href="#3静态成员内部类" class="headerlink" title="3静态成员内部类"></a>3静态成员内部类</h3><p>静态成员内部类创建对象的方式为<code>外部类.内部类 对象名=new 外部类.内部类()</code></p><p>静态成员内部类中静态方法的调用方法为<code>外部类.内部类.静态方法名()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token class-name">StaticInner</span> inner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token class-name">StaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token class-name">StaticInner</span><span class="token punctuation">.</span><span class="token function">staticShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是静态成员内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是静态成员内部类静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-局部内部类"><a href="#4-局部内部类" class="headerlink" title="4 局部内部类"></a>4 局部内部类</h3><p>局部内部类是在方法中定义的类，作用范围为方法内，所以外界是无法直接使用，需要在方法内部创建对象并使用<br> 该类可以直接访问外部类的成员，也可以访可方法内的局部变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个局部内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-匿名内部类"><a href="#5-匿名内部类" class="headerlink" title="5. 匿名内部类"></a>5. 匿名内部类</h3><p>没有名字的内部类，不会生成.class文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内名内部类"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-内部类特点"><a href="#6-内部类特点" class="headerlink" title="6 内部类特点"></a>6 内部类特点</h3><p>1.封装性，隐藏不需要外部访问的内容。</p><p>2.一个内部类对象也可以访问创建它的外部类对象的私有内容。</p><p>3.静态内部类调用私有属性时，只能引用静态成员。</p><h1 id="7-异常"><a href="#7-异常" class="headerlink" title="7.异常"></a>7.异常</h1><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRThrowable --&gt; ErrorThrowable --&gt; ExceptionException --&gt; ...其他ExceptionException --&gt; RuntimeExceptionRuntimeException --&gt; IndexOutOfBoundsExceptionRuntimeException --&gt; NullPointerExceptionRuntimeException --&gt; ArrayIndexOutOfBoundsExceptionRuntimeException --&gt; ClassCastExceptionRuntimeException --&gt; FileNotFoundExceptionRuntimeException --&gt; ClassFormatException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h2><p>在Java语言中，将程序执行中发生的不正常情况称为“异常” 。 (开发过程中的语法错误和逻辑错误不是异常) </p><p><strong>Java程序在执行过程中所发生的异常事件可分为两类</strong>：</p><h3 id="1-Error"><a href="#1-Error" class="headerlink" title="1.Error"></a>1.Error</h3><p>Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。 </p><h3 id="2-Exception"><a href="#2-Exception" class="headerlink" title="2.Exception"></a>2.Exception</h3><p>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使 用针对性的代码进行处理。</p><h4 id="1-RuntimeException"><a href="#1-RuntimeException" class="headerlink" title="1.RuntimeException"></a>1.RuntimeException</h4><p>运行时异常，编译时无法检测出来，所以又称为非受检异常。在代码运行时会会出现，不解决会使代码停止运行。</p><p>常见的RuntimeException有：</p><p><code>IndexOutOfBoundsException、NullPointerException、ArrayIndexOutOfBoundsException、ClassCastException、FileNotFoundExceptionClassFormatException</code></p><h4 id="2-非运行时异常"><a href="#2-非运行时异常" class="headerlink" title="2.非运行时异常"></a>2.非运行时异常</h4><p>编译时异常，在代码编译成.class文件之前必须解决的异常（编写时IDE通常会进行提示），所以又称受检异常。</p><p>常见的非运行时异常有</p><p><code>IOException、文件读写异常；FileNotFoundException：文件未找到异常；EOFException：读写文件尾异常；MalformedURLException：URL格式错误异常；SocketException：Socket异常；SQLException：SQL数据库异常</code></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/image-20210201092224862.png" alt="image-20210201092224862"></p><h3 id="3-图示"><a href="#3-图示" class="headerlink" title="3.图示"></a>3.图示</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img2/02_%E7%BC%96%E8%AF%91%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8.png" alt="02_编译时异常和运行时异常"></p><h2 id="2-Java异常处理"><a href="#2-Java异常处理" class="headerlink" title="2.Java异常处理"></a>2.Java异常处理</h2><h3 id="1-throws"><a href="#1-throws" class="headerlink" title="1.throws"></a>1.throws</h3><p>只作用于方法，一般只用于处理编译时异常，解决编译时期的语法问题，将该方法中出现的某类异常交给调用者处理，如果调用者未处理，则会交给JVM虚拟机进行处理。</p><p><strong>JVM虚拟机处理方式</strong></p><ul><li>把异常的名称，错误原因及异常出现的位置等信息输出在了控制台</li><li>程序停止执行</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常名<span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="throw：抛出异常"><a href="#throw：抛出异常" class="headerlink" title="throw：抛出异常"></a>throw：抛出异常</h4><p>手动抛出一个异常，当程序运行到此时，会出现一个异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> 异常名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="throws与throw"><a href="#throws与throw" class="headerlink" title="throws与throw"></a>throws与throw</h4><table><thead><tr><th></th><th>throws</th><th>throw</th></tr></thead><tbody><tr><td>作用</td><td>处理异常，使JVM在编译是，忽略代码中的异常，从而顺利编译</td><td>人为的制造一个异常，使代码运行到此处时出现异常。</td></tr><tr><td>声明位置</td><td>方法体上，方法名()之后</td><td>方法中</td></tr></tbody></table><h3 id="2-try…catch…fianlly…"><a href="#2-try…catch…fianlly…" class="headerlink" title="2.try…catch…fianlly…"></a>2.try…catch…fianlly…</h3><p>手动处理异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            受检测代码片段，该段程序出现异常时，会停止运行该位置代码，转而运行<span class="token keyword">catch</span>片段代码。        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常名 对象名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            当<span class="token keyword">try</span>代码块的代码出现<span class="token keyword">catch</span>捕捉的异常时，转而运行此处代码，通常用于补救出现的异常。            如果<span class="token keyword">try</span>代码块中未出现异常，则改代码段不执行。        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            当<span class="token keyword">try</span><span class="token operator">/</span><span class="token keyword">catch</span>代码中代码执行完毕后，最终执行此处片段，会在<span class="token keyword">return</span>之后执行。        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>finally语句可以省略</strong></p><p>如果可能出现多个异常，可以进行多次捕获</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常一 e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常二 e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常n e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父类异常一定要写在子类异常后面，否则，父类异常会提前捕捉到子类异常</p><h2 id="3-Throwable中常用方法"><a href="#3-Throwable中常用方法" class="headerlink" title="3.Throwable中常用方法"></a>3.Throwable中常用方法</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回此 throwable 的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回此可抛出的简短描述</td></tr><tr><td>public void printStackTrace()</td><td>把异常的错误信息输出在控制台</td></tr></tbody></table><h1 id="8-多线程"><a href="#8-多线程" class="headerlink" title="8.多线程"></a>8.多线程</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><h3 id="1-程序-program"><a href="#1-程序-program" class="headerlink" title="1.程序(program)"></a>1.程序(program)</h3><p>是为完成特定任务、用某种语言编写的一组指令的集合。即指一 段静态的代码，静态对象。</p><h3 id="2-进程-process"><a href="#2-进程-process" class="headerlink" title="2.进程(process)"></a>2.进程(process)</h3><p>​        是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程（生命周期）。本质是一块内存空间，系统在运行时会为每个进程分配不同的内存区域，系统为这片内存分配id,这就是进程id，释放内存空间就是通过进程id结束进程。<strong>进程并不直接执行代码，而是由进程中的线程执行。</strong></p><p>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位；<br>动态性：进程的实质是程序的一次执行过程，进程是动态产生，动态消亡的；<br>并发性：任何进程都可以同其他进程一起并发执行；</p><h3 id="3-线程-thread"><a href="#3-线程-thread" class="headerlink" title="3.线程(thread)"></a>3.线程(thread)</h3><p>线程是线程中的最小执行单位，是一个程序内部的一条执行路径。 </p><p>单线程：一个进程如果只有一条执行路径，则称为单线程程序</p><p>多线程：一个进程如果有多条执行路径，则称为多线程程序</p><p>若一个进程同一时间并行执行多个线程，就是支持多线程的 。</p><p>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小 一个进程中的多个线程共享相同的内存单元/内存地址空间。它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。</p><h3 id="4-并行"><a href="#4-并行" class="headerlink" title="4.并行"></a>4.并行</h3><p>多个CPU同时执行多个任务。</p><h3 id="5-并发"><a href="#5-并发" class="headerlink" title="5.并发"></a>5.并发</h3><p>一个CPU(采用时间片)同时执行多个任务。</p><h3 id="6-原子性"><a href="#6-原子性" class="headerlink" title="6.原子性"></a>6.原子性</h3><p>所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可以分割的整体</p><h3 id="不可见行"><a href="#不可见行" class="headerlink" title="不可见行"></a>不可见行</h3><p>由于多线程的内存机制，当一个线程修改了数据后，另一个线程在未更新缓存区时，会读取到错误的数据。</p><h2 id="2-多线程程序的优点"><a href="#2-多线程程序的优点" class="headerlink" title="2.多线程程序的优点"></a>2.多线程程序的优点</h2><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。 </li><li>提高计算机系统CPU的利用率。</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。</li></ol><h2 id="3-何时需要多线程"><a href="#3-何时需要多线程" class="headerlink" title="3.何时需要多线程"></a>3.何时需要多线程</h2><p> 程序需要同时执行两个或多个任务。</p><p>程序需要实现一些需要等待的任务时，如用户输入、文件读写 操作、网络操作、搜索等。 </p><p>需要一些后台运行的程序时。</p><h2 id="4-多线程的创建"><a href="#4-多线程的创建" class="headerlink" title="4.多线程的创建"></a>4.多线程的创建</h2><p><strong>在main()方法中，创建完线程后，新线程执行线程中run()方法中的内容，主线程会继续向下执行，两个线程此时各自执行，互不干扰。</strong></p><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h3><p><strong>步骤</strong></p><p>1.创建Thread类的子类</p><p>2.实现Thread类中的run()方法</p><p>​    run()方法中写的为该线程执行的内容</p><p>3.使用</p><ol><li><p>创建线程类对象</p></li><li><p>调用start()方法,子类对象调用父类方法。</p><p>调用start()方法会创建一个新线程，然后执行run()方法，此时子类的run()方法会覆盖父类中的run()方法</p><p>最终调用的是子类中的run()方法。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FirstThread</span><span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">SecondThread</span><span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Test</span><span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FirstThread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FirstThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个线程，执行该线程中的内容</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecondThread</span> t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SecondThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个线程，执行该线程中的内容</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出异常“IllegalThreadStateException”。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//匿名内部类方式</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类方式"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实现Runable接口"><a href="#2-实现Runable接口" class="headerlink" title="2.实现Runable接口"></a>2.实现Runable接口</h3><p><strong>使用更广</strong></p><ol><li><p>可以继承其他父类。避免了单继承的局限性。</p></li><li><p>线程数据共享。不用使用static变量。</p></li></ol><p><strong>步骤</strong></p><ol><li><p>创建一个Runnable接口的实现类</p></li><li><p>实现接口中的抽象方法run();</p></li><li><p>创建实现类的对象</p></li><li><p>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象。</p></li><li><p>通过Thread对象调用start()方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建Runnable实现类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">//2.实现Runnable中的抽象方法run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//这里实现接口，不是Thread类，不能直接使用方法，要使用Thread.currentThread()获取当前线程。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.创建实现类对象</span>        <span class="token class-name">MyThread</span> myThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Thread对象</span>        <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Thread对象调用start()方法</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建多个线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">thread</span><span class="token punctuation">;</span><span class="token comment">//1.创建Runnable实现类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">//2.实现Runnable中的抽象方法run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//这里实现接口，不是Thread类，不能直接使用方法，要使用Thread.currentThread()获取当前线程。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.创建实现类对象</span>        <span class="token class-name">MyThread</span> myThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Thread对象</span>        <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Thread对象调用start()方法</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建线程二</span>        <span class="token class-name">Thread</span> t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Thread对象调用start()方法</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//内名内部类方式</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable匿名内部类方式"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现方式</p><p>创建Thread对象是传入Runnabe对象，会调用有参构造方法，经过几次调用后，最终使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                   <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>                   <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会将Runnable对象传递给Thread类对成员变量</p><p>Thread在调用start方法时</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果重写了Thread之后，如果未调用父类中的run方法，则Runnable对象中的run方法不会被调用</p><h3 id="3-同时使用Thread与Runnable"><a href="#3-同时使用Thread与Runnable" class="headerlink" title="3.同时使用Thread与Runnable"></a>3.同时使用Thread与Runnable</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable参数方式"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果不调用父类的run方法，则只执行子类的而不执行参数中Runnable实现类的</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类本身"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实现Callable接口"><a href="#4-实现Callable接口" class="headerlink" title="4.实现Callable接口"></a>4.实现Callable接口</h3><p><strong>步骤：</strong></p><p>1.创建Callable接口的实现类；</p><p>2.实现接口中的call()方法，执行内容放在call()方法中；</p><p>3.创建Callable接口实现类的对象；</p><p>4.将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象；</p><p>5.将Future对象作为参数传递到Thread类的构造器中。创建Thread对象，调用start()方法。</p><p>6.如果需要call()方法的返回值，可以通过Future对象调用get()方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建Callable接口的实现类；</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//2.实现接口中的call()方法，执行内容放在call()方法中；</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">=</span>num<span class="token operator">+</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.创建Callable接口实现类的对象；</span>        <span class="token class-name">MyThread</span> myThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象；</span>        <span class="token class-name">FutureTask</span> futureTask<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.将Future对象作为参数传递到Thread类的构造器中。创建Thread对象，调用start()方法。</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//6.如果需要call()方法的返回值，可以通过Future对象调用get()方法。</span>            <span class="token class-name">Object</span> num <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Callable接口还支持通过设置泛型设置返回值类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">thread<span class="token punctuation">.</span>callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">My</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">=</span>num<span class="token operator">+</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">My</span> myThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> num <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用线程池方式"><a href="#5-使用线程池方式" class="headerlink" title="5.使用线程池方式"></a>5.使用线程池方式</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h4><p>提前创建好多个线程，放入线程池中，使用时直接获取，使用完 放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交 通工具。</p><h4 id="2-优点"><a href="#2-优点" class="headerlink" title="2.优点"></a>2.优点</h4><ol><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理</li></ol><h4 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3.步骤"></a>3.步骤</h4><ol><li><p>创建线程池，并指定线程池中线程数量；</p></li><li><p>执行指定线程的操作，提供相应的对象</p></li><li><p>关闭线程池</p></li></ol><p>execute（）参数为Runable接口实现类对象；</p><p>submit（）参数为Callable接口实现类对象；</p><h4 id="4-Executors"><a href="#4-Executors" class="headerlink" title="4.Executors"></a>4.Executors</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Executors.newCachedThreadPool()</td><td>创建线程池</td></tr><tr><td>Executors.newFixedThreadPool(10)</td><td>创建最大容量的线程池</td></tr><tr><td>submit(Runnable r)</td><td>向线程池中提交任务，并执行</td></tr><tr><td>shutdown()</td><td>关闭线程池</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">My</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建线程池，并指定线程池中线程数量(不建议使用)</span>        <span class="token class-name">ExecutorService</span> es <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> services <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.执行指定线程的操作，提供相应的对象</span>        services<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        services<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.关闭线程池</span>        services<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-ThreadPoolExecutor√"><a href="#5-ThreadPoolExecutor√" class="headerlink" title="5.ThreadPoolExecutor√"></a>5.ThreadPoolExecutor√</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/image-20210224145417348.png" alt="image-20210224145417348"></p><p><strong>参数七：拒绝策略</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/image-20210224152556233.png" alt="image-20210224152556233"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span> tpe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">5</span> <span class="token punctuation">,</span><span class="token comment">//核心线程数（线程池中一直保留的线程数量）</span>                <span class="token number">10</span><span class="token punctuation">,</span><span class="token comment">//线程池中最大线程数量</span>                <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//临时线程空闲多长时间后被关闭</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token comment">//时间单位</span>                <span class="token comment">//任务队列，最大可容纳多少个任务，有两种LinkedBlockingDeque和ArrayBlockingQueue</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">//线程工厂</span>                <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">//拒绝策略</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token class-name">AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Thread类中的常用方法"><a href="#5-Thread类中的常用方法" class="headerlink" title="5.Thread类中的常用方法"></a>5.Thread类中的常用方法</h2><p>void start(): 启动线程，并执行对象的run()方法 </p><p>void run(): 线程在被调度时执行的操作 </p><p>String getName(): 返回线程的名称 </p><p>void setName(String name):设置该线程名称 </p><p>static Thread currentThread(): 返回当前线程。在Thread子类中就 是this，通常用于主线程和Runnable实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ThreadOne</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//currentThread()，获取当前线程，方法为静态方法，使用类名直接调用</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadOne</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象.setName()方法设置线程名。要在start()方法之前执行。</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"新线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">///获取主线程，并给主线程命名</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>线程命名方法二，使用构造器<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadOne</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadOne</span><span class="token punctuation">(</span><span class="token string">"新线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>static void yield()：线程让步 </p><p>​    暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p><p>​    若队列中没有同优先级的线程，忽略此方法</p><p>join() ：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止</p><p>​    低优先级的线程也可以获得执行 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FirstThread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FirstThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//当主线程执行到i=20时，被阻塞，直到t1执行完成，主线程才继续执行</span>                t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>static void sleep(long millis)：(指定时间:毫秒)</p><p>​    令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</p><p>​    抛出InterruptedException异常 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ThreadOne</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//只能try/catch不能throws</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//阻塞1秒</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadOne</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"新线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stop(): 强制线程生命期结束，不推荐使用 </p><p>boolean isAlive()：返回boolean，判断线程是否还活着</p><p>线程对象. isAlive();</p><p><strong>设置线程优先级</strong></p><p>Java的调度方法</p><p>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</p><p>对高优先级，使用优先调度的抢占式策略</p><p>线程的优先级等级</p><blockquote><p>MAX_PRIORITY：10 </p><p>MIN _PRIORITY：1</p><p>NORM_PRIORITY：5 </p></blockquote><p>涉及的方法 </p><blockquote><p>getPriority() ：返回线程优先值 </p><p>etPriority(int newPriority) ：改变线程的优先级</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//Thread.currentThread().getPriority()获取线程优先级</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadGo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadA</span> threadA<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//setPriority()设置线程优先级，也可以写int型数字。</span>        threadA<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-实例：买票问题"><a href="#6-实例：买票问题" class="headerlink" title="6.实例：买票问题"></a>6.实例：买票问题</h2><h3 id="1-继承Thread类方式"><a href="#1-继承Thread类方式" class="headerlink" title="1.继承Thread类方式"></a>1.继承Thread类方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token comment">//票数要设置为static,这样所有对象共有一个票总数，否则，每个对象都会有1000张票。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--票"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> w1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> w2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> w3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> w4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> w5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实现Runnable接口方式"><a href="#2-实现Runnable接口方式" class="headerlink" title="2.实现Runnable接口方式"></a>2.实现Runnable接口方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">thread</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Win</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--票"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Win</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//三个线程使用通过个Win对象，所以共用同一个num变量，但如果使用不同Win对象，则不共用同一个num变量。</span>        <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-线程的生命周期"><a href="#7-线程的生命周期" class="headerlink" title="7.线程的生命周期"></a>7.线程的生命周期</h2><ol><li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建 状态</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已 具备了运行的条件，只是没分配到CPU资源 </li><li>等待：wait()方法</li><li>计时等待：sleep()方法</li><li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中 止自己的执行，进入阻塞状态 </li><li>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ol><h2 id="8-线程的同步"><a href="#8-线程的同步" class="headerlink" title="8.线程的同步"></a>8.线程的同步</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>解决线程的安全问题。</p><h3 id="2-线程的安全问题出现原因"><a href="#2-线程的安全问题出现原因" class="headerlink" title="2.线程的安全问题出现原因"></a>2.线程的安全问题出现原因</h3><p>当多个线程操作同一数据时，如果在某一线程未处理完数据时，另一线程就开始处理，则两个线程同时处理同一数据，造成信息的不同步，从而出现安全问题。</p><h3 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3.解决方法</h3><h4 id="1-同步代码块方式"><a href="#1-同步代码块方式" class="headerlink" title="1.同步代码块方式"></a>1.同步代码块方式</h4><p><strong>解决思路：</strong>使用关键字synchronized，给线程处理数据时添加一个同步监视器</p><p><strong>同步监视器：</strong></p><p>相当于是一个锁，只有当前线程处理完之后，所才会被打开。</p><p>同步监视器可以是任何对象，但多个线程要使用<strong>同一个对象</strong>作为同步监视器才能解决同步安全问题。</p><p><strong>格式</strong></p><p>synchronized(同步监视器){</p><p>​        要处理的代码块（操作同一数据的）</p><p>}</p><h5 id="1-解决继承Thread类方式的线程安全问题"><a href="#1-解决继承Thread类方式的线程安全问题" class="headerlink" title="1.解决继承Thread类方式的线程安全问题"></a>1.解决继承Thread类方式的线程安全问题</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">thread<span class="token punctuation">.</span></span><span class="token class-name">Synchronize</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Win</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">/*synchronized(Win.class)&#123;              使用继承方式时，使用this要慎用，因为同步监视器要是同一个            */</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--票"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Win</span> w1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Win</span> w2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Win</span> w3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Win</span> w4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Win</span> w5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-解决实现Runnable方式的线程问题"><a href="#2-解决实现Runnable方式的线程问题" class="headerlink" title="2.解决实现Runnable方式的线程问题"></a>2.解决实现Runnable方式的线程问题</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">thread<span class="token punctuation">.</span></span><span class="token class-name">Synchronize</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//synchronized(obj)&#123;</span>            <span class="token comment">//synchronized(Window.class)&#123;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//要放在while(true后边，否则，所有的都会被一个线程执行。)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--票"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-同步方法方式"><a href="#2-同步方法方式" class="headerlink" title="2.同步方法方式"></a>2.同步方法方式</h4><p><strong>实现：</strong>将所需要处理共享数据的代码分出来独立为一个方法，为这个方法添加修饰符synchroized时期成为一个同步方法。</p><h5 id="1-解决继承Thread类方式的线程安全问题-1"><a href="#1-解决继承Thread类方式的线程安全问题-1" class="headerlink" title="1.解决继承Thread类方式的线程安全问题"></a>1.解决继承Thread类方式的线程安全问题</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">thread<span class="token punctuation">.</span></span><span class="token class-name">Synchronize</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Wins</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法要通过static修饰，让所有线程通过一个同步方法进行数据操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--票"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Wins</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Wins</span> w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Wins</span> w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Wins</span> w4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Wins</span> w5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-解决实现Runnable方式的线程问题-1"><a href="#2-解决实现Runnable方式的线程问题-1" class="headerlink" title="2.解决实现Runnable方式的线程问题"></a>2.解决实现Runnable方式的线程问题</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">thread<span class="token punctuation">.</span></span><span class="token class-name">Synchronize</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Wind</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//while(true)不能放在同步方法中，否则所有数据将交给一个线程处理。</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--票"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Wind</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Lock锁"><a href="#3-Lock锁" class="headerlink" title="3.Lock锁"></a>3.Lock锁</h4><p><strong>缺点</strong></p><p>1.需要自己维护锁，但锁可能不唯一，需要在创建对象时添加static</p><p>2.需要在finally代码块中释放锁（unlock）,不然线程不会释放锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> lockTest <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">//业务代码</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-死锁"><a href="#9-死锁" class="headerlink" title="9.死锁"></a>9.死锁</h2><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p><p><strong>怎么解决死锁</strong></p><p>死锁的四个必要条件：</p><ul><li>互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源</li><li>请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放</li><li>不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放</li><li>环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系</li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。</p><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。</p><p>所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。</p><p>此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p><h2 id="10-volatile"><a href="#10-volatile" class="headerlink" title="10.volatile"></a>10.volatile</h2><p>作用：保持多线程中，数据的一致性。</p><h3 id="线程的内存机制"><a href="#线程的内存机制" class="headerlink" title="线程的内存机制"></a>线程的内存机制</h3><p>每一个线程在内存中都会有一个对应的缓存区，用于贮存主内存中的数据，线程在读取数据时，会直接从缓存区中读取，修改时，会将修改后的数据刷新到主内存中，再同步到每个线程的缓存区中。</p><p>由于线程的内存机制，所以当一个线程改变数据时，其他线程可能未从主内存中获取到最新数据，会得到旧数据。</p><p>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；</p><h2 id="11-解决不可见性"><a href="#11-解决不可见性" class="headerlink" title="11.解决不可见性"></a>11.解决不可见性</h2><h4 id="1-使用线程锁"><a href="#1-使用线程锁" class="headerlink" title="1.使用线程锁"></a>1.使用线程锁</h4><p>由于线程锁是排他机制，解决了不可见性的同时，保证了原子性，作用于修饰方法与代码块。</p><p>当一个线程进入synchronized代码块前后，执行过程如下：</p><p>1.线程获得锁</p><p><strong>2.清空工作内存</strong></p><p><strong>3.从主内存拷贝共享变量最新的值到工作内存成为副本</strong></p><p>4.执行代码</p><p>5.将修改后的副本的值刷新回主内存中</p><p>6.线程释放锁</p><h4 id="2-使用volidate关键字"><a href="#2-使用volidate关键字" class="headerlink" title="2.使用volidate关键字"></a>2.使用volidate关键字</h4><p>给数据添加volidate关键字，当数据被修改时，就会使所有线程缓存区中的内容失效，再次从主内存中获取。</p><p>只能修饰实例变量与类变量，且不保证原子性。</p><h2 id="11-线程通信"><a href="#11-线程通信" class="headerlink" title="11.线程通信"></a>11.线程通信</h2><h2 id="12-并发工具类"><a href="#12-并发工具类" class="headerlink" title="12.并发工具类"></a>12.并发工具类</h2><h3 id="1-HashTable"><a href="#1-HashTable" class="headerlink" title="1.HashTable"></a>1.HashTable</h3><p>HahsTable使用<strong>线程锁</strong>的方式解决线程安全问题（所有的方法都是用synchronized修饰的同步方法），在一个线程操作时，会将整个map(底层的数组)锁起来，其他的线程无法使用，从而解决线程安全问题。但由于这种机制，所以HashTable效率很低。</p><h3 id="2-ConcurrenHashMap"><a href="#2-ConcurrenHashMap" class="headerlink" title="2.ConcurrenHashMap"></a>2.ConcurrenHashMap</h3><p>线程安全，且效率较高</p><p><strong>JDK1.7</strong></p><p>底层是Hash表结构</p><p>底层是默认长度为16，默认加载因子为0.75，名字为Segment[]的数组，但Segment不会进行扩容。</p><p>数组中0索引位置的数据都是一个名为HashEntey[]的长度为2的数组，其他位置为null</p><p>当向Map中添加数据时，如果不是0索引处，会在该索引处创建一个与0索引处相同的小数组，数组中保留小数组的地址值。</p><p>再利用键的hash值计算出在小数组中应存入的索引（二次哈希），如果要存入的位置为null，则直接存入，如果不是，则与原位置的数据使用equals方法进行比较，不同，则将新元素加入进去，将老元素挂在新元素下面。</p><p>小数组的默认加载因子为0.75，如果长度不足，则进行扩容，扩容为原来的两倍。</p><p>在多线程中，线程锁只会锁住小数组。其他线程在这时可以访问其他数组，所以这是最多允许16个线程访问。</p><p><strong>JDK8</strong></p><p>底层数据结构：哈希表（数组、链表、红黑树）</p><p>使用CAS机制+synchorized同步代码块解决线程安全问题。</p><p>底层数组可扩容</p><p>创建对象时，并未初始化底层hash表，而是在第一次添加数据，调用put方法时，进行初始化</p><p>添加上数据时，会判断数据存放的位置，然后使用CAS算法，以乐观锁的方式添加数据。</p><p>再添加数据时，如果为null，直接添加，如果不是，则判断是否相同，不同时，将其挂载在原有数据下边，形成链表。当链表长度大于等于八时，会将其自动转换为红黑树。</p><p>线程操作时，只会将其链表或红黑树锁起来。</p><h3 id="3-CountDownLatch"><a href="#3-CountDownLatch" class="headerlink" title="3.CountDownLatch"></a>3.CountDownLatch</h3><p>方法</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>public CountDownLatch(int count)</td><td>参数传递线程数，表示等待线程数量</td></tr><tr><td>public void await()</td><td>让线程等待，当计数器为0时，唤醒该线程</td></tr><tr><td>public void countDown()</td><td>当前线程执行完毕</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StudentThread</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token operator">=</span>countDownLatch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"到达教室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TeacherThread</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch <span class="token operator">=</span> countDownLatch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师到达教室，等待上课"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生到齐，开始上课"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownTest</span> <span class="token punctuation">&#123;</span>                                                     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                         <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                 <span class="token punctuation">&#125;</span>                                                                                                                                                         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                     <span class="token class-name">CountDownLatch</span> cdl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token class-name">TeacherThread</span> tt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherThread</span><span class="token punctuation">(</span>cdl<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   tt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                                                               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                   <span class="token class-name">StudentThread</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentThread</span><span class="token punctuation">(</span>cdl<span class="token punctuation">,</span> <span class="token string">"学生"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                         st<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token punctuation">&#125;</span>                                                                        <span class="token punctuation">&#125;</span>                                                                        <span class="token punctuation">&#125;</span>                                                                                                                                                         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Semaphore"><a href="#4-Semaphore" class="headerlink" title="4.Semaphore"></a>4.Semaphore</h3><p><strong>限制同时执行线程数</strong></p><p>创建 Semaphore对象<br> acquire()发通行证<br> release()收回通行证</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.创建管理员对象</span>    <span class="token keyword">private</span> <span class="token class-name">Semaphore</span> semaphore<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//发放通行证</span>            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放通行证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//通行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//释放通行证</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"释放通行证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-常用API"><a href="#9-常用API" class="headerlink" title="9.常用API"></a>9.常用API</h1><h2 id="1-字符串相关"><a href="#1-字符串相关" class="headerlink" title="1.字符串相关"></a>1.字符串相关</h2><h3 id="1-String"><a href="#1-String" class="headerlink" title="1.String"></a>1.String</h3><h4 id="1-String概述"><a href="#1-String概述" class="headerlink" title="1.String概述"></a>1.String概述</h4><p>**1.String:**字符串，使用“”引起来表示。</p><p><strong>2.实现的接口：</strong></p><ol><li>Serializable接口，表示字符串是支持序列化的。</li><li>Comparable接口，表示String可以比较大小。</li></ol><p>3.内部使用final cahr[] value用于存储字符串数据。</p><p>4.String代表不可变的字符串序列，简称不可变性。</p><h4 id="2-String赋值形式"><a href="#2-String赋值形式" class="headerlink" title="2.String赋值形式"></a>2.String赋值形式</h4><h5 id="1-字面量形式"><a href="#1-字面量形式" class="headerlink" title="1.字面量形式"></a>1.字面量形式</h5><blockquote><p>String类型数据在定义时在栈空间中定义，赋值时是在方法区中的常量池中开辟一个空间进行赋值，将常量池中赋值的地址传给栈空间中定义的String类型元素。</p><p>常量池中不会储存形同内容的字符串。</p><p>当给String类型数据赋值时，会先判断常量池中是否已经有改数据，如果有，直接将地址传给栈空间中定义的数据，如果没有，则会在常量池中新建数据，将地址传递给栈空间定义的数据</p><p>当对String类型数据重新赋值时，因为其不可变性（char[] 数组长度固定，不可更改），不会再原有地址修改值，而是新建一个地址储存值，再将该地址传递给栈空间中定义的数据。</p><p>当对现有的字符串进行操作（拼接…）时，也会重新指定内存区域赋值。</p></blockquote><h5 id="2-String-s1-new-String"><a href="#2-String-s1-new-String" class="headerlink" title="2.String s1 = new String();"></a>2.String s1 = new String();</h5><p>本质上this.value = new char[0];</p><h5 id="3-String-s2-new-String-String-original"><a href="#3-String-s2-new-String-String-original" class="headerlink" title="3.String s2 = new String(String original);"></a>3.String s2 = new String(String original);</h5><p>本质上this.value = original.value;</p><blockquote><p>这种形式赋值时，在栈空间中定义变量；在堆空间中定义value；在常量池中定义值，将常量池中数据的地址传递给对空间中的value，将对空间中的 value的值传递给栈空间中定义的变量</p><p>所以，即使两个变量定义相同，两个变量也不==</p></blockquote><p>这种方式在内存中定义了两个对象，一个是堆空间中的new结构，另一个是char[]数组对应的常量池中的数据。</p><h5 id="4-String-s3-new-String-char-a"><a href="#4-String-s3-new-String-char-a" class="headerlink" title="4.String s3 = new String(char[] a);"></a>4.String s3 = new String(char[] a);</h5><p>本质上this.value = Arrays.copyOf(value, value.length);</p><h5 id="5String-s4-new-String-char-a-int-startIndex-int-count"><a href="#5String-s4-new-String-char-a-int-startIndex-int-count" class="headerlink" title="5String s4 = new String(char[] a,int startIndex,int count);"></a>5String s4 = new String(char[] a,int startIndex,int count);</h5><h4 id="3-String类型数据的比较"><a href="#3-String类型数据的比较" class="headerlink" title="3.String类型数据的比较"></a>3.String类型数据的比较</h4><p>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</p><p> 只要其中有一个是变量，结果就在堆中 </p><p>如果拼接的结果调用intern()方法，返回值就在常量池中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s3<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">+</span><span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4<span class="token operator">=</span><span class="token string">"abc123"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s5<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">+</span>s2<span class="token punctuation">;</span>        <span class="token class-name">String</span> s6<span class="token operator">=</span>s1<span class="token operator">+</span><span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s7<span class="token operator">=</span>s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>        <span class="token class-name">String</span> s8<span class="token operator">=</span>s5<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token operator">==</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6<span class="token operator">==</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token operator">==</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4.常用方法"></a><strong>4.常用方法</strong></h4><p>1.boolean equals(String a):比较两个String类型数据的实际内容是否相同（实际上比较的是在常量池中的存储位置是否相同）</p><p>   boolean equalsIgnoreCase(String a):在equals基础上忽略大小写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>String replace(String a,String b):替换String类型数据中，某一个char字段</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s1="abc"    s2="dbc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.int length():输出字符串长度（底层char[]数组的长度）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.char charAt(int index):返回某索引处的字符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"helloworld"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//l</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//w</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//d</span><span class="token comment">//不能超出底层char[]数组索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.boolean isEmpty():判断字符串是否为空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"23"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.String toLowerCase():将所有字母转换为小写，</p><p>​    String toUpperCase():将所有字母转换为大写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"HelloWorld"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//helloworld</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HELLOWORLD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.String trim():去掉头部与尾部空格，中间不删</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"   Hello World   "</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8.String concat(String str):将指定字符串连接到此字符串的结尾</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span>"hello<span class="token punctuation">;</span><span class="token class-name">String</span> s2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//helloworld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>9.String substring(int beginIndex):获取当前字符串的一部分</p><p>String substring(int beginIndex, int endIndex) :获取当前字符串指定的一部分</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s2="llo world"</span><span class="token class-name">String</span> s3<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s3="llo "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束 </p><p>​      boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</p><p>​      boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的 子字符串是否以指定前缀开始</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"ld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列 时，返回 true </p><p>12.int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引 </p><p>13.int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出 现处的索引，从指定的索引开始 </p><p>14.int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引 </p><p>15.int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后 一次出现处的索引，从指定的索引开始反向搜索 注：indexOf和lastIndexOf方法如果未找到都是返回-1</p><p>16.String replace(char oldChar, char newChar)：返回一个新的字符串，它是 通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 </p><ol start="17"><li>String replace(CharSequence target, CharSequence replacement)：使 用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 </li><li>String replaceAll(String regex, String replacement) ： 使 用 给 定 的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</li><li>String replaceFirst(String regex, String replacement) ： 使 用 给 定 的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。 </li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此 字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li><li>String与char[]之间的转换</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arrays<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>24.String与byte[]之间的转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token comment">//可设置参数，字符集类型</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如不是默认的编码，需要指定编码格式</span>     <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-一道面试题"><a href="#5-一道面试题" class="headerlink" title="5.一道面试题"></a>5.一道面试题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"good"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        str<span class="token operator">=</span><span class="token string">"test ok"</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Test2</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>str<span class="token punctuation">,</span>t<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//good</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//best</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-StringBuffer和StringBuilder"><a href="#2-StringBuffer和StringBuilder" class="headerlink" title="2.StringBuffer和StringBuilder"></a>2.StringBuffer和StringBuilder</h3><h4 id="1-与String区别"><a href="#1-与String区别" class="headerlink" title="1.与String区别"></a><strong>1.与String区别</strong></h4><p>String为不可变字符串，StringBuffer与StirngBuilder为可变字符串。</p><h4 id="2-StringBuffer与StringBuilder区别"><a href="#2-StringBuffer与StringBuilder区别" class="headerlink" title="2.StringBuffer与StringBuilder区别"></a><strong>2.StringBuffer与StringBuilder区别</strong></h4><blockquote><p>StringBuffer考虑到了线程安全问题，使用多线程操作字符串时更安全，其方法都是用synchronized修饰。</p><p>StringBuilder不考虑线程安全问题，所以效率更高。</p></blockquote><h4 id="3-三者之间的效率问题"><a href="#3-三者之间的效率问题" class="headerlink" title="3.三者之间的效率问题"></a><strong>3.三者之间的效率问题</strong></h4><blockquote><p>String底层为不可变数组，每次修改都是重新新建一个数组，所以效率远远低于StringBuffer与StringBuilder</p><p>StringBuffer由于考虑线程安全问题，所以效率稍低于StringBuilder</p></blockquote><p>验证</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开始对比</span>    startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        text <span class="token operator">=</span> text <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-StirngBuffer与StringBuilder的方法"><a href="#4-StirngBuffer与StringBuilder的方法" class="headerlink" title="4.StirngBuffer与StringBuilder的方法"></a>4.StirngBuffer与StringBuilder的方法</h4><p>1.StringBuffer/StringBuilder append(xxx)：提供了很多的append()方法，用于进行字符串拼接 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcd</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.StringBuffer/StringBuilder delete(int start,int end)：删除指定位置的内容 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abefg</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.StringBuffer/StringBuilder replace(int start, int end, String str)：把(start,end)位置替换为str </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcxyzfg</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.StringBuffer/StringBuilder insert(int offset, xxx)：在指定位置插入xxx </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abxyzcdefg</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.StringBuffer/StringBuilder reverse() ：把当前字符序列逆转</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//gfedcba</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.及String的方法。</p><h2 id="2-日期时间"><a href="#2-日期时间" class="headerlink" title="2.日期时间"></a>2.日期时间</h2><h3 id="1-Systm"><a href="#1-Systm" class="headerlink" title="1.Systm"></a>1.Systm</h3><p><strong>java.lang.System</strong></p><p> long currentTimeMillis():用来返回当前时 间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</p><p><strong>适合计算时间差</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> time<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Date"><a href="#2-Date" class="headerlink" title="2.Date"></a>2.Date</h3><p><strong>java.util.Date</strong></p><p><strong>java.sql.Date</strong>(用于对应数据库中的date数据类型)</p><p><strong>表示特定的瞬间，精确到毫秒</strong></p><h4 id="1-构造器"><a href="#1-构造器" class="headerlink" title="1.构造器"></a>1.构造器</h4><p>1.Date()：使用无参构造器创建的对象可以获取本地当前时间。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sun May 31 17:14:39 CST 2020</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sun May 31 17:14:39 CST 0</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和System.currentTimeMillis()显示相同</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Date(long date) </p><h4 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2.常用方法"></a>2.常用方法</h4><p>getTime():返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象 表示的毫秒数。 </p><p>toString():把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue,  Wed, Thu, Fri, Sat)，zzz是时间标准。</p><h3 id="3-SimpleDateFormat"><a href="#3-SimpleDateFormat" class="headerlink" title="3.SimpleDateFormat"></a>3.SimpleDateFormat</h3><p> <strong>java.text.SimpleDateFormat</strong></p><h4 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h4><ol><li>格式化：日期→文本</li><li>解析：文本→日期</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SimpleDateFormat</span> sdf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Jun 01 12:22:20 CST 2020</span>    <span class="token comment">//解析</span>    <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20-6-1 下午12:22</span>    <span class="token comment">//格式化</span>    <span class="token class-name">String</span> format1<span class="token operator">=</span><span class="token string">"20-6-1 下午12:21"</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> parse <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Jun 01 12:22:00 CST 2020</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-日期和时间模式"><a href="#2-日期和时间模式" class="headerlink" title="2.日期和时间模式"></a>2.日期和时间模式</h4><p><strong>中间的分割符可以自己指定</strong></p><table><thead><tr><th align="left">字母</th><th align="left">日期或时间元素</th><th align="left">表示</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">G</td><td align="left">Era</td><td align="left">标志符</td><td align="left">Text</td></tr><tr><td align="left">y</td><td align="left">年</td><td align="left">Year</td><td align="left">1996; 96</td></tr><tr><td align="left">M</td><td align="left">年中的月份</td><td align="left">Month</td><td align="left">July; Jul; 07</td></tr><tr><td align="left">w</td><td align="left">年中的周数</td><td align="left">Number</td><td align="left">27</td></tr><tr><td align="left">W</td><td align="left">月份中的周数</td><td align="left">Number</td><td align="left">2</td></tr><tr><td align="left">D</td><td align="left">年中的天数</td><td align="left">Number</td><td align="left">189</td></tr><tr><td align="left">d</td><td align="left">月份中的天数</td><td align="left">Number</td><td align="left">10</td></tr><tr><td align="left">F</td><td align="left">月份中的星期</td><td align="left">Number</td><td align="left">2</td></tr><tr><td align="left">E</td><td align="left">星期中的天数</td><td align="left">Text</td><td align="left">Tuesday; Tue</td></tr><tr><td align="left">a</td><td align="left">am/pm 标记</td><td align="left">Text</td><td align="left">PM</td></tr><tr><td align="left">H</td><td align="left">一天中的小时数（0-23）</td><td align="left">Number</td><td align="left">0</td></tr><tr><td align="left">k</td><td align="left">一天中的小时数（1-24）</td><td align="left">Number</td><td align="left">24</td></tr><tr><td align="left">K</td><td align="left">am/pm 中的小时数（0-11）</td><td align="left">Number</td><td align="left">0</td></tr><tr><td align="left">h</td><td align="left">am/pm 中的小时数（1-12）</td><td align="left">Number</td><td align="left">12</td></tr><tr><td align="left">m</td><td align="left">小时中的分钟数</td><td align="left">Number</td><td align="left">30</td></tr><tr><td align="left">s</td><td align="left">分钟中的秒数</td><td align="left">Number</td><td align="left">55</td></tr><tr><td align="left">S</td><td align="left">毫秒数</td><td align="left">Number</td><td align="left">978</td></tr><tr><td align="left">z</td><td align="left">时区</td><td align="left">General time zone</td><td align="left">Pacific Standard Time; PST; GMT-08:00</td></tr><tr><td align="left">Z</td><td align="left">时区</td><td align="left">RFC 822 time zone</td><td align="left">-0800</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SimpleDateFormat</span> sdf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Jun 01 00:00:00 CST 2020</span>    <span class="token comment">//解析</span>    <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-01</span>    <span class="token comment">//格式化</span>    <span class="token class-name">String</span> format1<span class="token operator">=</span><span class="token string">"2020-06-01"</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> parse <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//作为参数的字符串必须符合SimpleDateFormat对象定义时指定的格式</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Jun 01 00:00:00 CST 2020</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-转换为java-sql-Date形式的日期"><a href="#3-转换为java-sql-Date形式的日期" class="headerlink" title="3.转换为java.sql.Date形式的日期"></a><strong>3.转换为java.sql.Date形式的日期</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> bir<span class="token operator">=</span><span class="token string">"2020-06-01"</span><span class="token punctuation">;</span>    <span class="token class-name">SimpleDateFormat</span> sdf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//此时返回的日期为java.util.Date类型</span>    <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>bir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题"></a>4.例题</h4><p>三天打鱼，两天晒网，现在打鱼还是晒网</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> begin <span class="token operator">=</span> <span class="token string">"1990-01-01"</span><span class="token punctuation">;</span>    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> nowTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> time<span class="token operator">=</span>nowTime<span class="token operator">-</span>beginTime<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>time<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//要+1</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token operator">=</span>day<span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//余几天，1、2、3打鱼，4、0晒网</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Calendar"><a href="#4-Calendar" class="headerlink" title="4.Calendar"></a>4.Calendar</h3><p><strong>java.util.Calendar(日历)类</strong></p><h4 id="1-创造对象方法"><a href="#1-创造对象方法" class="headerlink" title="1.创造对象方法"></a>1.创造对象方法</h4><p><strong>由于其实抽象方法，所以不能直接创建对象</strong></p><p><strong>1.使用子类GregorianCalendar创建</strong></p><p><strong>2.使用Calendar.getInstance()方法</strong></p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><h5 id="1-get"><a href="#1-get" class="headerlink" title="1.get()"></a>1.get()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是本月的第几天</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是本周的第几天/第一天为周日</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是本年的第几天</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK_IN_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是本月的第几周</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是本年的第几月/月份减一</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是几几年</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//现在是几点/12消失制</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-set"><a href="#2-set" class="headerlink" title="2.set()"></a>2.set()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置本月为第22天</span>    calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-add"><a href="#3-add" class="headerlink" title="3.add()"></a>3.add()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置本月为第x+2天</span>    calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-getTime-日历类转Date"><a href="#4-getTime-日历类转Date" class="headerlink" title="4.getTime():日历类转Date"></a>4.getTime():日历类转Date</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Jun 01 15:00:06 CST 2020</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-setTime-Date转日历类"><a href="#5-setTime-Date转日历类" class="headerlink" title="5.setTime():Date转日历类"></a>5.setTime():Date转日历类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-LocalDate、LocalTime、LocalDateTime"><a href="#5-LocalDate、LocalTime、LocalDateTime" class="headerlink" title="5.LocalDate、LocalTime、LocalDateTime"></a>5.LocalDate、LocalTime、LocalDateTime</h3><h4 id="1-实例化对象"><a href="#1-实例化对象" class="headerlink" title="1.实例化对象"></a>1.实例化对象</h4><p><strong>1.now()</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-01</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15:24:51.756</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-01T15:24:51.756</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.of()</strong>:设置指定的时间（LocalDate、LocalTime也有，只用LocalDateTime做示例）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-01T15:28:55.000000233</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h4><h5 id="1-getxxx-：获取信息"><a href="#1-getxxx-：获取信息" class="headerlink" title="1.getxxx()：获取信息"></a>1.getxxx()：获取信息</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MONDAY</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//153</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JUNE</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-withxx-修改返回值信息"><a href="#2-withxx-修改返回值信息" class="headerlink" title="2.withxx():修改返回值信息"></a>2.withxx():修改返回值信息</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withDayOfYear</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-01T15:39:26.669</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-05-02T15:39:26.669</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-plusxx-添加"><a href="#3-plusxx-添加" class="headerlink" title="3.plusxx():添加"></a>3.plusxx():添加</h5><h5 id="minusxx-：减少"><a href="#minusxx-：减少" class="headerlink" title="minusxx()：减少"></a>minusxx()：减少</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-01T15:42:44.577</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-26T15:42:44.577</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-05-09T15:42:44.577</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Instant"><a href="#6-Instant" class="headerlink" title="6.Instant"></a>6.Instant</h3><h3 id="7-DateTimeFormatter"><a href="#7-DateTimeFormatter" class="headerlink" title="7.DateTimeFormatter"></a>7.DateTimeFormatter</h3><p>java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法： </p><ol><li>预定义的标准格式。如： ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME </li><li>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG) </li><li><strong>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DateTimeFormatter</span> dateTimeFormatter<span class="token operator">=</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDateTime</span> localDateTime<span class="token operator">=</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> date <span class="token operator">=</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-06-01 04:02:03</span>    <span class="token class-name">TemporalAccessor</span> parse <span class="token operator">=</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-06-01 04:01:11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//&#123;SecondOfMinute=11, MicroOfSecond=0, NanoOfSecond=0, MinuteOfHour=1, HourOfAmPm=4, MilliOfSecond=0&#125;,ISO resolved to 2020-06-01</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h3><h2 id="3-Java比较器"><a href="#3-Java比较器" class="headerlink" title="3.Java比较器"></a>3.Java比较器</h2><p>Java实现对象排序的方式有两种：</p><p>自然排序：java.lang.Comparable </p><p>定制排序：java.util.Comparator</p><p>方式一：自然排序：java.lang.Comparable </p><p>Comparable 的典型实现：(默认都是从小到大排列的) </p><ol><li>String：按照字符串中字符的Unicode值进行比较 </li><li>Character：按照字符的Unicode值来进行比较 </li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值 大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大</li></ol><p>方式二：定制排序：java.util.Comparator </p><p>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码， 或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那 么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排 序的比较。</p><p>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返 回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示 o1小于o2。  可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort）， 从而允许在排序顺序上实现精确控制。 </p><p> 还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的 顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p><h2 id="4-System类"><a href="#4-System类" class="headerlink" title="4.System类"></a>4.System类</h2><p><strong>成员变量</strong> </p><p>System类内部包含in、out和err三个成员变量，分别代表标准输入流 (键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时间和GMT时间<span class="token punctuation">(</span>格林威治时间<span class="token punctuation">)</span><span class="token number">1970</span>年<span class="token number">1</span>月<span class="token number">1</span>号<span class="token number">0</span>时<span class="token number">0</span>分<span class="token number">0</span>秒所差的毫秒数。<span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span>： 该方法的作用是退出程序。其中status的值为<span class="token number">0</span>代表正常退出，非零代表 异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。<span class="token keyword">void</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况。<span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span>该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见 的属性名以及属性的作用如下表所示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Math"><a href="#5-Math" class="headerlink" title="5.Math"></a>5.Math</h2><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回 值类型一般为double型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 绝对值 <span class="token function">acos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">asin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 三角函数 <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 平方根 <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span>doble b<span class="token punctuation">)</span> a的b次幂 <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 自然对数 <span class="token function">exp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> e为底指数 <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回<span class="token number">0.0</span>到<span class="token number">1.0</span>的随机数 <span class="token keyword">long</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token keyword">double</span>型数据a转换为<span class="token keyword">long</span>型（四舍五入）<span class="token function">toDegrees</span><span class="token punctuation">(</span><span class="token keyword">double</span> angrad<span class="token punctuation">)</span> 弧度—<span class="token operator">></span>角度<span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token keyword">double</span> angdeg<span class="token punctuation">)</span> 角度—<span class="token operator">></span>弧度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-BigInteger与BigDecimal"><a href="#6-BigInteger与BigDecimal" class="headerlink" title="6.BigInteger与BigDecimal"></a>6.BigInteger与BigDecimal</h2><p> Integer类作为int的包装类，能存储的最大整型值为2 31-1，Long类也是有限的， 最大为2 63-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类 都无能为力，更不用说进行运算了。</p><p>java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger 提供 所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。 另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、 位操作以及一些其他操作。</p><p><strong>构造器</strong> </p><p>BigInteger(String val)：根据字符串构建BigInteger对象 </p><p><strong>常用方法</strong></p><p>public BigInteger abs()：返回此 BigInteger 的绝对值的 BigInteger。</p><p> BigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger</p><p> BigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger </p><p>BigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger</p><p>BigInteger divide(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数 相除只保留整数部分。</p><p> BigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。 </p><p>BigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this / val) 后跟 (this % val) 的两个 BigInteger 的数组。</p><p> BigInteger pow(int exponent) ：返回其值为 (thisexponent) 的 BigInteger。 9.7 BigInteger类 </p><p>一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到java.math.BigDecimal类。 </p><p><strong>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</strong> </p><p><strong>构造器</strong> </p><p> public BigDecimal(double val) </p><p>public BigDecimal(String val)</p><p><strong>常用方法</strong> </p><p>public BigDecimal add(BigDecimal augend) </p><p>public BigDecimal subtract(BigDecimal subtrahend) </p><p>public BigDecimal multiply(BigDecimal multiplicand) </p><p>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</p><h1 id="10-枚举"><a href="#10-枚举" class="headerlink" title="10.枚举"></a>10.枚举</h1><h2 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h2><ol><li>对象个数有限</li><li>确定</li></ol><h2 id="2-创建枚举类方法"><a href="#2-创建枚举类方法" class="headerlink" title="2.创建枚举类方法"></a>2.创建枚举类方法</h2><h3 id="1-手动创建"><a href="#1-手动创建" class="headerlink" title="1.手动创建"></a>1.手动创建</h3><p>JDK5之前</p><p><strong>步骤</strong></p><ol><li>声明属性，使用private final修饰</li><li>私有化类的构造器，并给其赋值</li><li>在内部创建枚举类对象，供调用，使用public static final修饰</li><li>获取枚举类属性的值</li><li>使用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">testenum</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">&#123;</span>    <span class="token comment">//声明属性，使用private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonInfo<span class="token punctuation">;</span>    <span class="token comment">//私有化类的构造器，并给其赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonInfo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName<span class="token operator">=</span>seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonInfo<span class="token operator">=</span>seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在内部创建枚举类对象，供调用，使用public static final修饰</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SPRING<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"万物复苏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SUMMMER<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> AUTUMN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"果实累累"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> WINTER<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取枚举类属性的值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Season&#123;"</span> <span class="token operator">+</span>                <span class="token string">"seasonName='"</span> <span class="token operator">+</span> seasonName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", seasonInfo='"</span> <span class="token operator">+</span> seasonInfo <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBySelf</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用Enum创建"><a href="#2-使用Enum创建" class="headerlink" title="2.使用Enum创建"></a>2.使用Enum创建</h3><p>JDK5新增</p><p>使用enum创建默认继承enum类，其toString()方法默认输出当前对象名</p><p><strong>步骤</strong></p><ol><li>在内部创建枚举类对象，供调用，对象之间以”,”隔开，使用”;”结尾，放在枚举类中最上方位置</li><li>声明属性，使用private final修饰</li><li>私有化类的构造器，并给其赋值</li><li>获取枚举类属性的值</li><li>调用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">testenum</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">Season2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在内部创建枚举类对象，供调用，对象之间以","隔开，使用";"结尾，放在枚举类中最上方位置</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"万物复苏"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"果实累累"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//声明属性，使用private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonInfo<span class="token punctuation">;</span>    <span class="token comment">//私有化类的构造器，并给其赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Season2</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span> <span class="token class-name">String</span> seasonInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonInfo <span class="token operator">=</span> seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取枚举类属性的值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnum</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SPRING</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-枚举类的属性"><a href="#3-枚举类的属性" class="headerlink" title="3.枚举类的属性"></a>3.枚举类的属性</h2><ol><li><p>枚举类对象的属性不应允许被改动, 所以应该使用 private final 修饰</p></li><li><p>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值 </p></li><li><p>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的 传入参数</p></li></ol><h3 id="4-Enum中的方法"><a href="#4-Enum中的方法" class="headerlink" title="4.Enum中的方法"></a>4.Enum中的方法</h3><p> 1.toString ():输出常量对象名</p><p>2.values():遍历所有常量对象</p><p>3.valueof():找指定名的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">testenum</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在内部创建枚举类对象，供调用，对象之间以","隔开，使用";"结尾，放在枚举类中最上方位置</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"万物复苏"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"果实累累"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//声明属性，使用private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonInfo<span class="token punctuation">;</span>    <span class="token comment">//私有化类的构造器，并给其赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span> <span class="token class-name">String</span> seasonInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonInfo <span class="token operator">=</span> seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取枚举类属性的值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnum</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SPRING</span>        <span class="token class-name">Season</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>values<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            SPRING            SUMMER            AUTUMN            WINTER            */</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Season</span> summer <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"SUMMER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SUMMER</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-枚举类实现接口"><a href="#4-枚举类实现接口" class="headerlink" title="4.枚举类实现接口"></a>4.枚举类实现接口</h3><p>1.普通实现</p><p>2.枚举类特殊实现，每一个静态常量对象分别实现接口中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">testenum</span><span class="token punctuation">;</span><span class="token keyword">interface</span> show<span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token keyword">implements</span> show <span class="token punctuation">&#123;</span>    <span class="token comment">//在内部创建枚举类对象，供调用，对象之间以","隔开，使用";"结尾，放在枚举类中最上方位置</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"万物复苏"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天万物复苏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏天烈日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"果实累累"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天果实累累"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬天冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//声明属性，使用private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonInfo<span class="token punctuation">;</span>    <span class="token comment">//私有化类的构造器，并给其赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span> <span class="token class-name">String</span> seasonInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonInfo <span class="token operator">=</span> seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取枚举类属性的值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnum</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        spring<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//春天万物复苏</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-注解"><a href="#11-注解" class="headerlink" title="11.注解"></a>11.注解</h1><h3 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h3><p>注解：Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加 载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员 可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代 码分析工具、开发工具和部署工具可以通过这些补充信息进行验证 或者进行部署。 </p><p>Annotation 可以像修饰符一样被使用, 可用于修饰包,类, 构造器, 方 法, 成员变量, 参数, 局部变量的声明, 这些信息被保存在 Annotation 的 “name=value” 对中。</p><h3 id="2-JDK内置的三个基本注解"><a href="#2-JDK内置的三个基本注解" class="headerlink" title="2.JDK内置的三个基本注解"></a>2.JDK内置的三个基本注解</h3><p>@Override: 限定重写父类方法, 该注解只能用于方法 </p><p>@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为 所修饰的结构危险或存在更好的选择 </p><p>@SuppressWarnings: 抑制编译器警告</p><h3 id="3-自定义注解"><a href="#3-自定义注解" class="headerlink" title="3.自定义注解"></a>3.自定义注解</h3><ol><li>定义新的 Annotation 类型使用 @interface 关键字 </li><li>自定义注解自动继承了java.lang.annotation.Annotation接口 </li><li>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明。其 方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能 是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、 以上所有类型的数组。</li><li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始 值可使用 default 关键字 </li><li>如果只有一个参数成员，建议使用参数名为value</li><li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认 值。格式是“参数名 = 参数值” ，如果只有一个参数成员，且名称为value， 可以省略“value=” </li><li>没有成员定义的 Annotation 称为标记; 包含成员变量的 Annotation 称为元数 据 Annotation 注意：自定义注解必须配上注解的信息处理流程才有意义。</li></ol><p><strong>步骤</strong></p><p>1.使用@interface声明</p><p>2.内部定义成员，通常使用value表示</p><p>3.可以指定成员的默认值，使用defalut定义</p><p>4.如果没有成员，代表标识作用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">testAnnatation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnatation</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">testAnnatation</span><span class="token punctuation">;</span><span class="token annotation punctuation">@MyAnnatation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==其中的成员实际上是抽象方法，只是省略了修饰符，只保留了返回值类型与方法名，其中返回值类型为赋值的数据类型==</p><p><strong>如果一个注解中只有value一个成员，则在使用时，可以省略成员名，直接写值</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AnnatationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Annatation</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-元注解"><a href="#4-元注解" class="headerlink" title="4.元注解"></a>4.元注解</h3><p>JDK 的元 Annotation 用于修饰其他 Annotation 定义</p><p>JDK5.0提供了4个标准的meta-annotation类型，分别是：1.Retention 2.Target 3.Documented 4.Inherited</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p> 只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命 周期, @Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指定值: </p><p>1.RetentionPolicy.SOURCE:在源文件中有效（即源文件保留），编译器直接丢弃这种策略的 注释 </p><p>2.RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM 不会保留注解。 这是默认值 </p><p>3.RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM 会 保留注释。程序可以通过反射获取该注释。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Retention</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Returns the retention policy.     * @return the retention policy     */</span>    <span class="token class-name">RetentionPolicy</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Annotations are to be discarded by the compiler.     * 在javac命令编译时会被销毁，不会保存在编译好的.class文件中     * 反编译时不可见     */</span>    SOURCE<span class="token punctuation">,</span>    <span class="token comment">/**     * Annotations are to be recorded in the class file by the compiler     * 会保存在编译好的.class文件中     * but need not be retained by the VM at run time.      * 但不需要在运行时由VM保留。不会保存在内存时，运行时没有     * This is the default behavior.     * 这是默认行为。     */</span>    CLASS<span class="token punctuation">,</span>    <span class="token comment">/**     * Annotations are to be recorded in the class file by the compiler and     * retained by the VM at run time, so they may be read reflectively.     * 注释将由编译器记录在类文件中，并在运行时由VM保留，因此可以反射地读取它们     */</span>    RUNTIME<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Targe"><a href="#Targe" class="headerlink" title="@Targe"></a>@Targe</h4><p> 用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于 修饰哪些程序元素。 </p><p>@Target 也包含一个名为 value 的成员变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Target</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Returns an array of the kinds of elements an annotation type can be applied to.     * @return an array of the kinds of elements an annotation type can be applied to     * 返回可应用批注类型的元素类型的数组。     * 返回可应用批注类型的元素类型的数组     */</span>    <span class="token class-name">ElementType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token comment">/*** Class:类* interface:接口* enum declaration:枚举声明* Field declaration:字段声明* Method declaration:方法声明* Formal parameter declaration:形式参数声明* Type parameter declaration:类型参数声明，表示该注解能写在类型变量的声明语句中（如：泛型声明）* Constructor declaration:构造参数声明* Local variable declaration:局部变量声明* Annotation type declaration:注解类型声明* Package declaration:包声明* Use of a type:类型的使用，表示该注解能写在使用类型的任何语句中*/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** Class, interface (including annotation type), or enum declaration */</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment">/**     * Type parameter declaration     * 表示该注解能写在类型变量的声明语句中（如：泛型声明）     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment">/**     * Use of a type     * 表示该注解能写在使用类型的任何语句中     */</span>    TYPE_USE<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><p>用于指定被该元 Annotation 修饰的 Annotation 类将被 javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。</p><p>定义为Documented的注解必须设置Retention值为RUNTIME。</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p>被它修饰的 Annotation 将具有继承性。如果某个类使用了被 </p><p>@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。 </p><p>比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以 继承父类类级别的注解 </p><p>实际应用中，使用较少</p><h1 id="12-集合"><a href="#12-集合" class="headerlink" title="12.集合"></a>12.集合</h1><p>Java 集合可分为 Collection 和 Map 两种</p><p>Collection：单列集合</p><ol><li><p>List：可重复集合</p></li><li><p>Set：不可重复集合</p></li></ol><p>Map：双列集合（键值对）</p><table><thead><tr><th></th><th>List</th><th>Set</th><th>Map</th></tr></thead><tbody><tr><td>单双列</td><td>单列</td><td>单列</td><td>双列（K,V）</td></tr><tr><td>有序</td><td>有序</td><td>无序</td><td>无序</td></tr><tr><td>可重复</td><td>可重复</td><td>不可重复</td><td>K不可重复，V可重复</td></tr><tr><td>有索引</td><td>有</td><td>没有</td><td>没有</td></tr></tbody></table><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR集合 --&gt; Collection集合 --&gt; MapCollection --&gt; ListCollection --&gt; SetList --&gt; ArrayListList --&gt; LinkedListList --&gt; VectorSet --&gt; HashSetSet --&gt; TreeSetSet --&gt; LinkedHashSetMap --&gt; HashMapMap --&gt; TreeMapMap --&gt; HashTableMap --&gt; ConcurrentHashMap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1.Collection接口"></a>1.Collection接口</h2><p>单列数据，定义了存取一组对象的方法的集合 </p><h3 id="1-Collection中的常用方法"><a href="#1-Collection中的常用方法" class="headerlink" title="1.Collection中的常用方法"></a>1.Collection中的常用方法</h3><p>1、添加 </p><p>add(Object obj) </p><p>addAll(Collection coll) </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[abc, 123]</span>    <span class="token class-name">Collection</span> collection1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[abc, 123]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、获取有效元素的个数 int size() </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、清空集合  void clear()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>abc<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span>    collection<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 4、是否是空集合  boolean isEmpty() </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    collection<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、是否包含某个元素</p><p>boolean contains(Object obj)：是通过元素的equals方法来判断是否 是同一个对象 </p><p>boolean containsAll(Collection c)：也是调用元素的equals方法来比 较的。拿两个集合的元素挨个比较。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> a <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> abc <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"+"</span><span class="token operator">+</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false+true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、删除  </p><p>boolean remove(Object obj) ：通过元素的equals方法判断是否是 要删除的那个元素。只会删除找到的第一个元素</p><p>boolean removeAll(Collection coll)：取当前集合的差集 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span> collection1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[123]</span>    collection1<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[abc,456]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、取两个集合的交集 </p><p>boolean retainAll(Collection c)：把交集的结果存在当前集合中，不影响参数中的集合c </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span> collection1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[abc,123,789]</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[abc,123,456]</span>    collection<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[abc,123]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、集合是否相等   boolean equals(Object obj) </p><p>9、转成对象数组   Object[] toArray() </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//集合转数组</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> objects1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组转集合</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10、获取集合对象的哈希值  hashCode() </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2988058</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11、遍历   iterator()：返回迭代器对象，用于集合遍历</p><p>​        迭代器中的方法</p><p>​        hashNext():集合中是否还有下一个元素</p><p>​        next()：查询下一个元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    *abc    *123    */</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span> collection<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj<span class="token operator">=</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12、也可以使用foreach()遍历集合</p><h3 id="2-List接口"><a href="#2-List接口" class="headerlink" title="2.List接口"></a>2.List接口</h3><p>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。 </p><p> List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据 序号存取容器中的元素。 </p><p> JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</p><p>三者的异同</p><table><thead><tr><th></th><th>ArrayList</th><th>LinkedList</th><th>Vector（×）</th></tr></thead><tbody><tr><td>底层</td><td>数组</td><td>双向链表</td><td>数组</td></tr><tr><td>优势</td><td>查询快</td><td>增删快</td><td>线程安全</td></tr><tr><td>线程安全</td><td>不安全</td><td>不安全</td><td>安全</td></tr></tbody></table><table><thead><tr><th>异</th><th>同</th></tr></thead><tbody><tr><td>ArrayList线程不安全，效率高</td><td>三者都实现了List接口</td></tr><tr><td>Vector线程安全，效率低</td><td>三者存储数据特点相同<br>存储有序的、可重复的数据</td></tr><tr><td>LinkedList底层使用双向链表存储</td><td>ArrayList和vector底层都是Object接口</td></tr></tbody></table><h4 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h4><h5 id="1-ArrayList底层实现"><a href="#1-ArrayList底层实现" class="headerlink" title="1.ArrayList底层实现"></a>1.ArrayList底层实现</h5><p>底层是通过Object数组实现的。</p><h6 id="1-空参构造器创建集合"><a href="#1-空参构造器创建集合" class="headerlink" title="1.空参构造器创建集合"></a>1.空参构造器创建集合</h6><p>当使用空参构造器实例化ArrayList时，底层首先会创建一个名为ElementData的Object类型数组，并使elementData等于集合中定义的为空的静态常量数组DEFAULTCAPACITY_EMPTY_ELEMENTDATA 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时的elementData数组是一个空数组，没有定义数组长度，当使用add()方法向集合中添加数据时,elementData数组会成为长度为10的数组。</p><p><strong>使用add()方法向集合中添加数据时，定义数组长度的流程</strong></p><p>1.首先创建出来的数组为空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//size当前数组长度为0</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.minCapacity=0+1=1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.刚创建出来的数组elementData为空，则，返回值为DEFAULT_CAPACITY=10</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果此时数组为刚创建时的为空状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//private static final int DEFAULT_CAPACITY = 10;</span>        <span class="token comment">//比较两者大小，返回较大的</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果不为空，说明数组已经定义过长度，返回此时长度</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.这里传入的参数就为10</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//grow(10);</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.＞＞运算符</p><p>按二进制形bai式把所有的数字向du右移动对应位数，低位移出（舍弃），高位的空位补符zhi号位，即正数补零，负数补1。符号位不变。</p><p>传入参数minCapacity=10</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此时数组长度为0，oldCapacity=0</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//将数组长度扩大到原来的1.5倍，还是0</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//newCapacity - minCapacity=0-10=-10&lt;0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">//newCapacity=10</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//此时elementData的长度就为10</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，当数组第一次添加数据后，底层数组就会变为长度为10的数组。</p><h6 id="2-有参参数创建集合"><a href="#2-有参参数创建集合" class="headerlink" title="2.有参参数创建集合"></a>2.有参参数创建集合</h6><p>1.当使用有参构造器实例化ArrayList时，首先会创建一个名为ElementData，长度为传入参数长度的Object类型数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//当传入参数大于0时，创建长度为传入参数大小的数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果传入参数为0，创建数组elementData等于定义的静态常量EMPTY_ELEMENTDATA</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果传入参数不符合规定，抛出异常IllegalArgumentException</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-LinkedList"><a href="#2-LinkedList" class="headerlink" title="2.LinkedList"></a>2.LinkedList</h4><p>对于频繁的插入、删除操作，效率高</p><h4 id="3-Vector"><a href="#3-Vector" class="headerlink" title="3.Vector"></a>3.Vector</h4><p>已被替代，用的很少</p><h4 id="4-List接口中的方法"><a href="#4-List接口中的方法" class="headerlink" title="4.List接口中的方法"></a>4.List接口中的方法</h4><ol><li><p>void add(int index, Object ele):在index位置插入ele元素</p></li><li><p>boolean addAll(int index, Collection eles):从index位置开始将eles中 的所有元素添加进来 </p></li><li><p>Object get(int index):获取指定index位置的元素 </p></li><li><p>int indexOf(Object obj):返回obj在集合中首次出现的位置 </p></li><li><p>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置 </p></li><li><p>Object remove(int index):移除指定index位置的元素，并返回此元素 </p><p>根据索引，根据内容都可用，但如果两者冲突，优先索引。如果指定移除某数字</p><p>可以使用Integer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="7"><li><p>Object set(int index, Object ele):设置指定index位置的元素为ele </p></li><li><p>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex 位置的子集合</p></li><li></li></ol><h3 id="3-Set接口"><a href="#3-Set接口" class="headerlink" title="3.Set接口"></a>3.Set接口</h3><h4 id="1-set介绍"><a href="#1-set介绍" class="headerlink" title="1.set介绍"></a>1.set介绍</h4><ol><li><p>元素无序、不可重复的集合</p><p>无序：存放无序，存储有序，存放时，根据数据的hash值选择存放位置</p><p>不可重复：保证添加的元素按照 equals（）判断时，不能返国true，即：相同的元素只能添加一个。</p></li><li><p>Set接口是Collection的子接口，set接口没有提供额外的方法 </p></li><li><p>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。 </p></li><li><p>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals() 方法</p></li></ol><h4 id="2-set插入数据过程"><a href="#2-set插入数据过程" class="headerlink" title="2.set插入数据过程"></a>2.set插入数据过程</h4><ol><li>首先计算插入数据的hash值，根据hash值判断数据要插入的位置</li><li>如果这个位置没有数据，直接插入</li><li>如果这个位置已经有数据，判断两个数据的hash值是否相等</li><li>如果hash值不相等，使用链表的形式将新加入数据添加到已有数据后边。（JDK7的时候是加在前边，8是加在后边）</li><li>如果hash值相等，使用equals方法判断两者是否一样，如果一样，则插入失败。</li><li>如果不一样，使用链表的形式将新加入数据添加到已有数据后边。（JDK7的时候是加在前边，8是加在后边）</li></ol><table><thead><tr><th></th><th>HashSet</th><th>TreeSet</th></tr></thead><tbody><tr><td>底层</td><td>哈希表（JDK8之前：数组+链表  <br>JDK8之后数组+链表+红黑树）</td><td>红黑树</td></tr><tr><td>如何实现去重复</td><td>hashCode()和equals()</td><td>实现Comparable接口或使用Comparator接口</td></tr></tbody></table><h4 id="3-HashSet"><a href="#3-HashSet" class="headerlink" title="3.HashSet"></a>3.HashSet</h4><p>依赖hashCode方法和equals方法保证键的唯一</p><p>如果键要存储的是自定义对象，需要重写hashCode和equals方法</p><p><strong>hash值</strong>是根据对象的地址值或属性值计算出的int类型的属性值。</p><p>在Object中是根据对象的地址值计算出的hash值</p><p>**hash表:**是一个每个元素都是链表的数组。</p><p><strong>底层原理</strong></p><p>1.JDK7</p><ol><li>默认创建一个长度为16的数组。</li><li>加载因子为0.75(当数组长度达到定义长度的75%时，会进行扩容，扩容为原来的两倍)。</li><li>当向其中添加元素时，会根据元素的hash值计算出元素应该存放的位置，如果所在位置为null，则直接添加。</li><li>如果所在位置已经存在元素，会根据equals方法判断两个元素是否相同。如果相同，则取消添加。</li><li>如果不同，则向下继续使用equals方法判断与这条链表中其他元素是否相同，只有都不相同时，会进行添加。</li></ol><p>2.JDK8</p><p>其他情况与7相同，但当链表长度大于8时，会将链表转换为红黑树，提高效率。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> iterator<span class="token operator">=</span>set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果<span class="token operator">:</span>hhbb<span class="token number">1.56</span><span class="token number">3</span>collection<span class="token punctuation">.</span>set<span class="token punctuation">.</span><span class="token class-name">TestHashSet</span><span class="token annotation punctuation">@50134894</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-LinkedHashList"><a href="#4-LinkedHashList" class="headerlink" title="4.LinkedHashList"></a>4.LinkedHashList</h4><p><strong>是HashSet的子类</strong></p><p>他在添加数据时，基本与hashset一致，但不同的是，他在添加数据时，会在数据两侧添加类似于双向链表的结构，所以linkedhashset在遍历时，输出顺序同存放顺序一致。</p><p><strong>优点</strong></p><p>在频繁遍历的情景时：效率相比于hashset要高</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> iterator<span class="token operator">=</span>set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果：collection<span class="token punctuation">.</span>set<span class="token punctuation">.</span><span class="token class-name">TestHashSet</span><span class="token annotation punctuation">@50134894</span>hhbb<span class="token number">3</span><span class="token number">1.56</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-TreeSet"><a href="#5-TreeSet" class="headerlink" title="5.TreeSet"></a>5.TreeSet</h4><p>依赖自然排序或者比较器排序</p><p>数据对象需要实现Comparable接口或在创建TreeSet对象时，传入Comparator类型参数</p><p>1.实现Comparable接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">//如果返回值为负数，表示当前存入的元素是较小值，存左边</span>    <span class="token comment">//如果返回使为0,表示当前存入的元素跟集合中元素重复了，不存</span>    <span class="token comment">//如果返回值为正数，表示当前存入的元素是较大值，存右边</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2在创建TreeSet对象时，传入Comparator类型参数</p><p>可以使用匿名内部类或lambda形式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//匿名内部类形式</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> teachers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Teacher</span> o1<span class="token punctuation">,</span> <span class="token class-name">Teacher</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//递增</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//lambda形式</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> teachers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//递减</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> o2<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">testTreeSet2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTreeSet2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"as"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ds"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ss"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"fs"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTreeSet3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//匿名内部类形式</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> teachers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Teacher</span> o1<span class="token punctuation">,</span> <span class="token class-name">Teacher</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//递增</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//lambda形式</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> teachers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//递减</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> o2<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"as"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Teacher</span> teacher <span class="token operator">:</span> teachers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Teacher&#123;"</span> <span class="token operator">+</span>            <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>            <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>            <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>            <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>            <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果返回值为负数，表示当前存入的元素是较小值，存左边</span>    <span class="token comment">//如果返回使为0,表示当前存入的元素跟集合中元素重复了，不存</span>    <span class="token comment">//如果返回值为正数，表示当前存入的元素是较大值，存右边</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Map接口"><a href="#2-Map接口" class="headerlink" title="2.Map接口"></a>2.Map接口</h2><p>双列数据，保存具有映射关系“key-value对”的集合</p><p>Map中的key：无序的、不可重复的，使用Set存储所有的key的value</p><p>Map中的 value：无序的、可重复的，使用 Collection存储</p><p>每个键值对：key- value构成了一个 Entry对象</p><p>Map中的 entry：无序的、不可重复的，使用Set存储所有的 entry</p><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h3><p>添加、删除、修改操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span>：将指定key<span class="token operator">-</span>value添加到<span class="token punctuation">(</span>或修改<span class="token punctuation">)</span>当前map对象中 <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Map</span> m<span class="token punctuation">)</span><span class="token operator">:</span>将m中的所有key<span class="token operator">-</span>value对存放到当前map中 <span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>：移除指定key的key<span class="token operator">-</span>value对，并返回value<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：清空当前map中的所有数据 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元素查询的操作： </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>：获取指定key对应的value<span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>：是否包含指定的key<span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span>：是否包含指定的value<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回map中key<span class="token operator">-</span>value对的个数 <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断当前map是否为空<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>：判断当前map和参数对象obj是否相等 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元视图操作的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回所有key构成的<span class="token class-name">Set</span>集合 <span class="token class-name">Collection</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回所有value构成的<span class="token class-name">Collection</span>集合 <span class="token class-name">Set</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回所有key<span class="token operator">-</span>value对构成的<span class="token class-name">Set</span>集合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三种遍历方式</p><p>1.先获取key，再通过key获取value</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> maps<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"K:"</span><span class="token operator">+</span>string<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span><span class="token string">"V:"</span><span class="token operator">+</span>maps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.通过键值对集合，再分别获取key和value</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> maps<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"K:"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span><span class="token string">"V:"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.foreach遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"K:"</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> <span class="token string">"V:"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h3><p>Map接口的主要实现类，线程不安全，效率高，可存储key或value为null的数据</p><p>添加是元素为K，V对形式的entry对象，将这个entry对象添加进数组。判断是否重复时，只根据键的hash值进行判断。</p><h4 id="1-底层"><a href="#1-底层" class="headerlink" title="1.底层"></a><strong>1.底层</strong></h4><h5 id="JDK7"><a href="#JDK7" class="headerlink" title="JDK7"></a>JDK7</h5><p>数组+链表</p><p>HashMap map=new HashMap();<br>在实例化以后，底层创建了长度是16的一维数组 Entry[] table<br>可能已经执行过多次<br>map.put(key1， vaLue1);<br>首先，调用key1所在类的 hashcode（）计算key1哈希值，此哈希值经过某种算法计算以后，得到在 Entry数组中的存放位置。<br>如果此位置上的数据为空，此时的key1-vaue1添加成功。<br>如果此位置上的数据不为空，（意味着此位置上存在一个或多个数据（以链表形式存在），比较key1和已经存在的一个或多个数据<br>的哈希值。<br>    如果key1的哈希值与已经存在的数据的哈希值都不相同，此的key1- value1添加成功。<br>    如果key1的哈希信和已经存在的某一个数据（key2-vaue2）的哈希值相同，继续比较：调用key1所在类的 equals（key2)。<br>        如果 equaLs（）返 false：此的key1- value1添加成功。<br>        如果 equaLs（）返回true：使用 value1替换 value2。<br>补充：关于情况2和情况3：此的Rey1- value1和原来的数据纵链表的方式存储。<br>在不断的添加过程中，会涉及到扩容问题，默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p><h5 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h5><p>数组+链表+红黑树</p><p>相比较于JDK7</p><p>1.new HashMap（）：底层没有创建一个长度为16的数组<br>2.JDK8底层的数组是：Nde[]]，而非 Entry[]<br>3.首次调用put()方法时，底层创建长度为16的数组<br>4.JDK7底层结构只有：数组+链表。JDK8中底层结构：数组+链表+红黑树<br>当数组的某一个索引位置上的元素以链表形式存在的数据个数&gt;8且当前数组的长度&gt;64的，,此时此索引位置上的所有数据改为使用红黑树存储。</p><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>负载因子值的大小，对HashMap有什么影响 </p><ol><li><p>负载因子的大小决定了HashMap的数据密度。 </p></li><li><p>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长, 造成查询或插入时的比较次数增多，性能会下降。</p></li><li><p>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的 几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性 能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建 议初始化预设大一点的空间。 </p></li><li><p>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此 时平均检索长度接近于常数</p></li></ol><h3 id="2-LinkedHashMap"><a href="#2-LinkedHashMap" class="headerlink" title="2.LinkedHashMap"></a>2.LinkedHashMap</h3><p>在HashMap基础上添加一对指针，指向前一个或后一个元素，从而使可以实现按输入顺序遍历集合。</p><p>在频繁查询操作时，相对于HashMap效率较高</p><p>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代 顺序：迭代顺序与 Key-Value 对的插入顺序一致</p><h3 id="3-TreeMap"><a href="#3-TreeMap" class="headerlink" title="3.TreeMap"></a>3.TreeMap</h3><p><strong>底层使用红黑树</strong></p><p>按照key进行排序，实现排序遍历</p><p>TreeMap 的 Key 的排序</p><ol><li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有 的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException </li><li>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</li></ol><p>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或 者compare()方法返回0。</p><h3 id="4-HashTable"><a href="#4-HashTable" class="headerlink" title="4.HashTable"></a>4.HashTable</h3><p>Map接口的古老实现类，线程安全，效率低，不可存储key或value为null的数据</p><p>Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询 速度快，很多情况下可以互用。</p><p>与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value </p><p>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</p><p>Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。</p><h3 id="5-Properties"><a href="#5-Properties" class="headerlink" title="5.Properties"></a>5.Properties</h3><p>通常用来处理配置文件，key与value都是String类型</p><p>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</p><p>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</p><p>存取数据时，建议使用setProperty(String key,String value)方法和 getProperty(String key)方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 流行形式加载配置文件* 默认识别路径为工程/模块下*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> properties<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jxy.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name1 <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Collections工具类"><a href="#3-Collections工具类" class="headerlink" title="3.Collections工具类"></a>3.Collections工具类</h2><p>Collections 是一个操作 Set、List 和 Map 等集合的工具类</p><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作， 还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</p><h3 id="1-排序操作：（均为static方法）"><a href="#1-排序操作：（均为static方法）" class="headerlink" title="1.排序操作：（均为static方法）"></a>1.排序操作：（均为static方法）</h3><ol><li>reverse(List)：反转 List 中元素的顺序 </li><li>shuffle(List)：对 List 集合元素进行随机排序 </li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序 </li><li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li></ol><h3 id="2-查找、替换"><a href="#2-查找、替换" class="headerlink" title="2.查找、替换"></a>2.查找、替换</h3><ol><li><p>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素 </p></li><li><p>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回 给定集合中的最大元素 </p></li><li><p>Object min(Collection) Object min(Collection，Comparator)</p></li><li><p>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数 </p></li><li><p>void copy(List dest,List src)：将src中的内容复制到dest中</p></li><li><p>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</p></li></ol><h3 id="3-同步控制"><a href="#3-同步控制" class="headerlink" title="3.同步控制"></a>3.同步控制</h3><p>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集 合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全 问题</p><h1 id="13-泛型"><a href="#13-泛型" class="headerlink" title="13.泛型"></a>13.泛型</h1><p>略</p><h1 id="14-文件操作"><a href="#14-文件操作" class="headerlink" title="14.文件操作"></a>14.文件操作</h1><h2 id="1-File类"><a href="#1-File类" class="headerlink" title="1.File类"></a>1.File类</h2><h3 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h3><ol><li>java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关 </li><li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。 如果需要访问文件内容本身，则需要使用输入/输出流。</li><li>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对 象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。 </li><li>File对象可以作为参数传递给流的构造器</li></ol><h3 id="2-常用构造器"><a href="#2-常用构造器" class="headerlink" title="2.常用构造器"></a>2.常用构造器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> pathname<span class="token punctuation">)</span><span class="token operator">*</span>以pathname为路径创建<span class="token class-name">File</span>对象，可以是绝对路径或者相对路径，如果 pathname是相对路径，则默认的当前路径在系统属性user<span class="token punctuation">.</span>dir中存储。 绝对路径：是一个固定的路径<span class="token punctuation">,</span>从盘符开始 相对路径：是相对于某个位置开始    <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> parent<span class="token punctuation">,</span><span class="token class-name">String</span> child<span class="token punctuation">)</span><span class="token operator">*</span>以parent为父路径，child为子路径创建<span class="token class-name">File</span>对象。    <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">File</span> parent<span class="token punctuation">,</span><span class="token class-name">String</span> child<span class="token punctuation">)</span>根据一个父<span class="token class-name">File</span>对象和子文件路径创建<span class="token class-name">File</span>对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"C\\a.txt"</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> parent <span class="token operator">=</span> <span class="token string">"C"</span><span class="token punctuation">;</span><span class="token class-name">String</span> child <span class="token operator">=</span> <span class="token string">"a.txt"</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"C"</span><span class="token punctuation">;</span><span class="token class-name">String</span> child <span class="token operator">=</span> <span class="token string">"a.txt"</span><span class="token punctuation">;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h3><h4 id="1-获取功能"><a href="#1-获取功能" class="headerlink" title="1.获取功能"></a>1.获取功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取绝对路径<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取路径 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取名称 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取上层文件目录路径。若无，返回<span class="token keyword">null</span> <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取文件长度（即：字节数）。不能获取目录的长度。<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取最后一次的修改时间，毫秒值适用于文件目录<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取指定目录下的所有文件或者文件目录的名称数组 <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：获取指定目录下的所有文件或者文件目录的<span class="token class-name">File</span>数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用@Test注解运行时，使用相对路径是相对于moudle,使用main()方法时，是相对于工程。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">，<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Desktop\\io.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取绝对路径</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取文件名</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取路径</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取所在文件夹路径</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取文件大小，单位：字节</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取最后修改时间，输出值为毫秒，可用new Date()等转换</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出文件名形式当前文件夹下文件</span>    <span class="token class-name">File</span> file2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEA\\JavaSE\\IO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//输出文件绝对路径形式当前文件夹下文件</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重命名功能"><a href="#2-重命名功能" class="headerlink" title="2.重命名功能"></a>2.重命名功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">renameTo</span><span class="token punctuation">(</span><span class="token class-name">File</span> dest<span class="token punctuation">)</span><span class="token operator">:</span>把文件重命名为指定的文件路径条件：调用方法的<span class="token class-name">File</span>对象指向的文件必须存在，作为参数的<span class="token class-name">File</span>对象指向的文件必须不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Desktop\\hi.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-的判断功能"><a href="#3-的判断功能" class="headerlink" title="3.的判断功能"></a>3.的判断功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断是否是文件目录 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否是文件 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否存在 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否可读 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否可写<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：判断是否隐藏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-创建功能"><a href="#4-创建功能" class="headerlink" title="4.创建功能"></a>4.创建功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件。若文件存在，则不创建，返回<span class="token boolean">false</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件目录。如果此文件目录存在，就不创建了。 如果此文件目录的上层目录不存在，也不创建。 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：创建文件目录。如果上层文件目录不存在，一并创建 注意事项：如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目 路径下。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-删除功能"><a href="#5-删除功能" class="headerlink" title="5.删除功能"></a>5.删除功能</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：删除文件或者文件夹 删除注意事项： <span class="token class-name">Java</span>中的删除不走回收站。 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-IO流"><a href="#2-IO流" class="headerlink" title="2.IO流"></a>2.IO流</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>1.I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于 处理设备之间的数据传输。如读/写文件，网络通讯等。</p><p>2.Java程序中，对于数据的输入/输出操作以“流(stream)” 的 方式进行。 </p><p>3.java.io包下提供了各种“流”类和接口，用以获取不同种类的 数据，并通过标准的方法输入或输出数据。</p><p>4.输入input：读取外部数据（磁 盘、光盘等存储设备的数据）到 程序（内存）中。</p><p>5.输出output：将程序（内存） 数据输出到磁盘、光盘等存储设 备中。</p><h3 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2.流的分类"></a>2.流的分类</h3><p>1.按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit) </p><p>2.按数据流的流向不同分为：输入流，输出流</p><p>3.按流的角色的不同分为：节点流，处理流</p><ol><li><p>Java</p><table><thead><tr><th align="center">(抽象基类)</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><p>的IO流共涉及40多个类，实际上非常规则，都是从如下4个 抽象基类派生的。 </p></li><li><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p></li></ol><h3 id="3-IO流体系"><a href="#3-IO流体系" class="headerlink" title="3.IO流体系"></a>3.IO流体系</h3><p><img src="http://a1.qpic.cn/psc?/V12N9rQx0MYPHF/5Bi.o*a6jL6BabQv6p6D*ykjwN7lwSs1V3D6gS14RkosyyFSlG8Tc*t0dfj*JlCqjGrEbwCVqmPNcjNPjOOByg!!/c&ek=1&kp=1&pt=0&bo=agMeAmoDHgIRADc!&tl=1&tm=1592100000&sce=0-12-12&rf=0-18" alt="img"></p><h3 id="4-使用步骤"><a href="#4-使用步骤" class="headerlink" title="4.使用步骤"></a>4.使用步骤</h3><p>1.File类的实例化</p><p>2.流的实例化</p><p>3.流的操作</p><p>4.资源的关闭</p><h3 id="5-输入流"><a href="#5-输入流" class="headerlink" title="5.输入流"></a>5.输入流</h3><p>InputStream 和 Reader 是所有输入流的基类。</p><p>程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资 源，所以应该显式关闭文件 IO 资源。</p><p>FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream 用于读取非文本数据之类的原始字节流。要读取字符流，需要使用 FileReader</p><h4 id="1-InputStream"><a href="#1-InputStream" class="headerlink" title="1.InputStream"></a>1.InputStream</h4><p>（典型实现：FileInputStream）</p><p><strong>1.int read()</strong> </p><p>从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因 为已经到达流末尾而没有可用的字节，则返回值 -1。 </p><p>2.int read(byte[] b) </p><p>从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已 经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取 的字节数。 </p><p><strong>3.int read(byte[] b, int off,int len)</strong> </p><p>将输入流中最多 len 个数据字节读入 byte 数组。尝试读取 len 个字节，但读取 的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于 文件末尾而没有可用的字节，则返回值 -1。</p><p><strong>4.public void close() throws IOException</strong> </p><p>关闭此输入流并释放与该流关联的所有系统资源。 </p><h4 id="2-Reader"><a href="#2-Reader" class="headerlink" title="2.Reader"></a>2.Reader</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 读取单个字符。作为整数读取的字符，范围在 <span class="token number">0</span> 到 <span class="token number">65535</span> 之间 <span class="token punctuation">(</span><span class="token number">0x00-</span><span class="token number">0xffff</span><span class="token punctuation">)</span>（<span class="token number">2</span>个 字节的<span class="token class-name">Unicode</span>码），如果已到达流的末尾，则返回 <span class="token operator">-</span><span class="token number">1</span>     <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span> 将字符读入数组。如果已到达流的末尾，则返回 <span class="token operator">-</span><span class="token number">1</span>。否则返回本次读取的字符数。    <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> 将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字 符。如果已到达流的末尾，则返回 <span class="token operator">-</span><span class="token number">1</span>。否则返回本次读取的字符数。<span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> 关闭此输入流并释放与该流关联的所有系统资源。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token operator">=</span>fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token operator">=</span>fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//结构优化</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">=</span>fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//结束必须关闭流</span>    fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//为了保证流一定关闭，使用try-catch-finally处理异常</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> data<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//防止为创建流，但进行关闭操作，从而造成空指针异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileReader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testRead2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> data<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//方式一：</span>                <span class="token comment">//错误写法</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>ch<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//正确写法</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>data <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//方式二</span>                <span class="token comment">//错误写法</span>                <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//正确写法</span>                <span class="token class-name">String</span> string<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileReader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-输出流"><a href="#6-输出流" class="headerlink" title="6.输出流"></a>6.输出流</h3><h4 id="1-OutputStream"><a href="#1-OutputStream" class="headerlink" title="1.OutputStream"></a>1.OutputStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写 入的字节是参数 b 的八个低位。b 的 <span class="token number">24</span> 个高位将被忽略。 即写入<span class="token number">0</span><span class="token operator">~</span><span class="token number">255</span>范围的。 <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> 将 b<span class="token punctuation">.</span>length 个字节从指定的 <span class="token keyword">byte</span> 数组写入此输出流。<span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> 的常规协定是：应该 与调用 <span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> 的效果完全相同。 <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> 将指定 <span class="token keyword">byte</span> 数组中从偏移量 off 开始的 len 个字节写入此输出流。 <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span> 刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立 即写入它们预期的目标。<span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> 关闭此输出流并释放与该流关联的所有系统资源。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Writer"><a href="#2-Writer" class="headerlink" title="2.Writer"></a>2.Writer</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> 写入单个字符。要写入的字符包含在给定整数值的 <span class="token number">16</span> 个低位中，<span class="token number">16</span> 高位被忽略。 即 写入<span class="token number">0</span> 到 <span class="token number">65535</span> 之间的<span class="token class-name">Unicode</span>码。<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span> 写入字符数组。<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> 写入字符数组的某一部分。从off开始，写入len个字符<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> 写入字符串。 <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> 写入字符串的某一部分。<span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 刷新该流的缓冲，则立即将它们写入预期目标。 <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> 关闭此输出流并释放与该流关联的所有系统资源。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//写操作时，如果文件不存在，会自动创建该文件</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hi.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//true,将添加的文件追加到已有文件后边，false:覆盖原有文件，默认为false</span>        fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hi\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hi jxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileWriter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                fileWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-打印流"><a href="#8-打印流" class="headerlink" title="8.打印流"></a>8.打印流</h3><h4 id="1-PrintStream"><a href="#1-PrintStream" class="headerlink" title="1.PrintStream"></a>1.PrintStream</h4><p>字节流</p><h5 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintStream</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token class-name">PrintStream</span> <span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token class-name">PrintStream</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">print</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>    输入任何数据类型，不换行<span class="token function">println</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>  输入任何数据类型，换行    <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        输出单个字节，多个字节，一部分字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-PrintWriter"><a href="#2-PrintWriter" class="headerlink" title="2.PrintWriter"></a>2.PrintWriter</h4><p>字符流</p><h5 id="1-构造方法-1"><a href="#1-构造方法-1" class="headerlink" title="1.构造方法"></a>1.构造方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintWriter</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token class-name">PrintWriter</span> <span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token class-name">PrintWriter</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token class-name">PrintWriter</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span><span class="token class-name">Boolean</span> autoFlush<span class="token punctuation">)</span> autoFlush默认为<span class="token boolean">false</span><span class="token punctuation">,</span>不刷新，<span class="token boolean">true</span>为自动刷新，但支支持<span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-成员方法-1"><a href="#2-成员方法-1" class="headerlink" title="2.成员方法"></a>2.成员方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">print</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>    输入任何数据类型，不换行<span class="token function">println</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>  输入任何数据类型，换行    <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        输出单个字节，多个字节，一部分字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="15-网络编程"><a href="#15-网络编程" class="headerlink" title="15.网络编程"></a>15.网络编程</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>在网络通信协议下，不同计算机上运行的程序，可以进行数据传输</p><h2 id="2-三要素"><a href="#2-三要素" class="headerlink" title="2.三要素"></a>2.三要素</h2><h3 id="1-IP"><a href="#1-IP" class="headerlink" title="1.IP"></a>1.IP</h3><p>全称”互联网协议地址”，也称IP地址。是分配合上网设备的数字签。常见的IP分类为：ipv4和pv6,设备在网络中的唯一标识。</p><p>ipv4: 2^32-1 32位，约42亿，数量有限，但交换机解决了这个问题</p><p>通过<strong>点分十进制</strong>将其转换为常用的192.168.1.12，每位最大值位255</p><p>平常个人使用的是交换机分配的子IP，不能直接进行通信，需要通过公网IP进行访问</p><p>ipv6:2^128-1</p><p>计算机访问网址时，将访问的网址域名发送给DNS服务器;</p><p>DNS服务器将其解析为IP地址返还给计算机;</p><p>计算机通过IP地址访问服务器。</p><p>服务器将数据返回给计算机</p><p><strong>常用命令</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.ipconfig 查看ip地址2.ping IP地址或域名 查看网络是否畅通<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//static InetAddress getByName(byte[] addr) 通过主机名或ip地址获取InetAddress对象</span><span class="token class-name">InetAddress</span> jxy <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.254.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//InetAddress ip = InetAddress.getByName("jxy");</span><span class="token comment">//String getHostName();  获取主机名</span><span class="token class-name">String</span> hostName <span class="token operator">=</span> jxy<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主机名为："</span><span class="token operator">+</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String getHostAddress();  获取ip地址</span><span class="token class-name">String</span> hostAddress <span class="token operator">=</span> jxy<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ip为："</span><span class="token operator">+</span>hostAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-端口"><a href="#2-端口" class="headerlink" title="2.端口"></a>2.端口</h3><p>端口：应用程序在设备中唯的标识<br>端口号：用两个字节表示的整数，它的取值范围是0<del>6535，其中0</del>1023之间的端口号用于一些知名的网络服务或者应用，我们自己使用1024以上的端口号就可以了</p><p>注意：一个端口号只能被一个应用程序使用。</p><h3 id="3-协议"><a href="#3-协议" class="headerlink" title="3.协议"></a>3.协议</h3><p>协议：计算机网络中，连接和通信的规则被称为网络通信办议</p><h4 id="1-UDP协议"><a href="#1-UDP协议" class="headerlink" title="1.UDP协议"></a>1.UDP协议</h4><p>用户数据报协议( User Datagram Protocol)<br>UDP是面向无连接通信协议。<br>速度快，有大小限制一次最多发送64K,数据不安全，易丢失数据。</p><p><strong>UDP发送数据</strong></p><p>1.创建发送端的 Datagramsocket()对象</p><p>2.创建数据，并把数据打包( Datagrampacket()</p><p>3.调用 Datagramsocket对象的方法发送数据</p><p>4.释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建DatagramSocket对象</span><span class="token class-name">DatagramSocket</span> ds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建发送数据对象 1.内容的字节码数组 2.长度 3.发送地址 4.端口号</span><span class="token class-name">String</span> msg<span class="token operator">=</span><span class="token string">"这是。。。"</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span>address<span class="token punctuation">,</span>port <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.发送数据</span>ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.释放资源 </span>ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UDP接收数据</strong></p><p>1.创建接收端的 Datagramsocket对象</p><p>2.创建一个箱子，用于接收数据</p><p>3.调用 Datagramsockete的方法接收数据井将数据放入箱子中</p><p>4.解析数据包，并把数据在控制台显示</p><p>5.释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建接收端的 Datagramsocket对象</span><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建一个箱子，用于接收数据</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.调用 Datagramsockete的方法接收数据井将数据放入箱子中</span>ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.解析数据包，并把数据在控制台显示</span><span class="token comment">//方法一</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> length <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法二</span><span class="token class-name">Integer</span> length <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.释放资源</span>ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要先启动接收端，否则，发送端发送的数据无人接受，就会丢失。</p><p>如果接收端一直未接受到数据，就会一直在阻塞状态等待。</p><p><strong>UDP通讯方式</strong></p><p>1.单播：一对一</p><p>参照上方</p><p>2.组播：一对多</p><p>组播ip地址范围：224.0.0.0-239.255.255.255</p><p>其中224.0.0.0-224.0.0.255为预留地址，不能使用</p><p>组播的发送端<br>①创建发送端的 Socket对象（ Datagramsocket)<br>②创建数据，并把数据打包( Datagrampacket)<br>③调用 Datagramsocket对象的方法发送数据</p><p>在单插中，这里是发给指定IP的电脑<br>但是在组播当中，这里是发给组地址 </p><p>④释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建DatagramSocket对象</span><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建发送数据对象 1.内容的字节码数组 2.长度 3.发送地址 4.端口号</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"这是。。。"</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里是组播地址</span><span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"224.0.1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> port <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> address<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.发送数据</span>ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.释放资源</span>ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组播的接受端</p><p>1.创建接收端的 Datagramsocket对象</p><p>2.创建一个箱子，用于接收数据</p><p>3.将当前计算机添加到组中</p><p>4.调用 Datagramsockete的方法接收数据井将数据放入箱子中</p><p>5.解析数据包，并把数据在控制台显示</p><p>6.释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建接收端的 MulticastSocket对象</span><span class="token class-name">MulticastSocket</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MulticastSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建一个箱子，用于接收数据</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.将当前计算机添加到组播地址中</span>ms<span class="token punctuation">.</span><span class="token function">joinGroup</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"224.0.1.0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.调用 Datagramsockete的方法接收数据井将数据放入箱子中</span>ms<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.解析数据包，并把数据在控制台显示</span><span class="token class-name">Integer</span> length <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6.释放资源</span>ms<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.广播：一对所有</p><p>广播地址255.255.255.255    </p><p>广播的发送端<br>①创建发送端的 Socket对象（ Datagramsocket)</p><p>②创建数据，并把数据打包( Datagrampacket)</p><p>③调用 Datagramsocket对象的方法发送数据</p><p>在单播中，这里是发给指定IP的电脑<br>但是在广播当中，这里是发给广播地址</p><p>④释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建DatagramSocket对象</span><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建发送数据对象 1.内容的字节码数组 2.长度 3.发送地址 4.端口号</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"这是。。。"</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里是广播地址</span><span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"255.255.255.255"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> port <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> address<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.发送数据</span>ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.释放资源</span>ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>广播的接受端</p><p>1.创建接收端的 Datagramsocket对象</p><p>2.创建一个箱子，用于接收数据</p><p>3.调用 Datagramsockete的方法接收数据井将数据放入箱子中</p><p>4.解析数据包，并把数据在控制台显示</p><p>5.释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建接收端的 MulticastSocket对象</span><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建一个箱子，用于接收数据</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.调用 Datagramsockete的方法接收数据井将数据放入箱子中</span>ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.解析数据包，并把数据在控制台显示</span><span class="token class-name">Integer</span> length <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.释放资源</span>ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-TCP协议"><a href="#2-TCP协议" class="headerlink" title="2.TCP协议"></a>2.TCP协议</h4><p>传输控制协议( Transmission Control Protocol)<br>TCP协议是面向连接的通信协议。<br>速度慢，没有大小限制，数据安全。</p><h5 id="1-相关方法"><a href="#1-相关方法" class="headerlink" title="1.相关方法"></a>1.相关方法</h5><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Socket(InetAddress address,int port)</td><td>创建流套接字并将其连接到指定IP指定端口号</td></tr><tr><td>Socket(String host, int port)</td><td>创建流套接字并将其连接到指定主机上的指定端口号</td></tr><tr><td>InputStream  getInputStream()</td><td>返回此套接字的输入流</td></tr><tr><td>OutputStream getOutputStream()</td><td>返回此套接字的输出流</td></tr><tr><td>ServletSocket(int port)</td><td>创建绑定到指定端口的服务器套接字</td></tr><tr><td>Socket accept()</td><td>监听要连接到此的套接字并接受它</td></tr></tbody></table><h5 id="2-发送数据"><a href="#2-发送数据" class="headerlink" title="2.发送数据"></a>2.发送数据</h5><p>1.创建客户端的Socket对象(Socket)</p><p>2.获取输出流，写数据</p><p>3.释放资源，Socket获取的网络输入输出流，只需通过关闭Socket关闭即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建客户端的Socket对象(Socket)</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取输出流，写数据</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello,tcp,我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源</span>s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-接收数据"><a href="#3-接收数据" class="headerlink" title="3.接收数据"></a>3.接收数据</h5><p>1.创建服务器端的Socket对象(ServerSocket)</p><p>2.侦听要连接到此套接字并接受它</p><p>3.获取输入流，读数据</p><p>4.释放资源，Socket获取的网络输入输出流，只需通过关闭Socket关闭即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建服务器端的Socket对象(ServerSocket)</span><span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//侦听要连接到此套接字并接受它</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取输入流，读数据，并把数据显示在控制台</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> bfr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> st <span class="token operator">=</span> bfr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*以字节流方式输出byte[] bys = new byte[1024];int len = is.read(bys);String data = new String(bys, 0, len);System.out.println("数据是：" + data);*/</span><span class="token comment">//释放资源</span>s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//服务器一般不关闭</span>ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h5><ol><li>accept方法是阻塞的,作用就是等待客户端连接</li><li>客户端创建对象并连接服务器,此时是通过三次握手协议,保证跟服务器之间的连接</li><li>针对客户端来讲,是往外写的,所以是输出流<br>针对服务器来讲,是往里读的,所以是输入流</li><li>read方法也是阻塞的</li><li>客户端在关流的时候,还多了一个往服务器写结束标记的动作</li><li>最后一步断开连接,通过四次挥手协议保证连接终止</li></ol><h5 id="4-三次握手和四次挥手"><a href="#4-三次握手和四次挥手" class="headerlink" title="4.三次握手和四次挥手"></a>4.三次握手和四次挥手</h5><p><strong>三次握手</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/07_TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="07_TCP三次握手"></p><p><strong>四次挥手</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img4/08_TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="08_TCP四次挥手"></p><h2 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h2><h3 id="1-文件上传"><a href="#1-文件上传" class="headerlink" title="1.文件上传"></a>1.文件上传</h3><p><strong>1.客户端</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建Socket对象</span>    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//上传文件需要本地字节输入流</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"H:\\图片\\13537.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//网络输出流用于想服务器发送数据</span>    <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//网络输入流用于获取服务器发送的数据</span>    <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//数组用于接收数据，提高效率</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ps<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//结束标记，告诉服务器，本次上传完毕</span>    socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取服务器接受成功的信息</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放资源</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.服务端</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Socket</span> accept <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//网络输入流，用于接受客户端发送的文件</span>                    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//网络输出流，向服务端返回接受成功的信息</span>                    <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>accept<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取一个随机的字符串作为文件名</span>                    <span class="token class-name">String</span> filename <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//随机生成一个四级目录，作为文件存放位置</span>                    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> dir <span class="token operator">=</span> hashCode <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">;</span>                        path <span class="token operator">+=</span> dir <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">;</span>                        hashCode <span class="token operator">=</span> hashCode <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day16/"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>                    file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//创建本地输出流</span>                    fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token class-name">Integer</span> len<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//读取网络输入流的数据，通过本地输出流保存在本地</span>                        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//通过网络输出流，向服务器发送接收成功的信息。</span>                    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>accept <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="16-反射"><a href="#16-反射" class="headerlink" title="16.反射"></a>16.反射</h1><h2 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1.类加载器"></a>1.类加载器</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>类加载器将经过编译的.class文件加载进内存，加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个 类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可 以通过这个对象看到类的结构。</p><h3 id="2-类加载的时机"><a href="#2-类加载的时机" class="headerlink" title="2.类加载的时机"></a>2.类加载的时机</h3><p>1.创建类的实例（对象）</p><p>2.调用类的类方法</p><p>3.访可类或者接口的类变量，或者为该类变量赋值  </p><p>4.使用反射方式来强制创建某个类或接口对应的awa.lang.Cas对象</p><p>5.初始化某个类的子类</p><p>6.直接使用java.exe命令来运行某个主类</p><h3 id="3-类的加载过程"><a href="#3-类的加载过程" class="headerlink" title="3.类的加载过程"></a>3.类的加载过程</h3><h4 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h4><ol><li>通过类的全类名，获取到这个类</li><li>通过IO流将类的.class文件加载到内存中</li><li>JVM通过获取的.class文件创建一个Class对象</li></ol><h4 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h4><h5 id="1-验证"><a href="#1-验证" class="headerlink" title="1.验证"></a>1.验证</h5><p>验证.class文件中是否符合虚拟机的规范，有没有安全隐患，保证不会危害虚拟机自身安全。</p><h5 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h5><p>为类的类变量（静态变量）分配内存，并为其设置默认值（初始化静态变量）。</p><h5 id="3-解析"><a href="#3-解析" class="headerlink" title="3.解析"></a>3.解析</h5><p>将类的二进制数据流中的符号引用替换为直接引用</p><blockquote><p>在获取的数据流中，有些数据并不能直接解析为源码，需要将其中的符号替换</p><p>例如：</p><p>一个类中如果使用了其他类，那么获取的流中的数据代表这个类的并不是类名，而实一些符号</p></blockquote><h4 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h4><p>根据程序员通过程序制定的主观计划去初始化类变量和其他资源。</p><p>如在程序中，已经为某些静态变量赋值，则将这些值赋给变量（未初始化之前，静态变量的值是准备阶段时，赋予的默认值）</p><h3 id="4-类加载器的分类"><a href="#4-类加载器的分类" class="headerlink" title="4.类加载器的分类"></a>4.类加载器的分类</h3><ul><li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li>Platform class loader：平台类加载器,负责加载JDK中一些特殊的模块</li><li>System class loader：系统类加载器,负责加载用户类路径上所指定的类库</li></ul><ul><li>System的父加载器为Platform</li><li>Platform的父加载器为Bootstrap</li></ul><p>可以通过getParent()方法查看</p><p><strong>双亲委派模型</strong></p><p>当类加载时，会询问当前类加载器及其父加载器是否已加载该类。如果已加载，则取消加载，如果未加载，会逐级查询该类是否被父加载器加载，交由最合适的加载器中最顶级的加载器加载。</p><p><strong>方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static ClassLoader getSystemClassLoader()</td><td>获取系统类加载器</td></tr><tr><td>public InputStream getResourceAsStream(String name)</td><td>加载某一个资源文件</td></tr><tr><td>URL getResource(“路径”)</td><td>获取统一资源定位符，通过其getPath方法，获取绝对路径</td></tr></tbody></table><h2 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a>2.反射</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>在运行状态中，对于任意一个类，都能多知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意属性和方法；这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p><p>通过反射可以调用类中的任意方法（无视权限修饰符）</p><p>先获取配置文件中的信息，动态状取信息井创对象和调用方法</p><h3 id="2-获取Class对象"><a href="#2-获取Class对象" class="headerlink" title="2.获取Class对象"></a>2.获取Class对象</h3><p>1.调用运行时类的属性.class <code>类名.class</code></p><p>2.通过运行时类的对象调用getClass()方法 <code>对象名.getClass()</code></p><p>3.调用Class的静态方法forName() <code>Class.forName(&quot;全类名&quot;)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.调用运行时类的属性.class</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentClass <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.通过运行时类的对象调用getClass()方法</span>    <span class="token class-name">Student</span> student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.调用Class的静态方法forName();</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">TestReflex</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass2 <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token operator">==</span>aClass1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass2<span class="token operator">==</span>studentClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass1<span class="token operator">==</span>aClass2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>结果：<span class="token keyword">class</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token keyword">class</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token keyword">class</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token keyword">class</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-加载配置文件"><a href="#3-加载配置文件" class="headerlink" title="3.加载配置文件"></a>3.加载配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 反射形式加载配置文件* 默认识别路径为src目录下*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> properties<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">TestReflex</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jxy.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-获取对象信息"><a href="#4-获取对象信息" class="headerlink" title="4.获取对象信息"></a>4.获取对象信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jxy</span><span class="token punctuation">;</span><span class="token annotation punctuation">@MyAmmotation</span><span class="token punctuation">(</span><span class="token string">"jxy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token class-name">MyInterface</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@MyAmmotation</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no<span class="token operator">=</span>no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">no</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学号"</span><span class="token operator">+</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-获取运行时类的成员变量信息"><a href="#1-获取运行时类的成员变量信息" class="headerlink" title="1.获取运行时类的成员变量信息"></a>1.获取运行时类的成员变量信息</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">成员变量信息<span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前类及其父类的所有声明为<span class="token keyword">public</span>的属性<span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前类所有属性（不包含父类中的属性）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 获取运行时类的属性结构*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过Class对象的getDeclaredField方法获取对象成员属性对应的Field对象</span>    <span class="token class-name">Field</span> name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span> age <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    age<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过Field对象的set方法设置对象成员属性的值，参数为对象名，属性值</span>    name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    age<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过Field对象的set方法设置对象成员属性的值，参数为对象名，属性值</span>    <span class="token class-name">String</span> stuName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> stuAge <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> age<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuName <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> stuAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 获取运行时类的属性的修饰符、类型、属性名*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前类所有属性（不包含父类中的属性）</span>    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token operator">:</span>declaredFields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>field<span class="token operator">+</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//权限修饰符</span>        <span class="token keyword">int</span> modifiers <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"---------修饰符："</span><span class="token operator">+</span>modifiers<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数据类型</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> type <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"---------数据类型："</span><span class="token operator">+</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//变量名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------属性名："</span><span class="token operator">+</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果    <span class="token keyword">private</span> <span class="token keyword">int</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token punctuation">.</span>no<span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>修饰符：<span class="token number">2</span><span class="token operator">-</span><span class="token keyword">private</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>数据类型：<span class="token keyword">int</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>属性名：no        java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token punctuation">.</span>name<span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>修饰符：<span class="token number">0</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>数据类型：java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>属性名：name            <span class="token keyword">public</span> <span class="token keyword">int</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token punctuation">.</span>age<span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>修饰符：<span class="token number">1</span><span class="token operator">-</span><span class="token keyword">public</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>数据类型：<span class="token keyword">int</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>属性名：age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-获取运行时方法的信息"><a href="#2-获取运行时方法的信息" class="headerlink" title="2.获取运行时方法的信息"></a>2.获取运行时方法的信息</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">获取方法信息，将每个方法信息封装为<span class="token class-name">Method</span>对象<span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前类及其父类的所有声明为<span class="token keyword">public</span>的方法<span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前类所有方法（不包含父类中的方法）<span class="token function">getMethod</span><span class="token punctuation">(</span>方法名<span class="token punctuation">,</span> 参数数据类型的<span class="token keyword">class</span>对象<span class="token punctuation">)</span>：获取名字，参数指定的方法，只能获取声明为<span class="token keyword">public</span>的方法<span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>方法名<span class="token punctuation">,</span> 参数数据类型的<span class="token keyword">class</span>对象<span class="token punctuation">)</span>：获取名字，参数指定的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 获取运行时类的方法结构*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用getMethods():获取当前类及其父类的所有声明为public的方法</span>    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token operator">:</span>methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用getDeclaredMethods：获取当前类所有方法（不包含父类中的方法）</span>    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> declaredMethods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredMethods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//私有无参无返回值</span>    <span class="token class-name">Method</span> eat <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eat<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eat<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//无参有返回值</span>    <span class="token class-name">Method</span> play <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"play"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> player<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>play<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//有参无返回值</span>    <span class="token class-name">Method</span> drink <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"drink"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    drink<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">"红茶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-获取运行时类的构造器"><a href="#3-获取运行时类的构造器" class="headerlink" title="3.获取运行时类的构造器"></a>3.获取运行时类的构造器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">获取构造器信息，封装为<span class="token class-name">Constructor</span>对象<span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前类及其父类的所有声明为<span class="token keyword">public</span>的构造器<span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前类所有构造器（不包含父类中的构造器）<span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>：获取当前类对应参数的声明为<span class="token keyword">public</span>的构造器<span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>获取当前类对应参数的声明为任意修饰符的构造器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用getConstructors():获取当前类及其父类的所有声明为public的构造器</span>    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> constructors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用getDeclaredConstructors()：获取当前类所有构造器（不包含父类中的构造器）</span>    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> declaredConstructors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果<span class="token keyword">public</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">private</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">)</span>com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">public</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-获取运行时类的父类"><a href="#4-获取运行时类的父类" class="headerlink" title="4.获取运行时类的父类"></a>4.获取运行时类的父类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取父类</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> superclass <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取带泛型的父类</span>    <span class="token class-name">Type</span> genericSuperclass <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>genericSuperclass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取泛型类型</span>    <span class="token class-name">ParameterizedType</span> parameterizedType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericSuperclass<span class="token punctuation">;</span>    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> actualTypeArguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actualTypeArguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果<span class="token keyword">class</span> com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Person</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>com<span class="token punctuation">.</span>jxy<span class="token punctuation">.</span><span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-获取指定的结构"><a href="#5-获取指定的结构" class="headerlink" title="5.获取指定的结构"></a>5.获取指定的结构</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取运行时类中权限为public的属性中指定的属性</span>    <span class="token class-name">Field</span> age <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置属性的值，参数一为设置的对象，参数二为值</span>    age<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> o <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取运行时类中指定的属性</span>    <span class="token class-name">Field</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保证当前属性是可访问的</span>    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">"jj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>结果<span class="token number">22</span>jj<span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取指定的方法，参数一：方法名，参数二，方法的参数</span>    <span class="token class-name">Method</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保证当前方法是可访问的</span>    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用invoke()方法执行此方法，返回值即为调用方法的返回值</span>    <span class="token class-name">Object</span> jj <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"jj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//静态方法</span>    <span class="token class-name">Method</span> test <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保证当前方法是可访问的</span>    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用invoke()方法执行此方法，返回值即为调用方法的返回值</span>    <span class="token comment">//参数Student.class</span>    <span class="token class-name">Object</span> invoke <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>invoke<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>结果姓名：jjjj静态方法调用<span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建运行时类的对象"><a href="#5-创建运行时类的对象" class="headerlink" title="5.创建运行时类的对象"></a>5.创建运行时类的对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 反射创建对应的运行时类的对象* 使用Class对象调用newInstance()方法。* 条件：创建对象对应的类要有无参构造方法。且在需要创建时，拥有调用这个构造方法的权限。*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用无参构造方法</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jxy.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用有参构造方法</span>    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取私有构造方法时，要先使用setAccessible方法获取私有权限</span>    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> student1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"jj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="17-JDK8新特性"><a href="#17-JDK8新特性" class="headerlink" title="17.JDK8新特性"></a>17.JDK8新特性</h1><h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1.Lambda表达式"></a>1.Lambda表达式</h2><h3 id="1-函数式接口"><a href="#1-函数式接口" class="headerlink" title="1.函数式接口"></a>1.函数式接口</h3><p>只包含一个抽象方法的接口，称为函数式接口；</p><p>我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检 查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个 接口是一个函数式接口。</p><h3 id="2-Lambda表达式"><a href="#2-Lambda表达式" class="headerlink" title="2.Lambda表达式"></a>2.Lambda表达式</h3><h4 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1.简介"></a>1.简介</h4><p>Lambda 是一个匿名函数，我们可以把 Lambda 表达式理解为是一段可以 传递的代码（将代码像数据一样进行传递）。</p><p>使用Lambda的前提是函数式接口；</p><p><strong>Lambda表达式可以分为三部分</strong></p><p><code>(形式参数)-&gt;&#123;方法体&#125;</code></p><p>1.左侧：形参列表，指定了 Lambda 表达式需要的参数列表</p><p>2.Lambda操作符：</p><p>3.右侧：方法体，指定了 Lambda 体，是抽象方法的实现逻辑，也即 Lambda 表达式要执行的功能。</p><p>当有形参只有一个时，括号可以省略.</p><p>当方法体只有一句时，大括号可以省略，但是方法体结尾要去掉作为语句结束标志的分号。</p><p>只有return语句时，不写return关键字，直接写返回值。</p><h4 id="2-使用条件"><a href="#2-使用条件" class="headerlink" title="2.使用条件"></a>2.使用条件</h4><p>1.有一个接口</p><p>2.接口中只有抽象方法（可以有默认方法）</p><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h4><h5 id="1-无参无返回值"><a href="#1-无参无返回值" class="headerlink" title="1.无参无返回值"></a>1.无参无返回值</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">testLambda</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是匿名内部类，用于对比"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">testLambda</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testLambda</span><span class="token punctuation">(</span><span class="token class-name">TestInterface</span> inte<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        inte<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">TestInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-有参数"><a href="#2-有参数" class="headerlink" title="2.有参数"></a>2.有参数</h5><p>参数的传递分为两步</p><ol><li>整个lambda表达式作为参数传入方法的形参列表，作为方法的实参。</li><li>将方法中，调用接口中方法的参数传入lambda表达式中的参数列表中。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//参数列表中，参数的数据类型也可以省略</span>        <span class="token function">testLambda</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">"lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testLambda</span><span class="token punctuation">(</span><span class="token class-name">TestInterface</span> inte<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        inte<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">TestInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-有返回值"><a href="#3-有返回值" class="headerlink" title="3.有返回值"></a>3.有返回值</h5><p>当方法只有返回语句时，可以省略大括号及分号，同时省略关键字<code>return</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambdaReturn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">testReturn</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testReturn</span><span class="token punctuation">(</span><span class="token class-name">TestImpl</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">TestImpl</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> anteger b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3.方法引用"></a>3.方法引用</h3><p>1.使用情境：当要传递给 Lambda体的操作，已经有实现的方法了，可以使用方法引用。</p><p>2.方法引用，本质上就是 Lambda表达式， ambda表达式作为函数式接口的实例。所以方法引用，也是函数式接口的实例<br>使用格式：类（或对象）：方法名</p><p>3.三种格式</p><p>1.类 :: 静态方法</p><p>2.对象 :: 非静态方法</p><p>3.类 :: 非静态方法</p><h2 id="2-接口新方法"><a href="#2-接口新方法" class="headerlink" title="2.接口新方法"></a>2.接口新方法</h2><p>1.静态方法</p><p>2.默认方法</p><h2 id="3-新增时间日期API"><a href="#3-新增时间日期API" class="headerlink" title="3.新增时间日期API"></a>3.新增时间日期API</h2><p>LocalDate</p><p>LocalTime</p><p>LocalDateTime</p><p>Period</p><p>Duration</p><h2 id="4-Stream流"><a href="#4-Stream流" class="headerlink" title="4.Stream流"></a>4.Stream流</h2><h3 id="1-简介-5"><a href="#1-简介-5" class="headerlink" title="1.简介"></a>1.简介</h3><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p><p>注意： </p><p>①Stream 自己不会存储元素。 </p><p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 </p><p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p><p>Stream 的操作三个步骤 </p><p>1.创建 Stream 一个数据源（如：集合、数组），获取一个流 </p><p>2.中间操作 一个中间操作链，对数据源的数据进行处理 </p><p>3.终止操作(终端操作) 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</p><h3 id="2-获取-Stream"><a href="#2-获取-Stream" class="headerlink" title="2.获取 Stream"></a>2.获取 Stream</h3><h4 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ins<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2 List集合"></a>2 List集合</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-Set集合"><a href="#3-Set集合" class="headerlink" title="3 Set集合"></a>3 Set集合</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> sets<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-Map集合"><a href="#4-Map集合" class="headerlink" title="4 Map集合"></a>4 Map集合</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> maps<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> maps<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stb'<span class="token function">hream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-通过Stream的of-方法创建"><a href="#5-通过Stream的of-方法创建" class="headerlink" title="5.通过Stream的of()方法创建"></a>5.通过Stream的of()方法创建</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integerStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-创建无限流"><a href="#6-创建无限流" class="headerlink" title="6.创建无限流"></a>6.创建无限流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">可以使用静态方法 <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>创建无限流。迭代<span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> seed<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> f<span class="token punctuation">)</span>生成<span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> s<span class="token punctuation">)</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">-></span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Stream最终方法"><a href="#3-Stream最终方法" class="headerlink" title="3. Stream最终方法"></a>3. Stream最终方法</h3><p>最终方法会使流关闭</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>foreach()</td><td>遍历流中数据</td></tr><tr><td>count()</td><td>获取流中数据数量</td></tr><tr><td>collect</td><td>将流中数据返回到一个集合中</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>collect</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//toList</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//toSet</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sets <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//toMap</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zs,23"</span><span class="token punctuation">,</span> <span class="token string">"ls,24"</span><span class="token punctuation">,</span> <span class="token string">"ww,25"</span><span class="token punctuation">,</span> <span class="token string">"ll,26"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> maps <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>    s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Stream中间方法"><a href="#4-Stream中间方法" class="headerlink" title="4.Stream中间方法"></a>4.Stream中间方法</h3><p>使用这些方法只能用于输出数据，并不能修改集合中原有数据</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>filter()</td><td>过滤流中数据，保留结果为true的数据</td></tr><tr><td>limit(long num)</td><td>保留流中前num个数据</td></tr><tr><td>skip(long num)</td><td>去除流中前num个数据</td></tr><tr><td>concat(Stream s1,Stream s2)</td><td>将两个流合并</td></tr><tr><td>distinct()</td><td>去除流中重复数据</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//filter</span>lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//limit</span>lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//skip</span>lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//concat</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//distinct</span>lists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="18-JDK-9-amp-JDK-10-amp-JDK-11"><a href="#18-JDK-9-amp-JDK-10-amp-JDK-11" class="headerlink" title="18.JDK 9 &amp; JDK 10 &amp; JDK 11"></a>18.JDK 9 &amp; JDK 10 &amp; JDK 11</h1>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="2020/09/18/Git/"/>
      <url>2020/09/18/Git/</url>
      
        <content type="html"><![CDATA[<p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p><a id="more"></a><h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h2><p>1.可以通过版本控制将某个文件或项目回溯到过去某个时间点的状态。</p><p>2.可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p><h2 id="3-分类"><a href="#3-分类" class="headerlink" title="3.分类"></a>3.分类</h2><h3 id="1-集中化版本控制系统"><a href="#1-集中化版本控制系统" class="headerlink" title="1.集中化版本控制系统"></a>1.集中化版本控制系统</h3><p>代表：svn</p><p>通过一个集中管理的服务器，将所有版本都都上传保存在这台服务器，其他客户端通过连接到这台服务器从而获取想要得到的版本信息及内容。</p><p><strong>优点</strong></p><ol><li>每个人都可以在一定程度上看到其他人在作什么。</li><li>管理员可以轻松管理每个开发者的权限。</li><li>集中化的版本控制系统维护数据更容易。</li></ol><p><strong>缺点</strong></p><p>​    如果服务器发生单点故障，轻则导致无法进行协同开发（服务器宕机），影响开发进度；重则会导致版本历史记录丢失（磁盘故障）。</p><h3 id="2-分布式版本控制系统"><a href="#2-分布式版本控制系统" class="headerlink" title="2.分布式版本控制系统"></a>2.分布式版本控制系统</h3><p>代表：Git</p><p>每个客户端都将代码仓库完整的镜像下来，每一次提取操作都会将代码仓库进行完整备份。</p><p>分布式的本控制系统在官理项目时存放的不是项目版本与版本之间的差异它存的是索引（所需磁盘空间很少所以每个客户端都可以放下整个项目的历史记录）。</p><p><strong>优点</strong></p><p>分布式的版本控制系统出现之后解决了集中式版本控制系统的缺陷：<br>1.断网的情况下也可以进行开发（因为版本控制是在本地进行的）<br>2.使用github进行团队协作哪怕g挂了每个客广端保存的也都是整个完整的项目（包含历史记录的）。</p><p><strong>缺点</strong></p><p>每次保存都是完整快照，需要内存稍大（但经过Git开发团队使用算法等进行了压缩，实际上大不了多少，且回滚速度更快）</p><h1 id="2-Git配置"><a href="#2-Git配置" class="headerlink" title="2.Git配置"></a>2.Git配置</h1><p>Git使用Linux命令</p><p>1.查看当前配置</p><pre class="line-numbers language-none"><code class="language-none">git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-配置信息（初始化）"><a href="#1-配置信息（初始化）" class="headerlink" title="1.配置信息（初始化）"></a>1.配置信息（初始化）</h2><p>项目级别/仓库级别</p><p>1.仅在当前本地库范围内有效（优先级最高）</p><pre class="line-numbers language-none"><code class="language-none">git config user.name &quot;jxy&quot;git config user.email 1551903505@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>信息保存位置：./.git/config 文件</p><p>删除配置</p><pre class="line-numbers language-none"><code class="language-none">git config [--global] --unset 配置项目名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.登录当前操作系统的用户范围</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;jxy&quot;git config --global user.email 1551903505@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>信息保存位置：~/.gitconfig 文件</p><p>3.当前PC机</p><pre class="line-numbers language-none"><code class="language-none">git config --system user.name &quot;jxy&quot;git config --system user.email 1551903505@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>信息保存位置：/etc/.gitconfig 文件</p><p>4.配置编码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global i18n.commitencoding utf-8 git config --global gui.encoding utf-8  git config --global i18n.logoutputencoding utf-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-区域"><a href="#2-区域" class="headerlink" title="2.区域"></a>2.区域</h2><p>1.工作区</p><p>2.暂存区</p><p>3.版本库</p><p>在工作区编写的内容会保存在缓存区，在提交时，会将缓存区中的内容提交到版成本库。</p><p>创建工作空间</p><p>在选择作为工作空间的文件夹中打开Git bash Here</p><p>执行指令</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在指定的文件夹中会创建一个隐藏目录.git，这个文件夹就是Git仓库（版本库），就保存在objects目录中。</p><table><thead><tr><th>文件/文件夹</th><th>作用</th></tr></thead><tbody><tr><td>hooks</td><td>目录包含客户端或服务端的钩子脚本</td></tr><tr><td>info</td><td>包含一个全局性排除文件</td></tr><tr><td>logs</td><td>保存日志信息</td></tr><tr><td>objects</td><td>目录存储所有数据内容</td></tr><tr><td>refs</td><td>目录存储指向数据（分支）的提交对象的指针</td></tr><tr><td>conf</td><td>文件包含项目特有的配置选项</td></tr><tr><td>description</td><td>用来显示对仓库的描述信息</td></tr><tr><td>HEAD</td><td>文件指示目前被检出的分支</td></tr><tr><td>index</td><td>文件保存暂存区信息</td></tr></tbody></table><h1 id="3-Git底层命令"><a href="#3-Git底层命令" class="headerlink" title="3.Git底层命令"></a>3.Git底层命令</h1><h2 id="1-Git对象"><a href="#1-Git对象" class="headerlink" title="1.Git对象"></a>1.Git对象</h2><p>key:value组成的键值对，在git内部是一个blob类型对象</p><p>Git的核心部分是一个简单的键值对数据库。你可以向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索该内容</p><h3 id="1-向教据库写入内容并返回对应键值"><a href="#1-向教据库写入内容并返回对应键值" class="headerlink" title="1.向教据库写入内容并返回对应键值"></a>1.向教据库写入内容并返回对应键值</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">echo &#39;test content I git hash-object -w --stdin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>选项</strong></p><p>-w选项表示hash- object命令存储数据对象；若不指比选项，则该命令仅返回对应的键值<br>–stdin（ standard input）选项示该命令从标准输入读取内容；若不指定此选项，则需在命令尾部给出待存储文件的路径</p><pre class="line-numbers language-none"><code class="language-none">git hash-object-w 文件路径存文件git hash-object 文件路径返回应文件的键值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>返回</strong></p><p>该命令输出一个长度为40个字符的校验和。这是一个SHA-1哈希值，前两个字符用于命名子目录，其余38个字符作为文件名。</p><h3 id="2-查看GIt如何存储数据"><a href="#2-查看GIt如何存储数据" class="headerlink" title="2.查看GIt如何存储数据"></a>2.查看GIt如何存储数据</h3><pre class="line-numbers language-none"><code class="language-none">find .git&#x2F;objects -type f(f代表文件)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-根据键获取值"><a href="#3-根据键获取值" class="headerlink" title="3.根据键获取值"></a>3.根据键获取值</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">git cat-file -p hash值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>选项</strong></p><p>-p选项可指小该命令自动判断内容的类型，并为我们显示格式友好的内容</p><p>-t显示存储键值对的类型</p><p><strong>返回</strong></p><p>对应文件的内容</p><h2 id="2-树对象"><a href="#2-树对象" class="headerlink" title="2.树对象"></a>2.树对象</h2><p>树对象（tree object），它能解决文件名保存的问题，也允许我们将多个文件组织到一起。Git以一种类似于UNIX文件系统的方式存储内容。所有内容均以树对象和数据对象（git对象）的形式存储，其中树对象对应了UNX中的目录项，数据对象（g对象则大致上对应文件内容。一个树对象包含了一条或多条记录（每条记录含有一个指向gt对象或者子树对象的sHA-1指针，以及相应的模式、类型、文件名信息）.一个树对象也可以包含另一个树对象。</p><h3 id="1-构建树对象"><a href="#1-构建树对象" class="headerlink" title="1.构建树对象"></a><strong>1.构建树对象</strong></h3><p>我们可以通过 update- index； write-tree；read-tree等命令来构建<br>树对像并塞入到暂存区</p><p>1.利用 update-index命令为…的首个版本，创建一个暂存区。并通过 write-tree命令生成树对象</p><pre class="line-numbers language-none"><code class="language-none">git update-index --add --cacheinfo 文件模式 hash值 起一个文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git write-tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-文件模式"><a href="#2-文件模式" class="headerlink" title="2.文件模式"></a><strong>2.文件模式</strong></h3><p>100644    表明是个普通文件<br>100755    表个可执行文件<br>120000    表示一个符号链接</p><p>选项</p><p>–add选项<br>因为此前该文件并不在暂存区中,首次需要–add</p><p>–cacheinfo选项<br>因为将要添加的文件位于Git数据库中，而不是位于当前目录下,所有需要–cacheinfo</p><h3 id="3-版本更新演示"><a href="#3-版本更新演示" class="headerlink" title="3.版本更新演示"></a>3.版本更新演示</h3><p>1.创建工作空间</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.创建第一个文件</p><pre class="line-numbers language-none"><code class="language-none">vim first.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建first.txt的Git对象</p><pre class="line-numbers language-none"><code class="language-none">git hash-object -w first.txt返回hash值ab602ce30671b3169a536781b4b520711688dc9a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.查看版本库</p><pre class="line-numbers language-none"><code class="language-none">find .git&#x2F;objects&#x2F; -type f结果.git&#x2F;objects&#x2F;ab&#x2F;602ce30671b3169a536781b4b520711688dc9a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.查看这个对象的对象类型</p><pre class="line-numbers language-none"><code class="language-none">git cat-file -t ab602ce30671b3169a536781b4b520711688dc9a结果blob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6.利用 update-index命令为test.txt文件的首个版本，创建一个暂存区。</p><pre class="line-numbers language-none"><code class="language-none">git update-index --add --cacheinfo 100644 ab602ce30671b3169a536781b4b520711688dc9a first.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.查看缓存区</p><pre class="line-numbers language-none"><code class="language-none">git ls-files -s结果100644 ab602ce30671b3169a536781b4b520711688dc9a 0       first.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8.通过 write-tree命令生成树对象</p><pre class="line-numbers language-none"><code class="language-none">git write-tree结果cc9f1cc81a9d595b03e71d6dc29be2f15c1db66e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>9.查看版本仓库</p><pre class="line-numbers language-none"><code class="language-none">find .git&#x2F;objects&#x2F; -type f.git&#x2F;objects&#x2F;ab&#x2F;602ce30671b3169a536781b4b520711688dc9a       first.txt文件的第一个版本(blob对象).git&#x2F;objects&#x2F;cc&#x2F;9f1cc81a9d595b03e71d6dc29be2f15c1db66e       项目的第一个版本(tree对象)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>10.查看write-tree生成的对象的对象类型</p><pre class="line-numbers language-none"><code class="language-none">git cat-file -t cc9f1cc81a9d595b03e71d6dc29be2f15c1db66e结果tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>11.创建第二个文件second.txt</p><pre class="line-numbers language-none"><code class="language-none">vim second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.创建first.txt的Git对象</p><pre class="line-numbers language-none"><code class="language-none">git hash-object -w second.txt返回hash值85115c0639143fe8aeea56c1298aaa805bebae5f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>13.查看版本库</p><pre class="line-numbers language-none"><code class="language-none">find .git&#x2F;objects&#x2F; -type f结果.git&#x2F;objects&#x2F;85&#x2F;115c0639143fe8aeea56c1298aaa805bebae5fsecond.txt文件的第一个版本(blob对象).git&#x2F;objects&#x2F;ab&#x2F;602ce30671b3169a536781b4b520711688dc9afirst.txt文件的第一个版本(blob对象).git&#x2F;objects&#x2F;cc&#x2F;9f1cc81a9d595b03e71d6dc29be2f15c1db66e项目的第一个版本(tree对象)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14.查看这个对象的对象类型</p><pre class="line-numbers language-none"><code class="language-none">git cat-file -t 85115c0639143fe8aeea56c1298aaa805bebae5f结果blob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>15.将test.txt文件的首个版本加入暂存区。</p><pre class="line-numbers language-none"><code class="language-none">git update-index --add --cacheinfo 100644 85115c0639143fe8aeea56c1298aaa805bebae5f second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>16.查看缓存区</p><pre class="line-numbers language-none"><code class="language-none">git ls-files -s结果100644 ab602ce30671b3169a536781b4b520711688dc9a 0       first.txt100644 85115c0639143fe8aeea56c1298aaa805bebae5f 0       second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>17.修改first.txt,形成第二个版本</p><pre class="line-numbers language-none"><code class="language-none">vim first.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>18.再次创建first.txt的Git对象</p><pre class="line-numbers language-none"><code class="language-none">git hash-object -w first.txt结果f6002c10a4cd018109453a441b3071c284f55438<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>19.查看版本库</p><pre class="line-numbers language-none"><code class="language-none">find .git&#x2F;objects&#x2F; -type f.git&#x2F;objects&#x2F;85&#x2F;115c0639143fe8aeea56c1298aaa805bebae5ffirst.txt文件的第一个版本(blob对象).git&#x2F;objects&#x2F;ab&#x2F;602ce30671b3169a536781b4b520711688dc9asecond.txt文件的第一个版本(blob对象).git&#x2F;objects&#x2F;cc&#x2F;9f1cc81a9d595b03e71d6dc29be2f15c1db66e项目的第一个版本(tree对象).git&#x2F;objects&#x2F;f6&#x2F;002c10a4cd018109453a441b3071c284f55438first.txt文件的第二个版本(blob对象)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>20.将test.txt文件的第二个版本加入暂存区</p><pre class="line-numbers language-none"><code class="language-none">git update-index --add --cacheinfo 100644 f6002c10a4cd018109453a441b3071c284f55438 first.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>21.查看暂存区</p><pre class="line-numbers language-none"><code class="language-none">git ls-files -s100644 f6002c10a4cd018109453a441b3071c284f55438 0       first.txt   &#x2F;&#x2F;第二个版本将第一个版本覆盖100644 85115c0639143fe8aeea56c1298aaa805bebae5f 0       second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>22.通过 write-tree命令生成树对象</p><pre class="line-numbers language-none"><code class="language-none">git write-tree结果3d7c1813c2d827ea22793e1353daa92e6d79f588<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>23.查看版本仓库</p><pre class="line-numbers language-none"><code class="language-none">find .git&#x2F;objects&#x2F; -type f.git&#x2F;objects&#x2F;3d&#x2F;7c1813c2d827ea22793e1353daa92e6d79f588项目的第二个版本(tree对象).git&#x2F;objects&#x2F;85&#x2F;115c0639143fe8aeea56c1298aaa805bebae5ffirst.txt文件的第一个版本(blob对象).git&#x2F;objects&#x2F;ab&#x2F;602ce30671b3169a536781b4b520711688dc9asecond.txt文件的第一个版本(blob对象).git&#x2F;objects&#x2F;cc&#x2F;9f1cc81a9d595b03e71d6dc29be2f15c1db66e项目的第一个版本(tree对象).git&#x2F;objects&#x2F;f6&#x2F;002c10a4cd018109453a441b3071c284f55438first.txt文件的第二个版本(blob对象)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>24.查看write-tree生成的对象的对象类型</p><pre class="line-numbers language-none"><code class="language-none">git cat-file -t 3d7c1813c2d827ea22793e1353daa92e6d79f588结果tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>25.查看tree对象</p><pre class="line-numbers language-none"><code class="language-none">git cat-file -p 3d7c1813c2d827ea22793e1353daa92e6d79f588100644 blob f6002c10a4cd018109453a441b3071c284f55438    first.txt100644 blob 85115c0639143fe8aeea56c1298aaa805bebae5f    second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-提交对象"><a href="#3-提交对象" class="headerlink" title="3.提交对象"></a>3.提交对象</h2><p>1.创建提交对象</p><pre class="line-numbers language-none"><code class="language-none">$ echo &#39;first commit&#39; | git commit-tree 3d7c1813c2d827ea22793e1353daa92e6d79f588(要提交的对象的hash值) -p 父提交对象(在以后查看时，可以找到上一个提交对象，方便回滚)结果19c12d7f03a29c97dc9ed3b7027546706b01a2e4(提交对象的hash值)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.查看提交对象的类型</p><pre class="line-numbers language-none"><code class="language-none">git cat-file -t 19c12d7f03a29c97dc9ed3b7027546706b01a2e4commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.查看提交对象的内容</p><pre class="line-numbers language-none"><code class="language-none">git cat-file -p 19c12d7f03a29c97dc9ed3b7027546706b01a2e4tree 3d7c1813c2d827ea22793e1353daa92e6d79f588author jxy &lt;1551903505@qq.com&gt; 1592804912 +0800committer jxy &lt;1551903505@qq.com&gt; 1592804912 +0800first commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-命令总结"><a href="#4-命令总结" class="headerlink" title="4.命令总结"></a>4.命令总结</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git hash-object -w 文件路径</td><td>生成一个key（hash值）:value（压缩后的文件内容）键值对存到.git/objects</td></tr><tr><td>git update-index –add –cacheinfo 文件模式 hash值 起一个文件名</td><td>往暂存区添加一条记录（git对象对应上文件名）在到git/objects</td></tr><tr><td>git write-tree</td><td>生成一个树对象存到git/objects</td></tr><tr><td>echo ‘first commit’ git commit-tree  要提交的对象的hash值</td><td>生成一个提交对象存到git/objects</td></tr><tr><td>git cat-file -p hash值</td><td>获取对应对象的内容</td></tr><tr><td>git cat-file -t hash值</td><td>获取对应对象的类型</td></tr><tr><td>git ls-files -s</td><td>获取暂存区内容</td></tr></tbody></table><h1 id="4-Git本地操作（高级命令）"><a href="#4-Git本地操作（高级命令）" class="headerlink" title="4.Git本地操作（高级命令）"></a>4.Git本地操作（高级命令）</h1><h2 id="1-最简单流程"><a href="#1-最简单流程" class="headerlink" title="1.最简单流程"></a>1.最简单流程</h2><p>1.创建git仓库</p><p>2.对工作目录进行修改</p><p>3.存入版本库</p><pre class="line-numbers language-none"><code class="language-none">git add .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git add 目录 操作是<strong>先将git对象放入版本库，再将其放入缓存区。</strong></p><p>相当于做了以下几个底层命令</p><pre class="line-numbers language-none"><code class="language-none">git hash-object -w 文件名(多少个文件修改就执行多少次)git update-index ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.提交</p><pre class="line-numbers language-none"><code class="language-none">git commit -m &quot;注释&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于做了以下几个底层命令</p><pre class="line-numbers language-none"><code class="language-none">git write-treegit commit-tree ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Git高级指令"><a href="#2-Git高级指令" class="headerlink" title="2.Git高级指令"></a>2.Git高级指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>初始化仓库</td></tr><tr><td>git add 目录</td><td>将修改添加到缓存区</td></tr><tr><td>git status</td><td>确定文件当前区域什么状态</td></tr><tr><td>git rm 文件名</td><td>移除文件</td></tr><tr><td>git mv 旧文件名 新文件名</td><td>修改文件名</td></tr><tr><td>git diff</td><td>查看哪些修改还没有缓存</td></tr><tr><td>git log</td><td>查看历史记录</td></tr><tr><td>git reflog</td><td>查看完整历史信息</td></tr></tbody></table><p><strong>1.记录每次更新到仓库</strong></p><p>工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪<br>        已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是已提交，已修改或者已暂存。<br>        所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。<br>        初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为已提交；在编辑过某些文件之后，Git将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件。使用Git时的文件状态变化</p><p><strong>检查文件状态</strong></p><pre class="line-numbers language-none"><code class="language-none">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-高级指令"><a href="#3-高级指令" class="headerlink" title="3.高级指令"></a>3.高级指令</h2><h3 id="1-跟踪新文件（暂存）"><a href="#1-跟踪新文件（暂存）" class="headerlink" title="1.跟踪新文件（暂存）"></a><strong>1.跟踪新文件（暂存）</strong></h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">git add 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>作用：</strong>跟踪一个新文件<br>再次运行 git status命令，会看到 README文件已被跟踪，并处于暂存<br>状态：</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        new file:   second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        只要在“ Changes to be committed”这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。在git add后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实 git add的潜台词就是把目标文件快照放入暂存区域，也就是 add file into staged area，同时未曾跟踪过的文件标记为已跟踪。</p><h3 id="2-暂存已修改文件"><a href="#2-暂存已修改文件" class="headerlink" title="2.暂存已修改文件"></a><strong>2.暂存已修改文件</strong></h3><p>​        现在 README文件都已暂存，下次提交时就会一并记录到仓库。假设此时你想要在 README里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行 git status看看</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        new file:   second.txtChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        modified:   second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        README文件出现了两次！一次算已修改，一次算已暂存，这怎么可能呢？好吧，实际上Git只不过暂存了你运行 git add命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本所以，运行了git add之后又作了修订的文件，需要重新运行 git add把最新版本重新暂存起来</p><h3 id="3-查看已暂存和未暂存的更新"><a href="#3-查看已暂存和未暂存的更新" class="headerlink" title="3.查看已暂存和未暂存的更新"></a>3.查看已暂存和未暂存的更新</h3><p>​        实际上 git status的显示比较简单，仅仅是列出了修改过的文件，如果要查看具体修改了什么地方，可以用 git diff命令这个命令它已经能解决我们两个问题了：</p><p>当前做的那些更新还没有暂存？有哪些更新已经暂存起来准备好了下次提交？</p><p>1.当前做的哪些更新还没有暂存？</p><p><strong>命令：</strong> </p><pre class="line-numbers language-none"><code class="language-none">git diff（不加参数直接输入 git diff）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.有哪些更新已经暂存起来准备好了下次提交？</p><p>命令： </p><p>git diff– cached</p><p>git diff- -staged 查看哪些命令已经缓存了，但没提交</p><pre class="line-numbers language-none"><code class="language-none">$ git diffwarning: LF will be replaced by CRLF in second.txt.The file will have its original line endings in your working directorydiff --git a&#x2F;second.txt b&#x2F;second.txtindex 89bed6d..3bb890d 100644--- a&#x2F;second.txt+++ b&#x2F;second.txt@@ -1 +1,2 @@+ssssss sssssss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-提交更新"><a href="#4-提交更新" class="headerlink" title="4.提交更新"></a>4.提交更新</h3><p>​        当暂存区域已经准备妥当可以提交时，在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用 git status看下，是不是都已暂存起来了，然后再运行提交命令 git commt<br><strong>命令：</strong> </p><pre class="line-numbers language-none"><code class="language-none">git commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：这种方式会启动文本编辑器以便输入本次提交的说明</p><p>默认的提交消息包含最后一次运行 git status的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行，</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外也可以用-m参数后跟提交说明的方式，在一行命令中提交更新：<br><strong>命令：</strong></p><pre class="line-numbers language-none"><code class="language-none">git commit-m &quot;注释信息&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理每一次运行提交操作，都是对你项目作一次快照以后可以回到这个状态，或者进行比较</p><h3 id="5-跳过使用暂存区域"><a href="#5-跳过使用暂存区域" class="headerlink" title="5.跳过使用暂存区域"></a>5.跳过使用暂存区域</h3><p>尽管使用暂存域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git提供了个跳过使用暂存区域的方式，只要在提交的时候，给git commit加上-a选项，Git就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add步骤</p><p><strong>命令：</strong></p><pre class="line-numbers language-none"><code class="language-none">gt commit -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-移除文件"><a href="#6-移除文件" class="headerlink" title="6.移除文件"></a>6.移除文件</h3><p>要从Git中移除某个文件，就必须要从已跟踪文件清单中注册删除（确切地说，是在暂存区域注册删除），然后提交。可以用rm命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p><p><strong>方法1</strong></p><p>从工作目录中手工删除文件</p><pre class="line-numbers language-none"><code class="language-none">rm 文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次提交之后，产生的新的版本中的树对象和提交对象就不包含已删除的文件了。</p><pre class="line-numbers language-none"><code class="language-none">git add .&#x2F;git commit -m &quot;...&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>方法2</strong></p><pre class="line-numbers language-none"><code class="language-none">$ git rm second.txtrm &#39;second.txt&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        deleted:    second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git commit -m &quot;xc&quot;[master 40dc365] xc 1 file changed, 2 deletions(-) delete mode 100644 second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是，在版本中仍有改文件的git对象。以便需要时进行恢复。</p><h3 id="7-修改文件名"><a href="#7-修改文件名" class="headerlink" title="7.修改文件名"></a>7.修改文件名</h3><p><strong>方法1</strong></p><p>1.修改文件名</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mv 旧文件名 新文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add&#x2F;rm &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        deleted:    two.txtUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)        second.txtno changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)显示two.txt已删除，新增second.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.提交到版本库</p><pre class="line-numbers language-none"><code class="language-none">git add .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        renamed:    two.txt -&gt; second.txt显示renamed,检测到名字的修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.提交</p><pre class="line-numbers language-none"><code class="language-none">git commit -m &quot;...&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>方法2</strong></p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git mv first.txt one.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ lltotal 1-rw-r--r-- 1 Lenovo 197121 9 Jun 22 14:47 one.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        renamed:    first.txt -&gt; one.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git commit -m &quot;delete&quot;[master f00373d] delete 1 file changed, 0 insertions(+), 0 deletions(-) rename first.txt &#x3D;&gt; one.txt (100%)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-查看历史纪录"><a href="#8-查看历史纪录" class="headerlink" title="8.查看历史纪录"></a>8.查看历史纪录</h3><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史.完成这个任务最简单而又有效的工具是git log命令</p><p><strong>命令：</strong></p><pre class="line-numbers language-none"><code class="language-none">git log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git logcommit 1b394a26b4fb4f31cd4d83a5ca6c69aa2002084a (HEAD -&gt; master)Author: jxy &lt;1551903505@qq.com&gt;Date:   Mon Jun 22 15:58:59 2020 +0800    ...commit 02c8b87bfdef7cb4583062c335ea17be6e69962dAuthor: jxy &lt;1551903505@qq.com&gt;Date:   Mon Jun 22 15:55:27 2020 +0800    ...commit 340f0e291e212ad5cf5de967508876842789673cAuthor: jxy &lt;1551903505@qq.com&gt;Date:   Mon Jun 22 14:48:15 2020 +0800    这是注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认不用任何参数的话，git1og会按提交时间列出所有的更新，最近的更新排在最上面。正如你所看到的，这个命令会列出每个提交的SHA1校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p><p>参数</p><pre class="line-numbers language-none"><code class="language-none">$ git log --pretty&#x3D;oneline1b394a26b4fb4f31cd4d83a5ca6c69aa2002084a (HEAD -&gt; master) ...02c8b87bfdef7cb4583062c335ea17be6e69962d ...340f0e291e212ad5cf5de967508876842789673c 这是注释$ git log --oneline1b394a2 (HEAD -&gt; master) ...02c8b87 ...340f0e2 这是注释行前的hash值都是提交对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-配置别名"><a href="#9-配置别名" class="headerlink" title="9.配置别名"></a>9.配置别名</h3><p><strong>命令：</strong></p><pre class="line-numbers language-none"><code class="language-none">git config --global alias.别名 &quot;要配置别名的指令(不包括git)&quot;如果命令只有一个单词，不需要加&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>使用：</strong></p><pre class="line-numbers language-none"><code class="language-none">git 别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实例</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git config --global alias.loa &quot;log --oneline --decorate --graph --all&quot;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git loa*   bfbfa71 (HEAD -&gt; master) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-Git分支操作"><a href="#5-Git分支操作" class="headerlink" title="5.Git分支操作"></a>5.Git分支操作</h1><h2 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h2><p>​        几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间而Git的分支模型极其的高效轻量的。是Gi的必杀技特性，也正因为这一特性，使得Git从众多版本控制系统中脱颖而出.</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h2><p><strong>1.创建分支</strong></p><pre class="line-numbers language-none"><code class="language-none">git branch 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意<br>git branch分支名创建一个新分支，并不会自动切换到新分支中。</p><p>新建一个分支，并使分支指向指定的提交对象</p><pre class="line-numbers language-none"><code class="language-none">git branch 分支名 hash值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.获取分支列表</strong></p><pre class="line-numbers language-none"><code class="language-none">git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git branch* first  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3.删除分支</strong></p><pre class="line-numbers language-none"><code class="language-none">git branch -d 分支名强制删除git branch -D 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4.查看每个分支的最后一次提交</strong></p><pre class="line-numbers language-none"><code class="language-none">git branch -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.新建一个分支，并且指针指向对应的提交对象</strong></p><pre class="line-numbers language-none"><code class="language-none">git checkout -b 分支名 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>6.查看哪些分支已经合并到当前分支</strong></p><pre class="line-numbers language-none"><code class="language-none">git branch -merged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看哪些分支已经合并到当前分支</strong></p><pre class="line-numbers language-none"><code class="language-none">git branch -no-merged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>7.查看当前分支所指对象</strong></p><pre class="line-numbers language-none"><code class="language-none">git log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>8.切换分支</strong></p><pre class="line-numbers language-none"><code class="language-none">git checkout 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>9.查看项目分支历史</strong></p><pre class="line-numbers language-none"><code class="language-none">git log --oneline --decorate --graph --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>10.分支合并</strong></p><pre class="line-numbers language-none"><code class="language-none">git merge 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a><strong>3.注意</strong></h2><p>分支切换会改变你工作目录中的文件<br>在切换分支时，一宝要注意你工作目录里的文件会被改变。如果是切换到一个较旧的分支你的工作目录会恢复到该分支最后一次提交时的样子。如果Git不能干净利落地完成这个任务，它将禁止切换分支.</p><h2 id="4-合并冲突案例"><a href="#4-合并冲突案例" class="headerlink" title="4.合并冲突案例"></a>4.合并冲突案例</h2><p>1.新建工作空间</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.创建文件并提交</p><pre class="line-numbers language-none"><code class="language-none">vim one.txtgit add .&#x2F;git commit -m &quot;master_first&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.查看当前记录</p><pre class="line-numbers language-none"><code class="language-none">$ git log --oneline88edac5 (HEAD -&gt; master) first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.新建分支一 jj 进行操作</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git checkout -b &quot;jj&quot;Switched to a new branch &#39;jj&#39;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git log --oneline1ccf4b2 (HEAD -&gt; jj, master) second88edac5 firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ vim one.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git commit -a -m &quot;jj_first&quot;warning: LF will be replaced by CRLF in one.txt.The file will have its original line endings in your working directory[jj c4fb805] jj_first 1 file changed, 2 insertions(+), 2 deletions(-)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git statusOn branch jjnothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.中断分支一操作，回归master</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout masterSwitched to branch &#39;master&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.新建分支二 jxy 进行操作</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git checkout -b jxySwitched to a new branch &#39;jxy&#39;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jxy)$ git log --oneline1ccf4b2 (HEAD -&gt; jxy, master) second88edac5 firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jxy)$ vim one.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jxy)$ git add .&#x2F;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jxy)$ git commit -m &quot;jxy_finish&quot;[jxy 61aad90] jxy_finish 1 file changed, 3 insertions(+), 3 deletions(-)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jxy)$ git statusOn branch jxynothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.分支二操作完成，返回master</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout masterSwitched to branch &#39;master&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.查看分支历史记录</p><pre class="line-numbers language-none"><code class="language-none">$ git log --oneline --decorate --graph --all* 61aad90 (jxy) jxy_finish| * c4fb805 (jj) jj_first|&#x2F;* 1ccf4b2 (HEAD -&gt; master) second* 88edac5 first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.合并分支 jxy</p><pre class="line-numbers language-none"><code class="language-none">$ git merge jxyUpdating 1ccf4b2..61aad90Fast-forward one.txt | 6 +++--- 1 file changed, 3 insertions(+), 3 deletions(-)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.查看分支历史记录</p><pre class="line-numbers language-none"><code class="language-none">$ git log --oneline --decorate --graph --all* 61aad90 (HEAD -&gt; master, jxy) jxy_finish| * c4fb805 (jj) jj_first|&#x2F;* 1ccf4b2 second* 88edac5 first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.删除已完成分支</p><pre class="line-numbers language-none"><code class="language-none">$ git branch -d jxyDeleted branch jxy (was 61aad90).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12.查看分支历史记录</p><pre class="line-numbers language-none"><code class="language-none">$ git log --oneline --decorate --graph --all* 61aad90 (HEAD -&gt; master) jxy_finish| * c4fb805 (jj) jj_first|&#x2F;* 1ccf4b2 second* 88edac5 first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.返回分支 jj 并完成操作</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git checkout jjSwitched to branch &#39;jj&#39;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ vim one.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git add .&#x2F;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git commit -m &quot;jj_finish&quot;[jj 5af3f75] jj_finish 1 file changed, 1 insertion(+), 1 deletion(-)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git dtatusgit: &#39;dtatus&#39; is not a git command. See &#39;git --help&#39;.The most similar command is        statusLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git statusOn branch jjnothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14.返回master</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git checkout masterSwitched to branch &#39;master&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>15.查看历史分支记录</p><pre class="line-numbers language-none"><code class="language-none">$ git log --oneline --decorate --graph --all* 5af3f75 (jj) jj_finish* c4fb805 jj_first| * 61aad90 (HEAD -&gt; master) jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>16.合并分支 jj</p><pre class="line-numbers language-none"><code class="language-none">$ git merge jjAuto-merging one.txtCONFLICT (content): Merge conflict in one.txtAutomatic merge failed; fix conflicts and then commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示有合并冲突</strong></p><p>17.查看状态</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterYou have unmerged paths.  (fix conflicts and run &quot;git commit&quot;)  (use &quot;git merge --abort&quot; to abort the merge)Unmerged paths:  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)        both modified:   one.txtno changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>18.打开冲突文件，修改冲突</p><pre class="line-numbers language-none"><code class="language-none">vim one.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>19.查看状态</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterYou have unmerged paths.  (fix conflicts and run &quot;git commit&quot;)  (use &quot;git merge --abort&quot; to abort the merge)Unmerged paths:  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)        both modified:   one.txtno changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>20.修复冲突</p><pre class="line-numbers language-none"><code class="language-none">git add .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>21.查看状态</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterAll conflicts fixed but you are still merging.  (use &quot;git commit&quot; to conclude merge)Changes to be committed:        modified:   one.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>22.提交</p><pre class="line-numbers language-none"><code class="language-none">$ git commit -m &quot;fix finish&quot;[master bfbfa71] fix finish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>23.查看历史记录</p><pre class="line-numbers language-none"><code class="language-none">$ git log --oneline --decorate --graph --all*   bfbfa71 (HEAD -&gt; master) fix finish|\| * 5af3f75 (jj) jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>24.删除完成分支</p><pre class="line-numbers language-none"><code class="language-none">$ git branch -d jjDeleted branch jj (was 5af3f75).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>25.查看历史记录</p><pre class="line-numbers language-none"><code class="language-none">$ git log --oneline --decorate --graph --all*   bfbfa71 (HEAD -&gt; master) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Git存储"><a href="#5-Git存储" class="headerlink" title="5.Git存储"></a>5.Git存储</h2><h3 id="1-使用情景"><a href="#1-使用情景" class="headerlink" title="1.使用情景"></a>1.使用情景</h3><p>在分支中以进行修改，现需要切换到其他分支进行工作，但已有修改并未完成，不想进行提交，可以先进行储存，需要时在进行引用。</p><p>储存是将内容保存在栈中，但实际上是系统自动进行了提交，但我们不能直接看见。</p><h3 id="2-操作-1"><a href="#2-操作-1" class="headerlink" title="2.操作"></a>2.操作</h3><p><strong>1.存储</strong></p><pre class="line-numbers language-none"><code class="language-none">git stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.获取存储列表</strong></p><pre class="line-numbers language-none"><code class="language-none">git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.引用存储</strong></p><pre class="line-numbers language-none"><code class="language-none">git stash apply 存储名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.删除存储</strong></p><pre class="line-numbers language-none"><code class="language-none">git stash drop 存储名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.获取存储并将其从栈中删除</strong></p><pre class="line-numbers language-none"><code class="language-none">git stash pop 不加存储名只会拿最新的一个加存储名获取指定的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h3><p>1.进行修改</p><pre class="line-numbers language-none"><code class="language-none">vim one.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.查看状态</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch jjChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        modified:   one.txtno changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.查看存储列表</p><pre class="line-numbers language-none"><code class="language-none">$ git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.存储</p><pre class="line-numbers language-none"><code class="language-none">$ git stashSaved working directory and index state WIP on jj: dda7c11 ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.查看存储列表</p><pre class="line-numbers language-none"><code class="language-none">$ git stash liststash@&#123;0&#125;: WIP on jj: dda7c11 ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.查看状态</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch jjnothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.获取存储</p><pre class="line-numbers language-none"><code class="language-none">$ git stash apply stash@&#123;0&#125;On branch jjChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        modified:   one.txtno changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.查看状态，查看存储列表</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git stashSaved working directory and index state WIP on jj: dda7c11 ...Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git statusOn branch jjnothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.删除存储</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git stash drop stash@&#123;0&#125;Dropped stash@&#123;0&#125; (072beb43a83703d9f322a69a9d15f18662029791)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (jj)$ git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.获取与删除可以合并操作</p><pre class="line-numbers language-none"><code class="language-none">git stash pop 存储名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="6-撤销-amp-重置-amp-恢复-amp-Tag"><a href="#6-撤销-amp-重置-amp-恢复-amp-Tag" class="headerlink" title="6.撤销&amp;重置&amp;恢复&amp;Tag"></a>6.撤销&amp;重置&amp;恢复&amp;Tag</h1><h2 id="1-撤销-amp-重置"><a href="#1-撤销-amp-重置" class="headerlink" title="1.撤销&amp;重置"></a>1.撤销&amp;重置</h2><p><strong>1.撤销修改</strong></p><pre class="line-numbers language-none"><code class="language-none">方法一git checkout -- 文件名方法二git restore 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例</p><p><strong>方法一</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ vim a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ cat a.txta.txt v1Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ vim a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ cat a.txta.txt v1a.txt v2Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git checkout -- a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ cat a.txta.txt v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法二</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ cat a.txta.txt v1a.txt v2Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git restore a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ cat a.txta.txt v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.撤销缓存</strong></p><pre class="line-numbers language-none"><code class="language-none">方法一git reset HEAD 文件名方法二git restore --staged 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例</p><p><strong>方法一</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ vim a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git add .&#x2F;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        modified:   a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git ls-files -s100644 38c7912943d1b1f3b89c966f977100f88372f993 0       a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git cat-file -p 38c7912943d1b1f3b89c966f977100f88372f993a.txt v1a.txt v2Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git reset HEAD a.txtUnstaged changes after reset:M       a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git ls-files -s100644 22850f5c973f8662c74da608062bc96d7edd10a6 0       a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git cat-file -p 22850f5c973f8662c74da608062bc96d7edd10a6a.txt v1Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        modified:   a.txtno changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法二</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git add .&#x2F;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        modified:   a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git ls-files -s100644 38c7912943d1b1f3b89c966f977100f88372f993 0       a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git cat-file -p 38c7912943d1b1f3b89c966f977100f88372f993a.txt v1a.txt v2Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git restore --staged a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git ls-files -s100644 22850f5c973f8662c74da608062bc96d7edd10a6 0       a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git cat-file -p  22850f5c973f8662c74da608062bc96d7edd10a6a.txt v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.撤销提交</strong></p><pre class="line-numbers language-none"><code class="language-none">git commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用场景：</strong></p><ol><li>提交时注释写错</li><li>内容写错,重新改正，再次提交,使用指令，修改注释，可以覆盖上次注释</li><li>git add之后又修改，但没有再次git add,直接提交，同上</li></ol><p>示例</p><p><strong>情景一</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git commit  -m &quot;...&quot;[master fb4d5cd] ... 1 file changed, 1 insertion(+), 1 deletion(-)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git statusOn branch masternothing to commit, working tree cleanLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git loa* fb4d5cd (HEAD -&gt; master) ...* 8c46555 1  commit  firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git commit --amend[master 0466510] update finish Date: Tue Jun 23 10:34:17 2020 +0800 1 file changed, 1 insertion(+), 1 deletion(-)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git loa* 0466510 (HEAD -&gt; master) update finish* 8c46555 1  commit  first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>情景二</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git loa* 0466510 (HEAD -&gt; master) update finish* 8c46555 1  commit  firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ vim a.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git add .&#x2F;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git commit --amend[master 1d065f1] update really finish Date: Tue Jun 23 10:34:17 2020 +0800 1 file changed, 2 insertions(+), 1 deletion(-)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;four (master)$ git loa* 1d065f1 (HEAD -&gt; master) update really finish* 8c46555 1  commit  first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>reset</strong></p><pre class="line-numbers language-none"><code class="language-none">git reset --soft HEAD~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本质上是撤销了上一次git commit命令。当你在运行 git commit时，Git会创建一个新的提交，并移动HEAD所指向的分支来使其指向该提交。当你将它 reset回HEAD~（HEAD的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。现在你可以更新索引并再次运行 git commit来完成 git commit– amend所要做的事情了。</p><p><strong>基于索引值操作</strong></p><p>git reset –hard [局部索引值]</p><p>git reset –hard a6ace91</p><p>强制转到某条记录，且该记录之后的内容消失。（看不见，但仍存在git reflog）</p><p>使用^符号：只能后退</p><p>git reset –hard HEAD^ </p><p> 注：一个^表示后退一步，n 个表示后退 n 步 </p><p>使用~符号：只能后退 </p><p>git reset –hard HEAD~n</p><p>注：表示后退 n 步 4.3.6 reset </p><p><strong>命令的三个参数对比</strong> </p><p><strong>–soft 参数</strong> </p><pre class="line-numbers language-none"><code class="language-none">git reset --soft HEAD~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅仅在本地库移动 HEAD 指针</p><p> <strong>–mixed 参数</strong> </p><pre class="line-numbers language-none"><code class="language-none">git reset [--mixed] HEAD~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地库移动 HEAD 指针</p><p>重置暂存区 </p><p><strong>–hard 参数</strong></p><pre class="line-numbers language-none"><code class="language-none">git reset --hard HEAD~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地库移动 HEAD 指针 </p><p>重置暂存区 </p><p>重置工作区</p><p><strong>git checkout hash值与git reset –hard hash值区别</strong></p><p>1.checkout只动指针</p><p>​    hard指针和分支一起动</p><p>2.checkout对工作目录是安全的</p><p>​    hard会强制覆盖工作目录</p><h2 id="2-数据恢复"><a href="#2-数据恢复" class="headerlink" title="2.数据恢复"></a>2.数据恢复</h2><ol><li><p>硬重置（少用）</p><pre class="line-numbers language-none"><code class="language-none">git reset --hard hash值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>分支</p><pre class="line-numbers language-none"><code class="language-none">git branch 创建分支名 要恢复的记录hash值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-打Tag"><a href="#3-打Tag" class="headerlink" title="3.打Tag"></a>3.打Tag</h2><h3 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h3><p>Git可以给历史中的某一个提交打上标签，以示重要。比较有代表性的是人们会使用这个功能来标记发布结点（v1.0等等）。</p><h3 id="2-操作-2"><a href="#2-操作-2" class="headerlink" title="2.操作"></a>2.操作</h3><h4 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1.创建标签"></a>1.创建标签</h4><h5 id="1-给最新的提交对象打Tag"><a href="#1-给最新的提交对象打Tag" class="headerlink" title="1.给最新的提交对象打Tag"></a>1.给最新的提交对象打Tag</h5><pre class="line-numbers language-none"><code class="language-none">git tag 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-给指定的提交对象打Tag"><a href="#2-给指定的提交对象打Tag" class="headerlink" title="2.给指定的提交对象打Tag"></a>2.给指定的提交对象打Tag</h5><pre class="line-numbers language-none"><code class="language-none">git tag 版本号 提交对象hash值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git loa*   bfbfa71 (HEAD -&gt; master) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git tag v1.1.0 88edac5Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git loa*   bfbfa71 (HEAD -&gt; master) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 (tag: v1.1.0) firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git tag v2.0.0Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git loa*   bfbfa71 (HEAD -&gt; master, tag: v2.0.0) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 (tag: v1.1.0) firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git tag v1.1.5 c4fb805Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git loa*   bfbfa71 (HEAD -&gt; master, tag: v2.0.0) fix finish|\| * 5af3f75 jj_finish| * c4fb805 (tag: v1.1.5) jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 (tag: v1.1.0) first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2查看标签"><a href="#2查看标签" class="headerlink" title="2查看标签"></a>2查看标签</h4><h5 id="1-列出标签"><a href="#1-列出标签" class="headerlink" title="1.列出标签"></a>1.列出标签</h5><pre class="line-numbers language-none"><code class="language-none">git tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">$ git tagv1.1.0v1.1.5v2.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-查看特定标签"><a href="#2-查看特定标签" class="headerlink" title="2.查看特定标签"></a>2.查看特定标签</h5><pre class="line-numbers language-none"><code class="language-none">git show tag名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">$ git show v2.0.0commit bfbfa71e205ff863a700e791272d2b6be010c9a0 (HEAD -&gt; master, tag: v2.0.0)Merge: 61aad90 5af3f75Author: jxy &lt;1551903505@qq.com&gt;Date:   Mon Jun 22 19:53:31 2020 +0800    fix finishdiff --cc one.txtindex f5ff703,3b5f263..ffa0a08--- a&#x2F;one.txt+++ b&#x2F;one.txt@@@ -1,10 -1,10 +1,10 @@@  1  2  3- 4 -4   4-2++4    4-2  5  6- 7 -7   7-2 -8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-删除标签"><a href="#3-删除标签" class="headerlink" title="3.删除标签"></a>3.删除标签</h4><pre class="line-numbers language-none"><code class="language-none">git tag -d tag名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong></p><p>上述命令并不会从任何远程仓库甲移除这个标签，你必须使用</p><pre class="line-numbers language-none"><code class="language-none">git push&lt; &lt;remote&gt; refs&#x2F;tags&#x2F;&lt;tagname&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来更新你的远程仓库：</p><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git tag -d v1.1.5Deleted tag &#39;v1.1.5&#39; (was c4fb805)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git loa*   bfbfa71 (HEAD -&gt; master, tag: v2.0.0) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 (tag: v1.1.0) first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-检出标签"><a href="#4-检出标签" class="headerlink" title="4.检出标签"></a>4.检出标签</h4><p>如果你想查看某个标签所指向的文件版本，可以使用 git checkout命令</p><pre class="line-numbers language-none"><code class="language-none">git checkout tag名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然说这会使你的仓库处于“分离头指针（ detached HEAD）”状态。在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化，但你的新提交将不属于任何分支，并且将无法访问，除非访问确切的提交哈希。因此，如果你需要进行更改一一比如说你正在修复旧版本的错误一一这通常需要创建一个新分支：</p><pre class="line-numbers language-none"><code class="language-none">git checkout -b &quot;分支名&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git loa*   bfbfa71 (HEAD -&gt; master, tag: v2.0.0) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 (tag: v1.1.0) firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (master)$ git checkout v1.1.0Note: switching to &#39;v1.1.0&#39;.You are in &#39;detached HEAD&#39; state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by switching back to a branch.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -c with the switch command. Example:  git switch -c &lt;new-branch-name&gt;Or undo this operation with:  git switch -Turn off this advice by setting config variable advice.detachedHead to falseHEAD is now at 88edac5 firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three ((v1.1.0))$ git loa*   bfbfa71 (tag: v2.0.0, master) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 (HEAD, tag: v1.1.0) firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three ((v1.1.0))$ git checkout -b tag1.1.0Switched to a new branch &#39;tag1.1.0&#39;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;three (tag1.1.0)$ git loa*   bfbfa71 (tag: v2.0.0, master) fix finish|\| * 5af3f75 jj_finish| * c4fb805 jj_first* | 61aad90 jxy_finish|&#x2F;* 1ccf4b2 second* 88edac5 (HEAD -&gt; tag1.1.0, tag: v1.1.0) first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-Git特点-amp-工作流程"><a href="#7-Git特点-amp-工作流程" class="headerlink" title="7.Git特点&amp;工作流程"></a>7.Git特点&amp;工作流程</h1><h2 id="1-Git特点"><a href="#1-Git特点" class="headerlink" title="1.Git特点"></a>1.Git特点</h2><p>◆直接记录快照，而非差异比较<br>◆近乎所有操作都是本地执行<br>◆时刻保持数据完整性<br>◆多数操作仅添加数据<br>◆文件的三种状态</p><h2 id="2-Git工作流程"><a href="#2-Git工作流程" class="headerlink" title="2.Git工作流程"></a>2.Git工作流程</h2><p>​        每个项目都有一个Gt目录（git）它是Git用来保存元数据和对象数据库<br>的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里<br>面的数据。<br><strong>1.在工作目录中修改某些文件</strong></p><p>​        从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从Git目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。</p><p><strong>2.保存到暂存区域，对暂存区做快照</strong><br>        暂存区域只不过是个简单的文件，一般都放在Git目录中。有时候人们<br>会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</p><p><strong>3.提交更新，将保存在暫存区域的文件快照永久转储到本地数据库（Git目录）中</strong></p><p>​        我们可以从文件所处的位置来判断状态：如果是Git目录中保存看的特定版本文件，就属于口提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态</p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github$ git initInitialized empty Git repository in F:&#x2F;Git&#x2F;Github&#x2F;.git&#x2F;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git remote add first https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.gitLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git remote -vfirst   https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git (fetch)first   https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git (push)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git config --listdiff.astextplain.textconv&#x3D;astextplainfilter.lfs.clean&#x3D;git-lfs clean -- %ffilter.lfs.smudge&#x3D;git-lfs smudge -- %ffilter.lfs.process&#x3D;git-lfs filter-processfilter.lfs.required&#x3D;truehttp.sslbackend&#x3D;opensslhttp.sslcainfo&#x3D;D:&#x2F;Git&#x2F;mingw64&#x2F;ssl&#x2F;certs&#x2F;ca-bundle.crtcore.autocrlf&#x3D;truecore.fscache&#x3D;truecore.symlinks&#x3D;falsepull.rebase&#x3D;falsecredential.helper&#x3D;managergui.encoding&#x3D;utf-8i18n.commitencoding&#x3D;gbksvn.pathnameencoding&#x3D;gbkcore.quotepath&#x3D;falseuser.name&#x3D;jxyuser.email&#x3D;1551903505@qq.comalias.loa&#x3D;log --oneline --decorate --graph --allcore.repositoryformatversion&#x3D;0core.filemode&#x3D;falsecore.bare&#x3D;falsecore.logallrefupdates&#x3D;trueLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git config user.name &quot;jin&quot;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git config user.email &quot;1551903505@qq.com&quot;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git loaLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ vim new.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git add .&#x2F;warning: LF will be replaced by CRLF in new.txt.The file will have its original line endings in your working directoryLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git commit -m &quot;first use Github&quot;[master (root-commit) b143bed] first use Github 1 file changed, 1 insertion(+) create mode 100644 new.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git statusOn branch masternothing to commit, working tree cleanLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git loa* b143bed (HEAD -&gt; master) first use GithubLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git push first masterEnumerating objects: 3, done.Counting objects: 100% (3&#x2F;3), done.Writing objects: 100% (3&#x2F;3), 222 bytes | 222.00 KiB&#x2F;s, done.Total 3 (delta 0), reused 0 (delta 0), pack-reused 0To https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git * [new branch]      master -&gt; master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-远程操作-amp-Github"><a href="#8-远程操作-amp-Github" class="headerlink" title="8.远程操作&amp;Github"></a>8.远程操作&amp;Github</h1><table><thead><tr><th align="left">指令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">git remote add 别名 远程仓库url</td><td align="left">为远程仓库配置别名</td></tr><tr><td align="left">git remote -v</td><td align="left">查看别名</td></tr><tr><td align="left">git push 远程仓库别名 上传分支名</td><td align="left">将本地仓库上传到远程仓库</td></tr><tr><td align="left">git clone 远程仓库url</td><td align="left">克隆远程仓库</td></tr><tr><td align="left">git push 别名 提交分支名</td><td align="left">将本地分支提交到远程仓库</td></tr><tr><td align="left">git fetch 别名</td><td align="left">更新本地仓库（需要与本地分支合并）</td></tr><tr><td align="left">git pull</td><td align="left">更新本地仓库</td></tr><tr><td align="left">git push 别名 分支名:远程仓库中分支名</td><td align="left">推送本地分支到远程仓库，并指定远程仓库中分支命名</td></tr><tr><td align="left">git branch -vv</td><td align="left">查看设置的所有跟踪分支</td></tr><tr><td align="left">git checkout –track 远程分支名</td><td align="left">创建分支并直接绑定远程跟踪分支（创建的分支名与远程分支名相同）</td></tr><tr><td align="left">git checkout -b 分支名 远程分支名</td><td align="left">创建分支并直接绑定远程跟踪分支</td></tr><tr><td align="left">git push 别名 –delete 分支名</td><td align="left">删除远程仓库分支</td></tr><tr><td align="left">git remote prune 别名 –dry-run</td><td align="left">列出仍在远程跟踪但远程已被删除的无用分支</td></tr><tr><td align="left">git remote prune 别名</td><td align="left">清除仍在远程跟踪但远程已被删除的无用分支</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="1-团队操作"><a href="#1-团队操作" class="headerlink" title="1.团队操作"></a>1.团队操作</h2><p><strong>1.创建远程仓库（使用Github）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/Github%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png"></p><p><strong>2.创建本地仓库</strong></p><p><strong>3.为远程仓库配置别名&amp;用户名</strong></p><p><strong>为远程仓库配置别名</strong></p><pre class="line-numbers language-none"><code class="language-none">git remote add 别名 远程仓库url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git remote add first https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>查看别名</strong></p><pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git remote -vfirst   https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git (fetch)first   https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.将本地仓库上传到远程仓库</strong></p><pre class="line-numbers language-none"><code class="language-none">$ git push 远程仓库别名 上传分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git push first masterEnumerating objects: 3, done.Counting objects: 100% (3&#x2F;3), done.Writing objects: 100% (3&#x2F;3), 222 bytes | 222.00 KiB&#x2F;s, done.Total 3 (delta 0), reused 0 (delta 0), pack-reused 0To https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git * [new branch]      master -&gt; master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.下载远程仓库到本地</strong></p><ol><li><p>赋值远程仓库中项目url</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%A4%8D%E5%88%B6%E9%A1%B9%E7%9B%AEurl.png"></p></li><li><p>在自己的本地仓库中克隆项目</p><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">git clone 项目url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认克隆时为远程仓库起的别名为 origin</p><pre><code>    远程仓库名字“origin”与分支名字&quot; master一样，在Git中并没有任问特别的含义一样。同时 master是当你运行 git init时默认的起始分支名字，原因仅仅是它的广泛使用， origin是当你运行 git clone时默认的远程仓库名字。如果你运行 git clone -o booyah，那么你默认的远程仓库别名为 booyah</code></pre><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five$ git clone https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.gitCloning into &#39;jxy_first&#39;...remote: Enumerating objects: 3, done.remote: Counting objects: 100% (3&#x2F;3), done.remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0Unpacking objects: 100% (3&#x2F;3), 202 bytes | 1024 bytes&#x2F;s, done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%85%8B%E9%9A%86%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png"></p></li><li><p>克隆的项目文件夹中打开Git就可以进行操作了。</p></li></ol><p><strong>6.项目经理邀请成员加入团队</strong></p><p>​        如果你想与他人合作，并想給他们提交的权限，你需要把他们添加为Collaborators”.如果Ben，Jef， Louise都在 GitHub上注册了，<br>你想给他们推送的权限，你可以将他们添加到你的项目。这样做会给他们推送”权限，就是说他们对项目有读写的权限</p><p>​        点击边栏底部的” Settings”链接</p><p>​        然后从左侧菜单中选择” Collaborators”.然后，在输入框中填写用户名，点击” Add collaborator如果你想授权给多个人，你可以多次重复这个步骤。如果你想收回权限，点击他们同一行右侧的</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E9%82%80%E8%AF%B7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E9%82%80%E8%AF%B72.png"></p><p><strong>7.成员接受邀请</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%90%8C%E6%84%8F.png"></p><p><strong>8.成员提交操作</strong></p><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">$ git push 别名 提交分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">$ git push origin masterEnumerating objects: 5, done.Counting objects: 100% (5&#x2F;5), done.Writing objects: 100% (3&#x2F;3), 251 bytes | 251.00 KiB&#x2F;s, done.Total 3 (delta 0), reused 0 (delta 0), pack-reused 0remote: This repository moved. Please use the new location:remote:   https:&#x2F;&#x2F;github.com&#x2F;new-rain&#x2F;jxy_first.gitTo https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first.git   b143bed..e7537d0  master -&gt; master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9.更新提交</strong></p><p>方法一</p><pre class="line-numbers language-none"><code class="language-none">git fetch 别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不能在本地master分支直接更新，需要使用远程跟踪分支进行更新操作，在使用本地master分支进行合并</p><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git fetch firstremote: Enumerating objects: 5, done.remote: Counting objects: 100% (5&#x2F;5), done.remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0Unpacking objects: 100% (3&#x2F;3), 231 bytes | 0 bytes&#x2F;s, done.From https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first   b143bed..e7537d0  master     -&gt; first&#x2F;masterLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ lltotal 1-rw-r--r-- 1 Lenovo 197121 6 Jun 23 16:14 new.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ cat new.txtfirst********************************直接使用本地master分支并不能获取更新******************************************Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git statusOn branch masternothing to commit, working tree cleanLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git checkout first&#x2F;masterNote: switching to &#39;first&#x2F;master&#39;.You are in &#39;detached HEAD&#39; state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by switching back to a branch.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -c with the switch command. Example:  git switch -c &lt;new-branch-name&gt;Or undo this operation with:  git switch -Turn off this advice by setting config variable advice.detachedHead to falseHEAD is now at e7537d0 yu firstLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github ((e7537d0...))$ git loa* e7537d0 (HEAD, first&#x2F;master) yu first* b143bed (master) first use GithubLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github ((e7537d0...))$ lltotal 1-rw-r--r-- 1 Lenovo 197121 15 Jun 23 18:25 new.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github ((e7537d0...))$ cat new.txtfirstsecond*********************************************使用远程跟踪分支获取更新成功****************************************Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github ((e7537d0...))$ git statusHEAD detached at first&#x2F;masternothing to commit, working tree cleanLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github ((e7537d0...))$ git checkout masterPrevious HEAD position was e7537d0 yu firstSwitched to branch &#39;master&#39;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git merge first&#x2F;masterUpdating b143bed..e7537d0Fast-forward new.txt | 1 + 1 file changed, 1 insertion(+)Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ cat new.txtfirstsecond****************************************合并之后，本地master分支更新成功****************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二</p><pre class="line-numbers language-none"><code class="language-none">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前提：本体分支跟踪远程跟踪分支</p><h2 id="2-远程跟踪分支"><a href="#2-远程跟踪分支" class="headerlink" title="2.远程跟踪分支"></a>2.远程跟踪分支</h2><p>​        远程跟踪分支是远程分支状态的引用。它们是你不能移动的本地分支。当你做任何网络通信操作时，它们会自动移动。</p><p>​        它们以（ remote）（ branch）形式命名，例如，如果你想要看你最后次与远程仓库 origin通信时 master分支的状态，你可以查<br>看 origin/master分支。</p><p>​        当克隆一个仓库时，它通常会自动地创建一个master分支及其对应远程跟踪分支。其他的远程跟踪分支需要创建对应分支在进行绑定操作。</p><p>​        假设你的网络里有一个在git.ourcompany.com的Git服务器。如果你从这里克隆，Git的clone命令会为你自动将其命名为origin，拉取它的所有数据，创建一个指向它的 master分支的指针，并且在本地将其命名为 origin/ master。Git也会给你一个与 origin/ master分支在指向同一个地方的本地 master分支，这样你就有工作的基础。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%BF%9C%E7%A8%8B%E8%B7%9F%E8%B8%AA%E5%88%86%E6%94%AF.png"></p><h2 id="3-操作远程仓库分支"><a href="#3-操作远程仓库分支" class="headerlink" title="3.操作远程仓库分支"></a>3.操作远程仓库分支</h2><p>1.推送分支到远程仓库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git push 别名 分支名给远程仓库中分支名命名git push 别名 分支名:远程仓库中分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;h&#x2F;新建文件夹&#x2F;SpringCloud-3 (master)$ git commit -m &quot;springcloud-config&quot;[master (root-commit) 47c3647] springcloud-config 4 files changed, 7 insertions(+) create mode 100644 README.md create mode 100644 config-dev.yml create mode 100644 config-prod.yml create mode 100644 config-test.ymlLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;h&#x2F;新建文件夹&#x2F;SpringCloud-3 (master)$ git logcommit 47c3647e384fec4ed6952dbd3db1adbedf911e6b (HEAD -&gt; master)Author: jxy &lt;1551903505@qq.com&gt;Date:   Mon Aug 10 08:25:51 2020 +0800    springcloud-configLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;h&#x2F;新建文件夹&#x2F;SpringCloud-3 (master)$ git remote add first https:&#x2F;&#x2F;gitee.com&#x2F;new-rain&#x2F;SpringCloud-3.gitLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;h&#x2F;新建文件夹&#x2F;SpringCloud-3 (master)$ git push first masterEnumerating objects: 6, done.Counting objects: 100% (6&#x2F;6), done.Delta compression using up to 4 threadsCompressing objects: 100% (2&#x2F;2), done.Writing objects: 100% (6&#x2F;6), 407 bytes | 407.00 KiB&#x2F;s, done.Total 6 (delta 0), reused 0 (delta 0), pack-reused 0remote: Powered by GITEE.COM [GNK-5.0]To https:&#x2F;&#x2F;gitee.com&#x2F;new-rain&#x2F;SpringCloud-3.git * [new branch]      master -&gt; master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.其他人想要操作改分支先要获取到远程跟踪分支</p><pre class="line-numbers language-none"><code class="language-none">git fetch 别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。其他用户想要获取对应的远程仓库中分支内容，需要创建分支，并合并对应远程跟踪分支，以获取内容</p><pre class="line-numbers language-none"><code class="language-none">git checkout -b 分支名git merge 远程跟踪分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.如果想要对其进行操作，需要将本地分支与远程跟踪分支进行绑定</p><pre class="line-numbers language-none"><code class="language-none">git branch -u 远程跟踪分支名也可以直接在创建分支时进行绑定git checkout -b 分支名 远程分支名git checkout --track 远程分支名               创建的分支名与远程分支名相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.进行操作</p><p>6.见更改推送到远程分支</p><pre class="line-numbers language-none"><code class="language-none">git push 别名 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><p><strong>1.获取到对应的远程跟踪分支</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git loa* e7537d0 (HEAD -&gt; master, first&#x2F;master) yu first* b143bed first use GithubLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git pullThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details.    git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with:    git branch --set-upstream-to&#x3D;first&#x2F;&lt;branch&gt; masterLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git loa* e7537d0 (HEAD -&gt; master, first&#x2F;master) yu first* b143bed first use Github    fetchLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git fetch firstremote: Enumerating objects: 7, done.remote: Counting objects: 100% (7&#x2F;7), done.remote: Compressing objects: 100% (4&#x2F;4), done.remote: Total 6 (delta 0), reused 6 (delta 0), pack-reused 0Unpacking objects: 100% (6&#x2F;6), 538 bytes | 1024 bytes&#x2F;s, done.From https:&#x2F;&#x2F;github.com&#x2F;old-city-new-rain&#x2F;jxy_first * [new branch]      second     -&gt; first&#x2F;secondLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git loa* 42cffb9 (first&#x2F;second) second first* 17d816d yu_second* e7537d0 (HEAD -&gt; master, first&#x2F;master) yu first* b143bed first use Github<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.获取到对应的远程跟踪分支后，创建分支，绑定远程跟踪分支就可以直接获取分支内容</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (master)$ git checkout -b secondSwitched to a new branch &#39;second&#39;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (second)$ git branch -u first&#x2F;secondBranch &#39;second&#39; set up to track remote branch &#39;second&#39; from &#39;first&#39;.Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (second)$ git pullUpdating e7537d0..42cffb9Fast-forward three.txt | 1 + two.txt   | 2 ++ 2 files changed, 3 insertions(+) create mode 100644 three.txt create mode 100644 two.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;Github (second)$ lltotal 3-rw-r--r-- 1 Lenovo 197121 15 Jun 23 18:26 new.txt-rw-r--r-- 1 Lenovo 197121 14 Jun 24 09:15 three.txt-rw-r--r-- 1 Lenovo 197121 10 Jun 24 09:15 two.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-操作冲突"><a href="#4-操作冲突" class="headerlink" title="4.操作冲突"></a>4.操作冲突</h2><p>如果两人同时修改同一文件，在push时，由于文件中内容不同，会引起冲突；</p><p>当别人在修改了某一文件更新了远程仓库之后，另一个人也修改了同一文件，当他同步本地仓库时，也会产生冲突。</p><p>这时，就需要沟通修改，在修改完冲突后，再次更新远程仓库。此时，别人再次更新本地仓库，不会产生冲突，因为获取的提交对象与本地的提交对象不同，且获取的更新。</p><p><strong>提交冲突</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%8F%90%E4%BA%A4%E5%86%B2%E7%AA%81.png"></p><p><strong>更新冲突</strong></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%9B%B4%E6%96%B0%E5%86%B2%E7%AA%81.png"></p><p>当更新时有冲突后，更新之后，解决冲突</p><p>当提交冲突时，先更新本地仓库，在本地解决冲突后，再次提交。</p><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five&#x2F;jxy_first (master)$ git pushTo https:&#x2F;&#x2F;github.com&#x2F;new-rain&#x2F;jxy_first.git ! [rejected]        master -&gt; master (fetch first)error: failed to push some refs to &#39;https:&#x2F;&#x2F;github.com&#x2F;new-rain&#x2F;jxy_first.git&#39;hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., &#39;git pull ...&#39;) before pushing again.hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five&#x2F;jxy_first (master)$ git pullremote: Enumerating objects: 5, done.remote: Counting objects: 100% (5&#x2F;5), done.remote: Compressing objects: 100% (2&#x2F;2), done.remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0Unpacking objects: 100% (3&#x2F;3), 301 bytes | 1024 bytes&#x2F;s, done.From https:&#x2F;&#x2F;github.com&#x2F;new-rain&#x2F;jxy_first   42cffb9..b7f1738  master     -&gt; origin&#x2F;masterAuto-merging new.txtCONFLICT (content): Merge conflict in new.txtAutomatic merge failed; fix conflicts and then commit the result.Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five&#x2F;jxy_first (master|MERGING)$ cat new.txt&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADfirst by five&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;first by six&gt;&gt;&gt;&gt;&gt;&gt;&gt; b7f1738c006561f8f63ed3d1986968f657d01928secondLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five&#x2F;jxy_first (master|MERGING)$ vim new.txtLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five&#x2F;jxy_first (master|MERGING)$ git add .&#x2F;Lenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five&#x2F;jxy_first (master|MERGING)$ git commit -m &quot;new finish&quot;[master 5b35d40] new finishLenovo@▒▒▒▒▒▒ MINGW64 &#x2F;f&#x2F;Git&#x2F;five&#x2F;jxy_first (master)$ git pushEnumerating objects: 10, done.Counting objects: 100% (10&#x2F;10), done.Delta compression using up to 4 threadsCompressing objects: 100% (4&#x2F;4), done.Writing objects: 100% (6&#x2F;6), 646 bytes | 646.00 KiB&#x2F;s, done.Total 6 (delta 0), reused 0 (delta 0), pack-reused 0To https:&#x2F;&#x2F;github.com&#x2F;new-rain&#x2F;jxy_first.git   b7f1738..5b35d40  master -&gt; master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-pull-request流程"><a href="#5-pull-request流程" class="headerlink" title="5.pull request流程"></a>5.pull request流程</h2><p>如果你想要参与某个项目，但是并没有推送权限，这时可以对这个项目进行“派生”（Fork）.派生的意思是指， Github将在你的空间中创<br>建一个完全属于你的项目副本，且你对其具有推送权限。通过这种方式项目的管理者不再需要忙看把用户添加到贡献者列表并给予他们推送权限。人们可以派生这个项目，将修改推送到派生出的页目副本中，并通过创建合并请求（ Pull request）来让他们的改动进入源版本<br>基本流程<br>1.从 master分支中创建一个新分支（自己fork的项目）<br>2.提交一些修改来改进项目（自己fok的项目）将这个分支推送到GHub上（自己fork的项目）<br>4.创建一个合并请求讨论，根据实际情况继卖修改<br>6.项目的拥有者合并或关闭你的合并请求</p><p><strong>注意点</strong></p><p>每次在发起新的 Pull request时要去拉取最新的源仓库的代码，而不是自己for的那个仓库<br>git remote add&lt;sonm源仓库&gt;&lt;U源仓库&gt;<br>git fetch远程仓库名字<br>git merge对应的远程跟踪分支<br>ssh-kevgen -trs-C你的邮箱：生成公私钥<br>文件位置：C： Users Administrator、sh<br><a href="mailto:&#x54;&#115;&#x74;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;">&#x54;&#115;&#x74;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;</a>：测试公私钥是否已经配对</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/fork.png"></p><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/fork">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/fork</a> 1.png)</p><h2 id="6-忽略某些文件"><a href="#6-忽略某些文件" class="headerlink" title="6.忽略某些文件"></a>6.忽略某些文件</h2><pre><code>     一般我们总会有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临 时文件等。我们可以创建一个名为 ignore的文件，列出要忽略的文件模式</code></pre><p> 第一行告诉Git忽略所有以。o或。a结尾的文件。一般这类对象文件和存档文 件都是编译过程中岀现的，我们用不看跟踪它们的版本。第二行告诉Git忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略log，如mp或者pid目录，以及自动生成的文档等等。要养成一开始就设置好 gitignore文件的习惯，以免将来误提交这类无用的文件</p><p><strong>.gitignore的格式规范</strong></p><p> 所有空行或者以注释符号#开头的行都会被Gt忽略。</p><p> 可以使用标准的glob模式匹配。</p><p> *代表匹配任意个字符</p><p> ？代表匹配任意一个字符</p><p> **代表匹配多级目录</p><p> 匹配模式前跟反斜杠（/）这个斜杠代表项目根目录</p><p> 匹配模式最后跟反斜杠（）说明要忽略的是目录。</p><p> 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（！）取反。</p><p><strong>示例</strong></p><p>#此为注释一将被Git忽略</p><p>#忽略所有.a结尾的文件</p><p>*.a</p><p>#但lib.a除外</p><p>!lib.a</p><p>#仅仅忽略项目根目录下的TODO文件，不包括 subdir/ TODO</p><p>/TODO</p><p>#忽略 build/目录下的所有文件</p><p>build/</p><p>#会忽略doc.notes.txt但不包括 doc/server/arch. txt</p><p>doc/*.txt</p><p>#忽略doc目录下所有扩展名为txt的文件<br>doc/*<em>/</em>.txt（*通配符从Git版本1.82以上已经可以使用）<br>Github有一个十分详细的针对数十种项目及语言的期文件列表，你可以在btps：/ githuh. com/github/gitignore到它！！</p><h1 id="9-IDEA中使用Git"><a href="#9-IDEA中使用Git" class="headerlink" title="9.IDEA中使用Git"></a>9.IDEA中使用Git</h1><h2 id="1-在IDEA中配置Git和Github"><a href="#1-在IDEA中配置Git和Github" class="headerlink" title="1.在IDEA中配置Git和Github"></a>1.在IDEA中配置Git和Github</h2><h3 id="1-将Git配置进IDEA"><a href="#1-将Git配置进IDEA" class="headerlink" title="1.将Git配置进IDEA"></a>1.将Git配置进IDEA</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/IDEA&Git.png"></p><h3 id="2-配置Github账号"><a href="#2-配置Github账号" class="headerlink" title="2.配置Github账号"></a>2.配置Github账号</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/IDEA&Github.png"></p><h3 id="3-配置项目"><a href="#3-配置项目" class="headerlink" title="3.配置项目"></a>3.配置项目</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/IDEAGit.png"></p><h3 id="4-配置忽略文件"><a href="#4-配置忽略文件" class="headerlink" title="4.配置忽略文件"></a>4.配置忽略文件</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E9%85%8D%E7%BD%AE%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6.png"></p><h3 id="4-在Termianl中使用git指令"><a href="#4-在Termianl中使用git指令" class="headerlink" title="4.在Termianl中使用git指令"></a>4.在Termianl中使用git指令</h3><p>需要配置Termianl</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/Terminal.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/Terminal&git.png"></p><h2 id="2-IDEA中的Git操作"><a href="#2-IDEA中的Git操作" class="headerlink" title="2.IDEA中的Git操作"></a>2.IDEA中的Git操作</h2><h3 id="1-Git按钮作用"><a href="#1-Git按钮作用" class="headerlink" title="1.Git按钮作用"></a>1.Git按钮作用</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/Git%E6%8C%89%E9%92%AE.png"></p><h3 id="2-Git的Add操作"><a href="#2-Git的Add操作" class="headerlink" title="2.Git的Add操作"></a>2.Git的Add操作</h3><h4 id="1-创建文件时会提示是否添加"><a href="#1-创建文件时会提示是否添加" class="headerlink" title="1.创建文件时会提示是否添加"></a>1.创建文件时会提示是否添加</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/add%E6%8F%90%E7%A4%BA.png"></p><h4 id="2-Add所有文件"><a href="#2-Add所有文件" class="headerlink" title="2.Add所有文件"></a>2.Add所有文件</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/Add%E6%89%80%E6%9C%89.png"></p><h3 id="3-提交操作"><a href="#3-提交操作" class="headerlink" title="3.提交操作"></a>3.提交操作</h3><h4 id="1-按钮提交"><a href="#1-按钮提交" class="headerlink" title="1.按钮提交"></a>1.按钮提交</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%8C%89%E9%92%AE%E6%8F%90%E4%BA%A4.png"></p><h4 id="2-其他提交"><a href="#2-其他提交" class="headerlink" title="2.其他提交"></a>2.其他提交</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/20200918190726.png"></p><h4 id="3-提交界面"><a href="#3-提交界面" class="headerlink" title="3.提交界面"></a>3.提交界面</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/20200918190718.png"></p><h3 id="4-历史版本"><a href="#4-历史版本" class="headerlink" title="4.历史版本"></a>4.历史版本</h3><h4 id="1-查看历史版本"><a href="#1-查看历史版本" class="headerlink" title="1.查看历史版本"></a>1.查看历史版本</h4><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/20200918190414.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/20200918190407.png"></p><h4 id="2-恢复历史版本"><a href="#2-恢复历史版本" class="headerlink" title="2.恢复历史版本"></a>2.恢复历史版本</h4><h5 id="1-复制版本号"><a href="#1-复制版本号" class="headerlink" title="1.复制版本号"></a>1.复制版本号</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/20200918190358.png"></p><h5 id="2-恢复历史版本-1"><a href="#2-恢复历史版本-1" class="headerlink" title="2.恢复历史版本"></a>2.恢复历史版本</h5><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/20200918190353.png"></p><h2 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a>3.分支操作</h2><h3 id="1-创建分支"><a href="#1-创建分支" class="headerlink" title="1.创建分支"></a>1.创建分支</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/20200918190345.png"></p><p>快捷键ctrl+Shift+`</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%86%E6%94%AF.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%86%E6%94%AF2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%86%E6%94%AF3.png"></p><h3 id="2-切换分支"><a href="#2-切换分支" class="headerlink" title="2.切换分支"></a>2.切换分支</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png"></p><h3 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3.合并分支"></a>3.合并分支</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png"></p><h3 id="4-解决冲突"><a href="#4-解决冲突" class="headerlink" title="4.解决冲突"></a>4.解决冲突</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%812.png"></p><h3 id="5-上传Github"><a href="#5-上传Github" class="headerlink" title="5.上传Github"></a>5.上传Github</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%8F%90%E4%BA%A4.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%8F%90%E4%BA%A42.png"></p><h3 id="6-更新本地库"><a href="#6-更新本地库" class="headerlink" title="6.更新本地库"></a>6.更新本地库</h3><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E6%9C%AC%E5%9C%B0%E6%9B%B4%E6%96%B0.png"></p><p>7.克隆</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%85%8B%E9%9A%86.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%85%8B%E9%9A%862.png"></p><h1 id="10-SSH"><a href="#10-SSH" class="headerlink" title="10.SSH"></a>10.SSH</h1><p>1.创建</p><p>在ssh中输入指令创建密钥</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/SSH.png"></p><p>2.在码云或Github中注册</p><p>3.在使用时复制ssh格式url</p><h1 id="11-镜像加速"><a href="#11-镜像加速" class="headerlink" title="11.镜像加速"></a>11.镜像加速</h1><p>使用码云（国产代码库）</p><p>网址：<a href="https://gitee.com/">https://gitee.com/</a></p><p>在clone连接后添加.cnpmjs.org使用镜像加速（只能用于下载）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https:&#x2F;&#x2F;github.com.cnpmjs.org&#x2F;vuejs&#x2F;vue.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="2020/09/18/Docker/"/>
      <url>2020/09/18/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker入门"><a href="#1-Docker入门" class="headerlink" title="1.Docker入门"></a>1.Docker入门</h1><h2 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1.Docker简介"></a>1.Docker简介</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><p>解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p><a id="more"></a><h2 id="2-Docker的基本组成"><a href="#2-Docker的基本组成" class="headerlink" title="2.Docker的基本组成"></a>2.Docker的基本组成</h2><h3 id="1-镜像"><a href="#1-镜像" class="headerlink" title="1.镜像"></a>1.镜像</h3><p>Docker镜像（ Image）就是一个只读的模板。镜像可以用来创建 Docker容器，个镜像可以创建很多容器</p><h3 id="2-容器"><a href="#2-容器" class="headerlink" title="2.容器"></a>2.容器</h3><p>Docker利用容器（ Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。</p><p>它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p><p>可以把容器看做是一个简易版的Linux环境（包括root用户权限、进程空间、用户空间和网络空间等和运行在其中的应用程序。</p><p>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p><h3 id="3-仓库"><a href="#3-仓库" class="headerlink" title="3.仓库"></a>3.仓库</h3><p>仓库（ Repository）是集中存放镜像文件的场所。</p><p>仓库（ Repository）和仓库注册服务器（ Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为公开仓库（ Public）和私有仓库（ Private）两种形式。</p><p>最大的公开仓库是 Docker hub（htps:// hub.docker. com/）。存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image镜像文件。只有通过这个镜像文件才能生成 Docker容器。 Image文件可以看作是容器的模板。D.cker根据 Image文件生成容器的实例。同一个 Image文件，可以生成多个同时运行的容器实例。</p><p>Image文件生成的容器实例，本身也是一个文件，称为镜像文件。</p><p>一个容器运行一种服务，当我们需要的时候，就可以通过 docke客户端创建一个对应的运行实例，也就是我们的容器。</p><p>至于仓储，就是放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以了。</p><h2 id="3-Docker安装"><a href="#3-Docker安装" class="headerlink" title="3.Docker安装"></a>3.Docker安装</h2><h3 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.Docker安装"></a>1.Docker安装</h3><p>不同系统，不同版本不一定相同，以下以CentOS8为例（参考自<a href="https://www.cnblogs.com/ding2016/p/11592999.html">Adrian·Ding博客</a>）</p><p>其他系统/版本可参考<a href="https://docs.docker.com/engine/install/centos/">Docker官方文档</a></p><p>1.下载docker-ce的repo</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.安装依赖</p><pre class="line-numbers language-none"><code class="language-none">yum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.安装docker-ce</p><pre class="line-numbers language-none"><code class="language-none">yum install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.启动Docker服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.查看安装版本</p><pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.设置开机启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.完整安装过程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">******************************************步骤一********************************************************[root@localhost ~]# curl https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  2424  100  2424    0     0   2042      0  0:00:01  0:00:01 --:--:--  2042******************************************步骤二********************************************************[root@localhost ~]# yum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpmDocker CE Stable - x86_64                       8.9 kB&#x2F;s |  25 kB     00:02    containerd.io-1.2.6-3.3.fc30.x86_64.rpm         857 kB&#x2F;s |  21 MB     00:25    依赖关系解决。&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 软件包              架构         版本                 仓库                大小&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;安装: containerd.io       x86_64       1.2.6-3.3.fc30       @commandline        21 M     替换  runc.x86_64 1.0.0-64.rc9.module_el8.1.0+298+41f9343a事务概要&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;安装  1 软件包总计：21 M确定吗？[y&#x2F;N]： y下载软件包：运行事务检查事务检查成功。运行事务测试事务测试成功。运行事务  准备中  :                                                                 1&#x2F;1   安装    : containerd.io-1.2.6-3.3.fc30.x86_64                             1&#x2F;2   运行脚本: containerd.io-1.2.6-3.3.fc30.x86_64                             1&#x2F;2   废弃    : runc-1.0.0-64.rc9.module_el8.1.0+298+41f9343a.x86_64            2&#x2F;2   运行脚本: runc-1.0.0-64.rc9.module_el8.1.0+298+41f9343a.x86_64            2&#x2F;2   验证    : containerd.io-1.2.6-3.3.fc30.x86_64                             1&#x2F;2   验证    : runc-1.0.0-64.rc9.module_el8.1.0+298+41f9343a.x86_64            2&#x2F;2 已安装:  containerd.io-1.2.6-3.3.fc30.x86_64                                           完毕！******************************************步骤三********************************************************[root@localhost ~]# yum install docker-ce上次元数据过期检查：0:01:01 前，执行于 2020年06月25日 星期四 09时41分39秒。依赖关系解决。&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 软件包            架构       版本                   仓库                  大小&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;安装: docker-ce         x86_64     3:19.03.12-3.el7       docker-ce-stable      24 M安装依赖关系: libcgroup         x86_64     0.41-19.el8            BaseOS                70 k docker-ce-cli     x86_64     1:19.03.12-3.el7       docker-ce-stable      38 M事务概要&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;安装  3 软件包总下载：62 M安装大小：263 M确定吗？[y&#x2F;N]： y下载软件包：(1&#x2F;3): libcgroup-0.41-19.el8.x86_64.rpm         355 kB&#x2F;s |  70 kB     00:00    (2&#x2F;3): docker-ce-19.03.12-3.el7.x86_64.rpm      813 kB&#x2F;s |  24 MB     00:30    (3&#x2F;3): docker-ce-cli-19.03.12-3.el7.x86_64.rpm  1.1 MB&#x2F;s |  38 MB     00:33    --------------------------------------------------------------------------------总计                                            1.8 MB&#x2F;s |  62 MB     00:34     警告：&#x2F;var&#x2F;cache&#x2F;dnf&#x2F;docker-ce-stable-091d8a9c23201250&#x2F;packages&#x2F;docker-ce-19.03.12-3.el7.x86_64.rpm: 头V4 RSA&#x2F;SHA512 Signature, 密钥 ID 621e9f35: NOKEYDocker CE Stable - x86_64                       946  B&#x2F;s | 1.6 kB     00:01    导入 GPG 公钥 0x621E9F35: Userid: &quot;Docker Release (CE rpm) &lt;docker@docker.com&gt;&quot; 指纹: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 来自: https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;gpg确定吗？[y&#x2F;N]： y导入公钥成功运行事务检查事务检查成功。运行事务测试事务测试成功。运行事务  准备中  :                                                                 1&#x2F;1   安装    : docker-ce-cli-1:19.03.12-3.el7.x86_64                           1&#x2F;3   运行脚本: docker-ce-cli-1:19.03.12-3.el7.x86_64                           1&#x2F;3   运行脚本: libcgroup-0.41-19.el8.x86_64                                    2&#x2F;3   安装    : libcgroup-0.41-19.el8.x86_64                                    2&#x2F;3   运行脚本: libcgroup-0.41-19.el8.x86_64                                    2&#x2F;3   安装    : docker-ce-3:19.03.12-3.el7.x86_64                               3&#x2F;3   运行脚本: docker-ce-3:19.03.12-3.el7.x86_64                               3&#x2F;3   验证    : libcgroup-0.41-19.el8.x86_64                                    1&#x2F;3   验证    : docker-ce-3:19.03.12-3.el7.x86_64                               2&#x2F;3   验证    : docker-ce-cli-1:19.03.12-3.el7.x86_64                           3&#x2F;3 已安装:  docker-ce-3:19.03.12-3.el7.x86_64           libcgroup-0.41-19.el8.x86_64        docker-ce-cli-1:19.03.12-3.el7.x86_64      完毕！******************************************步骤四********************************************************[root@localhost ~]# systemctl start docker******************************************步骤五********************************************************[root@localhost ~]# docker versionClient: Docker Engine - Community Version:           19.03.12 API version:       1.40 Go version:        go1.13.10 Git commit:        48a66213fe Built:             Mon Jun 22 15:46:54 2020 OS&#x2F;Arch:           linux&#x2F;amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          19.03.12  API version:      1.40 (minimum version 1.12)  Go version:       go1.13.10  Git commit:       48a66213fe  Built:            Mon Jun 22 15:45:28 2020  OS&#x2F;Arch:          linux&#x2F;amd64  Experimental:     false containerd:  Version:          1.2.6  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb runc:  Version:          1.0.0-rc8  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f docker-init:  Version:          0.18.0  GitCommit:        fec3683<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置阿里云镜像"><a href="#2-配置阿里云镜像" class="headerlink" title="2.配置阿里云镜像"></a>2.配置阿里云镜像</h3><p>原因： <a href="https://hub.docker.com/">Docker仓库</a>是一个外国网址，国内访问速度慢，所以使用阿里云或网易云。</p><p>参考<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云官方文档</a></p><p>1.通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><p>非root模式下需要使用sudo获取权限，root模式下可以省略sudo</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;7rnfy9qt.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.完整示例</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost docker]# mkdir -p &#x2F;etc&#x2F;docker[root@localhost docker]# tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&gt; &#123;&gt;   &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;7rnfy9qt.mirror.aliyuncs.com&quot;]&gt; &#125;&gt; EOF&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;7rnfy9qt.mirror.aliyuncs.com&quot;]&#125;[root@localhost docker]# ll总用量 8-rw-r--r--. 1 root root  67 6月  25 10:00 daemon.json-rw-------. 1 root root 244 6月  25 09:44 key.json[root@localhost docker]# vim daemon.json[root@localhost docker]# systemctl daemon-reload[root@localhost docker]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-测试Docker"><a href="#3-测试Docker" class="headerlink" title="3.测试Docker"></a>3.测试Docker</h3><p>运行hello-world</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost docker]# docker run hello-world******************************************本地未找到，从仓库获取************************************************Unable to find image &#39;hello-world:latest&#39; locallylatest: Pulling from library&#x2F;hello-world0e03bdcc26d7: Pull complete Digest: sha256:d58e752213a51785838f9eed2b7a498ffa1cb3aa7f946dda11af39286c3db9a9Status: Downloaded newer image for hello-world:latest**********************************************运行成功*******************************************************Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https:&#x2F;&#x2F;hub.docker.com&#x2F;For more examples and ideas, visit: https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-原理"><a href="#4-原理" class="headerlink" title="4.原理"></a>4.原理</h3><p>Docker是一个cient- Server结构的系统， Docker守护进程运行在主机上，然后通过 Socket连接从客户端访问，守护进程从客户端接受<br>命令并管理运行在主机上的容器。容器，是一个运行时环境，就是我们前面说到的集装箱。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker%E5%8E%9F%E7%90%86.png"></p><h1 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h1><h2 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1.帮助命令"></a>1.帮助命令</h2><p>1.查看版本信息</p><pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.查看docker信息</p><pre class="line-numbers language-none"><code class="language-none">docker info <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.命令帮助</p><pre class="line-numbers language-none"><code class="language-none">docker --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h2><h3 id="1-列出本地镜像"><a href="#1-列出本地镜像" class="headerlink" title="1.列出本地镜像"></a>1.列出本地镜像</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同一仓库源可以有多个TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY：TAG来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用 ubuntu， docker将默认使用 ubuntu： latest镜像</p><p><strong>参数</strong></p><p>1.-a列出本地所有镜像（含中间映像层）</p><pre class="line-numbers language-none"><code class="language-none">docker image -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.-q只显示镜像ID</p><pre class="line-numbers language-none"><code class="language-none">docker image -q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.–digests:显示镜像的摘要信息</p><pre class="line-numbers language-none"><code class="language-none">docker image --digests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.–no-trunc:显示完整的镜像信息</p><pre class="line-numbers language-none"><code class="language-none">docker image --no-trunc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> images.png)</p><h3 id="2-查找镜像"><a href="#2-查找镜像" class="headerlink" title="2.查找镜像"></a>2.查找镜像</h3><p>从hub.docker.com中寻找镜像</p><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker search 镜像名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><p>1.-s:列出收藏数不小于某值的镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search -s 30 镜像名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.–no-trunc:显示完整的镜像信息</p><pre class="line-numbers language-none"><code class="language-none">docker search --no-trunc 镜像名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.–automated:只列出automated build类型的镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search --automated 镜像名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> search.png)</p><h3 id="3-下载镜像"><a href="#3-下载镜像" class="headerlink" title="3.下载镜像"></a>3.下载镜像</h3><p>从仓库中下载镜像，默认为官方仓库，配置阿里云后，从阿里云仓库下载</p><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker pull 镜像名字 [:TAG]   默认下载最新版docker pull 镜像名字:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> pull.png)</p><h3 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h3><p>从本地库中删除某个镜像</p><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker rmi 镜像名[:TAG]&#x2F;镜像ID      默认下载最新版docker rmi 镜像名字:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><p>1.-f:强制删除</p><pre class="line-numbers language-none"><code class="language-none">docker rmi -f 镜像名&#x2F;镜像ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.删除多个</p><pre class="line-numbers language-none"><code class="language-none">docker rmi 镜像1名&#x2F;镜像1ID镜像2名&#x2F;镜像2ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.$():删除全部</p><pre class="line-numbers language-none"><code class="language-none">docker rmi  -f $(docker image -qa)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![docker rmi](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> rm.png)</p><h3 id="5-提交镜像"><a href="#5-提交镜像" class="headerlink" title="5.提交镜像"></a>5.提交镜像</h3><p>提交容器副本，使之成为一个新的镜像。</p><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker commit -a&#x3D;&quot;作者&quot; -m&#x3D;&quot;注释&quot; 容器ID 镜像名:TAG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-创建镜像"><a href="#6-创建镜像" class="headerlink" title="6.创建镜像"></a>6.创建镜像</h3><p>根据DockerFile</p><pre class="line-numbers language-none"><code class="language-none">docker build -f Dockerfile文件绝对路径 -t 镜像名 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.</p><pre class="line-numbers language-none"><code class="language-none">docker push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h2><h3 id="1-新建并启动容器"><a href="#1-新建并启动容器" class="headerlink" title="1.新建并启动容器"></a>1.新建并启动容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker run [OPTIONS] 镜像ID&#x2F;镜像名 [COMMAND] [ARG..]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数OPTIONS</strong></p><p>1.–name 容器新名字：为容器指定一个名称；</p><p>2.-d：后台运行容器，并返回容器ID，也即启动守护式容器；</p><pre><code>&gt;使用镜像 centos： atest以后台模式启动一个容器&gt;docker run-d centos&gt;问题：然后 docker ps-a进行查看，会发现容器已经退出&gt;很重要的要说明的一点： Docker容器后台运行，就必须有一个前台进程&gt;容器运行的命令如果不是那些一直挂起的命令（比如运行top，ta），就是会自动退出的。&gt;这个是 docker的机制问题，比如你的web容器我们以 ngInx为例，正常情况下，我们配置启动服务只需要启动响应的 service即可。例如&gt;service nginx start&gt;但是，这样做， ngInX为后台进程模式运行，就导致 docker前台没有运行的应用，&gt;这样的容器后台启动后，会立即自杀因为他觉得他没事可做了。&gt;所以，最佳的解决方案是，将你要运行的程序以前台进程的形式运行</code></pre><p>3.-i：以交互模式运行容器，通常与-t同时使用；</p><p>4.-t：为容器重新分配一个伪输入终端，通常与-i同时使用；</p><p>5.-P：随机端口映射；</p><p>6.-p：指定端口映射（某些镜像运行需要分配端口号）有以下四种格式</p><pre class="line-numbers language-none"><code class="language-none">docker run -it -p 8888:8080 tomcat其中8888是要使用访问的端口，8080是tomcat容器中指定的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ip:hostPort containerPort<br>ip::containerPort<br>hostPort:containerPort<br>containerPort</p><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> run.png)</p><h3 id="2-列出当前所有运行中的容器"><a href="#2-列出当前所有运行中的容器" class="headerlink" title="2.列出当前所有运行中的容器"></a>2.列出当前所有运行中的容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker ps [OPTIONS]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><p>1.-a：列出当前所有正在运行的容器+历史上运行过的。</p><p>2.-l：显示最近创建的容器。</p><p>3.-n：显示最近n个创建的容器。</p><pre class="line-numbers language-none"><code class="language-none">docker ps -n 数字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.-q：静默模式，只显示容器编号。</p><p>5.–no-trunc：不截断输出。</p><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> ps.png)</p><h3 id="3-退出容器"><a href="#3-退出容器" class="headerlink" title="3.退出容器"></a>3.退出容器</h3><p><strong>方法一：</strong>容器停止退出</p><pre class="line-numbers language-none"><code class="language-none">exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>方法二：</strong>容器不停止退出</p><p>Ctrl+P+Q</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/exit.png"></p><p>![](G:\笔记\Docker\图片\Ctrl P Q.png)</p><h3 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4.启动容器"></a>4.启动容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker star 容器ID或容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> start.png)</p><h3 id="5-重启容器"><a href="#5-重启容器" class="headerlink" title="5.重启容器"></a>5.重启容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker restar 容器ID或容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> restart.png)</p><h3 id="6-停止容器"><a href="#6-停止容器" class="headerlink" title="6.停止容器"></a>6.停止容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker stop 容器ID或容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> stop.png)</p><h3 id="7-强制停止容器"><a href="#7-强制停止容器" class="headerlink" title="7.强制停止容器"></a>7.强制停止容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker kill 容器ID或容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-删除已停止容器"><a href="#8-删除已停止容器" class="headerlink" title="8.删除已停止容器"></a>8.删除已停止容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker rm 容器ID或容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](G:\笔记\Docker\图片\docker rm.png)</p><h3 id="9-删除多个容器"><a href="#9-删除多个容器" class="headerlink" title="9.删除多个容器"></a>9.删除多个容器</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">方法一docker rm -f $(docker ps -a -q)方法二docker ps -a -q | xargs docker rm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/rm">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/rm</a> all.png)</p><h3 id="10-查看容器日志"><a href="#10-查看容器日志" class="headerlink" title="10.查看容器日志"></a>10.查看容器日志</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker logs -f -t --tail 数字 容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><p>1.-f：跟随最新的日志打印</p><p>2.-t：加入时间戳</p><p>3.–tail 数字：显示最后几条日志</p><h3 id="11-查看容器内的进程"><a href="#11-查看容器内的进程" class="headerlink" title="11.查看容器内的进程"></a>11.查看容器内的进程</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker top 容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-查看容器内部细节"><a href="#12-查看容器内部细节" class="headerlink" title="12.查看容器内部细节"></a>12.查看容器内部细节</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker inspect 容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-进入正在运行的容器并以命令行交互"><a href="#13-进入正在运行的容器并以命令行交互" class="headerlink" title="13.进入正在运行的容器并以命令行交互"></a>13.进入正在运行的容器并以命令行交互</h3><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">方法一：直接进入容器启动命令的终端，不会启动新的的进程docker exec -it 容器ID bashShell（容器中的命令）方式二：在容器中打开新的终端，并且可以启动新的进程docker attach 容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/attach">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/attach</a> exec.png)</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/bin.png"></p><h3 id="14-从容器内拷贝数据到主机"><a href="#14-从容器内拷贝数据到主机" class="headerlink" title="14.从容器内拷贝数据到主机"></a>14.从容器内拷贝数据到主机</h3><pre class="line-numbers language-none"><code class="language-none">docker cp 容器ID:容器内路径 目的主机路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="15宿主机目录挂载到容器的目录"><a href="#15宿主机目录挂载到容器的目录" class="headerlink" title="15宿主机目录挂载到容器的目录"></a>15宿主机目录挂载到容器的目录</h3><p><strong>docker容器数据卷</strong></p><pre class="line-numbers language-none"><code class="language-none">docker run -it -v 宿主机目录:容器目录 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-其他命令"><a href="#4-其他命令" class="headerlink" title="4.其他命令"></a>4.其他命令</h2><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%91%BD%E4%BB%A4.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%91%BD%E4%BB%A42.png"></p><h1 id="3-Docker镜像"><a href="#3-Docker镜像" class="headerlink" title="3.Docker镜像"></a>3.Docker镜像</h1><h2 id="1-镜像简介"><a href="#1-镜像简介" class="headerlink" title="1.镜像简介"></a>1.镜像简介</h2><p>​        镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容包括代码、运行时、库、环境变量和配置文件。</p><h2 id="2-UnionFS（联合文件系统）"><a href="#2-UnionFS（联合文件系统）" class="headerlink" title="2.UnionFS（联合文件系统）"></a>2.UnionFS（联合文件系统）</h2><p>Union文件系统（ UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>特性</strong></p><p>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有的底层文件和目录。</p><h2 id="3-Docker镜像加载原理"><a href="#3-Docker镜像加载原理" class="headerlink" title="3.Docker镜像加载原理"></a>3.Docker镜像加载原理</h2><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS.<br>bootfs(boot file system}主要包含 bootloader和 kernel， bootloader主要是引导加载 kernel， Linux刚启动时会加载 boots文件系统，在Docker镜像的最底层是 boots.这一层与我们典型的 Linux/Unⅸx系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 boots转交给内核，此时系统也会卸载 boots.<br>rootfs（ root file systen），在 boots之上·包含的就是典型 Linux系统中的/dev，/proc，/bin，/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu， Centos等等。</p><p>对于一个精简的os， rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的 kernel，自己只需要提供 rootfs就行了。由此可见对于不同的 linux发行版， boots基本是一致的， rootfs会有差别，因此不同的发行版可以公用 boots.</p><h2 id="4-理解镜像层结构"><a href="#4-理解镜像层结构" class="headerlink" title="4.理解镜像层结构"></a>4.理解镜像层结构</h2><p>​        镜像的运行需要依赖一定的环境，例如：tomcat的运行需要依赖java运行环境JDK、系统环境等。</p><p>​        每一个镜像想要运行都需要有完整的运行环境，但不确定本机是否含有所需要的环境。所以，在镜像中包含了本镜像运行所需要的所有环境的镜像。因此每一个镜像都包含多层内容。但每个镜像下载又相当于是可读的。当再次下载其他镜像时，如果需要的镜像在本机中已存在，就可以跳过下载，当运行需要时，可以调用本机中已有的环境。</p><p>​        所以就可以解释为什么ubuntu系统镜像只有73.9M，而tomcat有647M。ubuntu系统所需要的运行环境少，而tomcat所需的运行环境多（JDK，系统等），那么，tomcat的镜像就包含JDK镜像，系统运行镜像等。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/tomcat,ubuntu.png"></p><p>​        包含的镜像又有包含的关系，所以，镜像是一层一层的。</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82.png"></p><h1 id="4-容器数据卷"><a href="#4-容器数据卷" class="headerlink" title="4.容器数据卷"></a>4.容器数据卷</h1><h2 id="1-容器数据卷简介"><a href="#1-容器数据卷简介" class="headerlink" title="1.容器数据卷简介"></a>1.容器数据卷简介</h2><p>​        卷就是目录或文件，存在于一个或多个容器中，由 docker挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System提供一些用于持续存储或共享数据的特性：<br>         卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此 Docke不会在容器删除时删除其挂载的数据卷</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p> 1：数据卷可在容器之间共享或重用数据<br> 2：卷中的更改可以直接生效<br> 3：数据卷中的更改不会包含在镜像的更新中<br> 4：数据卷的生命周期一直持续到没有容器使用它为止</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>容器持久化</p><p>容器间继承+数据共享</p><h2 id="2-添加容器数据卷"><a href="#2-添加容器数据卷" class="headerlink" title="2.添加容器数据卷"></a>2.添加容器数据卷</h2><h3 id="1-命令添加"><a href="#1-命令添加" class="headerlink" title="1.命令添加"></a>1.命令添加</h3><pre class="line-numbers language-none"><code class="language-none">docker run -it -v 宿主机目录绝对路径:容器目录 镜像名&#x2F;&#x2F;添加权限，只能读取，不能写入docker run -it -v 宿主机目录绝对路径:容器目录:ro 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-DockerFile添加"><a href="#2-DockerFile添加" class="headerlink" title="2.DockerFile添加"></a>2.DockerFile添加</h3><p>详细见章节5</p><p>1.创建Dockerfile文件所在目录</p><p>2.创建Dockerfile,并通过VOLUME创建容器数据卷</p><pre class="line-numbers language-none"><code class="language-none">FROM ubuntuVOLUME [&quot;&#x2F;data1&quot;,&quot;&#x2F;data2&quot;]CMD echo &quot;build success************************************************&quot;CMD &#x2F;bin.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.通过容器数据卷构建镜像</p><pre class="line-numbers language-none"><code class="language-none">docker build -f &#x2F;mydocker&#x2F;Dockerfile -t jxyUbuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.根据镜像创建容器</p><p>5.检测</p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B72.png"></p><h2 id="3-–volumes-from"><a href="#3-–volumes-from" class="headerlink" title="3.–volumes-from"></a>3.–volumes-from</h2><p>命名的容器挂载数据卷，其它容器通过挂载这个（父容器实现数据共享，挂载数据卷的容器，称之为数据卷容器</p><p><strong>命令</strong></p><pre class="line-numbers language-none"><code class="language-none">docker run -it --name 创建容器名 --volumes-from 已有容器名 镜像名&#x2F;ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-Dockerfile"><a href="#5-Dockerfile" class="headerlink" title="5.Dockerfile"></a>5.Dockerfile</h1><h2 id="1-Dockerfile简介"><a href="#1-Dockerfile简介" class="headerlink" title="1.Dockerfile简介"></a>1.Dockerfile简介</h2><p>Dockerfile是用来构建Dcke镜像的构建文件，是由一系列命令和参数构成的脚本。</p><h3 id="Dockerfile内容"><a href="#Dockerfile内容" class="headerlink" title="Dockerfile内容"></a>Dockerfile内容</h3><p>1：每条保留字指令都必须为大写字母且后面要跟随至少一个参数<br>2：指令按照从上到下，顺序执行<br>3：#表示注释<br>4：每条指令都会创建一个新的镜像层，并对镜像进行提交</p><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>1.docker从基础镜像运行一个容器</p><p>2.执行一条指令并对容器作出修改</p><p>3.执行类似 docker commit的操作提交一个新的镜像层</p><p>4.docker再基于刚提交的镜像运行一个新容器</p><p>5.执行 dockerfile中的下一条指令直到所有指令都执行完成</p><h2 id="2-Dockerfile体系结构"><a href="#2-Dockerfile体系结构" class="headerlink" title="2.Dockerfile体系结构"></a>2.Dockerfile体系结构</h2><p>1.FROM：当前新镜像是基于哪个镜像构建的。</p><p>2.MAINTAINER：镜像作者（维护者）姓名、邮箱。</p><p>3.RUN：容器构建时需要运行的命令。</p><p>4.EXPOSE：当前容器对外暴露的端口号。</p><p>5.WORKDIR：指定创建容器后，终端默认登录进来的工作目录，一个落脚点。</p><p>6.ENV：构建过程中设置环境变量。</p><p>7.ADD：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包。</p><p>8.COPY：类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中&lt;源路径&gt;的文件/录复制到新的一层的镜像内的&lt;日标路径&gt;位置。</p><p>9.VOLUME：容器数据卷，用于数据保存和持久化工作。</p><p>10.CMD：指定一个容器启动时要运行的命令。Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被 docker run之后的参                  数替换。</p><p>11.ENTRYPOINT：指定一个容器启动时要运行的命令，ENTRYPOINT目的和CMD一样都是在指定容器启动程序及参数，可以多个生效。</p><p>12.ONBUILD：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</p><h1 id="6-示例"><a href="#6-示例" class="headerlink" title="6.示例"></a>6.示例</h1><h2 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1.mysql"></a>1.mysql</h2><pre class="line-numbers language-none"><code class="language-none">docker pull mysql:5.6docker run 参数 mysql:5.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>运行示例</strong></p><pre class="line-numbers language-none"><code class="language-none">docker run -p 3307:3306 --name mysql -v &#x2F;my&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;msql&#x2F;conf.d -v &#x2F;my&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;my&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;0829 -d mysql:5.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p 1521:1521 --name oracle -v &#x2F;my&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;msql&#x2F;conf.d -v &#x2F;my&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;my&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;0829 -d mysql:5.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.-p 3307:3306：将主机的12345端口映射到 docker容器的3306端口。<br>2.–name mysql：运行服务名字<br>3.-v /my/mysql/conf:/etc/msql/conf.d：将主机/my/mysql录下的 conf挂载到容器的/ etc/mysql/conf. d<br>4.-v /my/mysql/logs:/logs：将主机/my/mysq|目录下的logs目录挂载到容器的/logs.<br>5.-v /my/mysql/data:/var/lib/mysql：将主机/my/mysql目录下的data目录挂载到容器的var/ lib/mysql<br>6.-e MYSQL_ROOT_PASSWORD=0829：初始化root用户的密码。<br>7.-d mysql:5.6：后台程序运行mysq5.6</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES2e835cb91b06        jxyubuntu           &quot;&#x2F;bin&#x2F;bash&quot;         3 hours ago         Exited (0) 48 minutes ago                       zen_euler247b8254b98c        tomcat              &quot;catalina.sh run&quot;   8 hours ago         Exited (143) 3 hours ago                        serene_borg531758b4501f        ubuntu              &quot;&#x2F;bin&#x2F;bash&quot;         24 hours ago        Exited (0) 24 hours ago                         pensive_margulis[root@localhost &#x2F;]# docker run -p 3307:3306 --name mysql -v &#x2F;my&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;msql&#x2F;conf.d -v &#x2F;my&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;my&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;0829 -d mysql:5.6869194b90bc6b54d8b25beb2cacc8f88c9e63748a39f5565e0bbc6491c8f0e10[root@localhost &#x2F;]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES869194b90bc6        mysql:5.6           &quot;docker-entrypoint.s…&quot;   8 seconds ago       Up 6 seconds        0.0.0.0:3307-&gt;3306&#x2F;tcp   mysql[root@localhost &#x2F;]# docker exec -it 69194b90bc6 &#x2F;bin&#x2F;bashError: No such container: 69194b90bc6[root@localhost &#x2F;]# docker exec -it 869194b90bc6 &#x2F;bin&#x2F;bashroot@869194b90bc6:&#x2F;# mysql -uroot -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 1Server version: 5.6.48 MySQL Community Server (GPL)Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and&#x2F;or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema |+--------------------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> mysql.png)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci指定mysql的一些配置参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Redis"><a href="#2-Redis" class="headerlink" title="2.Redis"></a>2.Redis</h2><pre class="line-numbers language-none"><code class="language-none">docker run -p 6375:6379 --name myredis -v &#x2F;my&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -v &#x2F;my&#x2F;redis&#x2F;data:&#x2F;data -d redis:5.0.9 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --appendonly yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker">https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker</a> redis.png)</p><h2 id="3-RabbitMQ"><a href="#3-RabbitMQ" class="headerlink" title="3.RabbitMQ"></a>3.RabbitMQ</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 5672:5672 -p 15672:15672 --name 容器名 镜像ID#打开web界面服务（15672端口）#进入容器命令行docker exec -it 容器ID &#x2F;bin&#x2F;bash#打开服务rabbitmq-plugins enable rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Zookeeper"><a href="#4-Zookeeper" class="headerlink" title="4.Zookeeper"></a>4.Zookeeper</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@jxy ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS                                                  NAMES96f94f42b9a1        zookeeper           &quot;&#x2F;docker-entrypoint.…&quot;   18 seconds ago      Up 17 seconds              2888&#x2F;tcp, 3888&#x2F;tcp, 0.0.0.0:2181-&gt;2181&#x2F;tcp, 8080&#x2F;tcp   zookeeperaa3b27bce4df        698f617ef315        &quot;docker-entrypoint.s…&quot;   2 weeks ago         Exited (0) 2 weeks ago                                                            myRabbitMQd379fbbea330        redis:5.0.9         &quot;docker-entrypoint.s…&quot;   5 weeks ago         Exited (0) 2 weeks ago                                                            myredis869194b90bc6        mysql:5.6           &quot;docker-entrypoint.s…&quot;   5 weeks ago         Exited (0) 3 weeks ago                                                            mysql2e835cb91b06        jxyubuntu           &quot;&#x2F;bin&#x2F;bash&quot;              5 weeks ago         Exited (0) 5 weeks ago                                                            zen_euler247b8254b98c        tomcat              &quot;catalina.sh run&quot;        5 weeks ago         Exited (143) 5 weeks ago                                                          serene_borg531758b4501f        ubuntu              &quot;&#x2F;bin&#x2F;bash&quot;              5 weeks ago         Exited (0) 5 weeks ago                                                            pensive_margulis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/new-rain/noteImage/img/docker-zookeeper.png"></p><p><strong>完整示例</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@jxy ~]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZErabbitmq            latest              698f617ef315        4 weeks ago         168MBjxyubuntu           latest              35d43ee54d7f        5 weeks ago         73.9MBubuntu              latest              74435f89ab78        7 weeks ago         73.9MBredis               latest              235592615444        8 weeks ago         104MBtomcat              latest              2eb5a120304e        8 weeks ago         647MBredis               5.0.9               4de10be2bf5e        8 weeks ago         98.3MBmysql               5.6                 8de95e6026c3        8 weeks ago         302MBhello-world         latest              bf756fb1ae65        7 months ago        13.3kB[root@jxy ~]# docker search zookeeperNAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDzookeeper                          Apache ZooKeeper is an open-source server wh…   903                 [OK]                jplock&#x2F;zookeeper                   Builds a docker image for Zookeeper version …   164                                     [OK]wurstmeister&#x2F;zookeeper                                                             126                                     [OK]mesoscloud&#x2F;zookeeper               ZooKeeper                                       73                                      [OK]bitnami&#x2F;zookeeper                  ZooKeeper is a centralized service for distr…   38                                      [OK]mbabineau&#x2F;zookeeper-exhibitor                                                      24                                      [OK]digitalwonderland&#x2F;zookeeper        Latest Zookeeper - clusterable                  20                                      [OK]tobilg&#x2F;zookeeper-webui             Docker image for using &#96;zk-web&#96; as ZooKeeper…   15                                      [OK]confluent&#x2F;zookeeper                                                                13                                      [OK]debezium&#x2F;zookeeper                 Zookeeper image required when running the De…   12                                      [OK]31z4&#x2F;zookeeper                     Dockerized Apache Zookeeper.                    7                                       [OK]thefactory&#x2F;zookeeper-exhibitor     Exhibitor-managed ZooKeeper with S3 backups …   6                                       [OK]emccorp&#x2F;zookeeper                  Zookeeper                                       2                                       engapa&#x2F;zookeeper                   Zookeeper image optimised for being used int…   2                                       perrykim&#x2F;zookeeper                 k8s - zookeeper  ( forked k8s contrib )         1                                       [OK]paulbrown&#x2F;zookeeper                Zookeeper on Kubernetes (PetSet)                1                                       [OK]duffqiu&#x2F;zookeeper-cli                                                              1                                       [OK]strimzi&#x2F;zookeeper                                                                  1                                       josdotso&#x2F;zookeeper-exporter        ref: https:&#x2F;&#x2F;github.com&#x2F;carlpett&#x2F;zookeeper_e…   1                                       [OK]openshift&#x2F;zookeeper-346-fedora20   ZooKeeper 3.4.6 with replication support        1                                       midonet&#x2F;zookeeper                  Dockerfile for a Zookeeper server.              0                                       [OK]humio&#x2F;zookeeper-dev                zookeeper build with zulu jvm.                  0                                       dabealu&#x2F;zookeeper-exporter         zookeeper exporter for prometheus               0                                       [OK]phenompeople&#x2F;zookeeper             Apache ZooKeeper is an open-source server wh…   0                                       [OK]pravega&#x2F;zookeeper-operator         Kubernetes operator for Zookeeper               0                                       [root@jxy ~]# docker pull zookeeperUsing default tag: latestlatest: Pulling from library&#x2F;zookeeper6ec8c9369e08: Pull complete 3aa4e9b77806: Pull complete 6d8b5d3bc409: Pull complete d7b61e0fcf67: Pull complete fade1530acad: Pull complete 5ccffe95b89d: Pull complete 4ba320b19ebd: Pull complete 1e6de2e0eb81: Pull complete Digest: sha256:987edbc16352baf0e68a383906d2fc8cd9af89f4593c6a37abb73df0dd35f413Status: Downloaded newer image for zookeeper:latestdocker.io&#x2F;library&#x2F;zookeeper:latest[root@jxy ~]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEzookeeper           latest              7341c5373a13        7 days ago          252MBrabbitmq            latest              698f617ef315        4 weeks ago         168MBjxyubuntu           latest              35d43ee54d7f        5 weeks ago         73.9MBubuntu              latest              74435f89ab78        7 weeks ago         73.9MBredis               latest              235592615444        8 weeks ago         104MBtomcat              latest              2eb5a120304e        8 weeks ago         647MBredis               5.0.9               4de10be2bf5e        8 weeks ago         98.3MBmysql               5.6                 8de95e6026c3        8 weeks ago         302MBhello-world         latest              bf756fb1ae65        7 months ago        13.3kB[root@jxy ~]# docker run -p 2181:2181 --name zookeeper -d zookeeper96f94f42b9a1d3ee58f58c3890a4241a4b7752c28e09990da1c41bff91ea13c7[root@jxy ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS                                                  NAMES96f94f42b9a1        zookeeper           &quot;&#x2F;docker-entrypoint.…&quot;   18 seconds ago      Up 17 seconds              2888&#x2F;tcp, 3888&#x2F;tcp, 0.0.0.0:2181-&gt;2181&#x2F;tcp, 8080&#x2F;tcp   zookeeperaa3b27bce4df        698f617ef315        &quot;docker-entrypoint.s…&quot;   2 weeks ago         Exited (0) 2 weeks ago                                                            myRabbitMQd379fbbea330        redis:5.0.9         &quot;docker-entrypoint.s…&quot;   5 weeks ago         Exited (0) 2 weeks ago                                                            myredis869194b90bc6        mysql:5.6           &quot;docker-entrypoint.s…&quot;   5 weeks ago         Exited (0) 3 weeks ago                                                            mysql2e835cb91b06        jxyubuntu           &quot;&#x2F;bin&#x2F;bash&quot;              5 weeks ago         Exited (0) 5 weeks ago                                                            zen_euler247b8254b98c        tomcat              &quot;catalina.sh run&quot;        5 weeks ago         Exited (143) 5 weeks ago                                                          serene_borg531758b4501f        ubuntu              &quot;&#x2F;bin&#x2F;bash&quot;              5 weeks ago         Exited (0) 5 weeks ago      [root@jxy ~]# docker exec -it 96f94f42b9a1 &#x2F;bin&#x2F;bashroot@96f94f42b9a1:&#x2F;apache-zookeeper-3.6.1-bin# pwd&#x2F;apache-zookeeper-3.6.1-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-上传镜像到阿里云"><a href="#7-上传镜像到阿里云" class="headerlink" title="7.上传镜像到阿里云"></a>7.上传镜像到阿里云</h1><p><a href="https://cr.console.aliyun.com/repository/cn-hangzhou/newrain/newrain/details">参考阿里云官方文档</a></p><h2 id="1-登录阿里云Docker-Registry"><a href="#1-登录阿里云Docker-Registry" class="headerlink" title="1. 登录阿里云Docker Registry"></a>1. 登录阿里云Docker Registry</h2><pre class="line-numbers language-none"><code class="language-none">$ sudo docker login --username&#x3D;旧城新雨 registry.cn-hangzhou.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p><h2 id="2-从Registry中拉取镜像"><a href="#2-从Registry中拉取镜像" class="headerlink" title="2. 从Registry中拉取镜像"></a>2. 从Registry中拉取镜像</h2><pre class="line-numbers language-none"><code class="language-none">$ sudo docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;newrain&#x2F;newrain:[镜像版本号]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-将镜像推送到Registry"><a href="#3-将镜像推送到Registry" class="headerlink" title="3. 将镜像推送到Registry"></a>3. 将镜像推送到Registry</h2><pre class="line-numbers language-none"><code class="language-none">$ sudo docker login --username&#x3D;旧城新雨 registry.cn-hangzhou.aliyuncs.com$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com&#x2F;newrain&#x2F;newrain:[镜像版本号]$ sudo docker push registry.cn-hangzhou.aliyuncs.com&#x2F;newrain&#x2F;newrain:[镜像版本号]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</p><h2 id="4-选择合适的镜像仓库地址"><a href="#4-选择合适的镜像仓库地址" class="headerlink" title="4. 选择合适的镜像仓库地址"></a>4. 选择合适的镜像仓库地址</h2><p>从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</p><p>如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-hangzhou.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</p><h2 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h2><p>使用”docker tag”命令重命名镜像，并将它通过专有网络地址推送至Registry。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker imagesREPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZEregistry.aliyuncs.com&#x2F;acs&#x2F;agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB$ sudo docker tag 37bb9c63c8b2 registry-vpc.cn-hangzhou.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用”docker images”命令找到镜像，将该镜像名称中的域名部分变更为Registry专有网络地址。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker push registry-vpc.cn-hangzhou.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
